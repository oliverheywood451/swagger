{{>partial_header}}

using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using {{packageName}}.Api;
using {{packageName}}.Model;
using {{packageName}}.Client;
using System.Reflection;
using System.Threading.Tasks;

namespace {{packageName}}.Test
{
    /// <summary>
    ///  Class for testing ApiAuth 
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class ApiAuthTests
    {
      private ApiAuth instance;
      /// <summary>
      /// Setup before each test
      /// </summary>
      [SetUp]
      public void Init()
      {
        Configuration.Default = new Configuration();
      }

      /// <summary>
      /// Clean up after each test
      /// </summary>
      [TearDown]
      public void Cleanup()
      {
      }

      /// <summary>
      /// Test that login is successful
      /// </summary>
      [Test, Ignore("Test is broken")]
      public async Task CanLoginWithPasswordFlowTest()
      {
        Assert.IsNull(Configuration.Default.AccessToken);

        Configuration.Default.ClientID = "BA89381F-E787-477D-B220-F8A01F0D582A";
        Configuration.Default.Scopes = new String[] {"FullAccess"};

        await ApiAuth.Login("testo5", "testo5");

        Assert.IsNotNull(Configuration.Default.AccessToken);
      }

      /// <summary>
    /// Test that authenticate is successful
    /// </summary>
      [Test, Ignore("Test is broken")]
      public async Task CanAuthenticateWithCredentialsFlowTest()
      {
        Assert.IsNull(Configuration.Default.AccessToken);

        Configuration.Default.ClientID = "BA89381F-E787-477D-B220-F8A01F0D582A";
        Configuration.Default.Scopes = new String[] { "FullAccess" };

        await ApiAuth.Authenticate();

        Assert.IsNotNull(Configuration.Default.AccessToken);
      }

      /// <summary>
      /// Test that we get the proper token back
      /// </summary>
      [Test, Ignore("Test is broken")]
      public void ItReturnsTheProperTokens()
      {
        var impersonationToken = new AccessToken("random_token", 1000, "Bearer");
        ApiAuth.StartImpersonate(impersonationToken);
        Assert.AreEqual(Configuration.Default.AccessToken, impersonationToken);

        ApiAuth.StopImpersonate();
        Assert.AreNotEqual(Configuration.Default.AccessToken, impersonationToken);
      }

      /// <summary>
      /// Test that the auth fails properly 
      /// </summary>
      [Test, Ignore("Test is broken")]
      public async Task ItFailsProperlyWithWrongAuthParams() 
      {
          Assert.IsNull(Configuration.Default.AccessToken);

          Configuration.Default.ClientID = "random"; 
          Configuration.Default.Scopes = new String[] { "FullAccess" };

          Assert.ThrowsAsync<ApiException>( async () => await ApiAuth.Authenticate());
      }
  }
}
