{{>partial_header}}

using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using {{packageName}}.Api;
using {{packageName}}.Model;
using {{packageName}}.Client;
using System.Reflection;
using System.Threading.Tasks;

namespace {{packageName}}.Test
{
    /// <summary>
    ///  Class for testing AuthApi 
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class AuthApiTests
    {
      private OrderCloudClient oc;
      /// <summary>
      /// Setup before each test
      /// </summary>
      [SetUp]
      public void Init()
      {
          var config = Configuration.Default;
          config.AuthURL = "https://stagingauth.ordercloud.io";
          config.ApiClient = new ApiClient("https://stagingapi.ordercloud.io/v1");
          oc = new OrderCloudClient(config);
      }

      /// <summary>
      /// Clean up after each test
      /// </summary>
      [TearDown]
      public void Cleanup()
      {
          Configuration.Default.AccessToken = null;
      }

      /// <summary>
      /// Test that login is successful
      /// </summary>
      [Test]
      public async Task CanLoginWithPasswordFlowTest()
      {
            Assert.IsNull(Configuration.Default.AccessToken);

            await oc.Auth.Login("CONNOR_OBRIEN", "fails345", "BC4C655E-B11A-4EB0-BF61-1A349FCF72DA", "FullAccess", "BuyerImpersonation");

            Assert.IsNotNull(Configuration.Default.AccessToken);

            var me = oc.Me.Get();
            var meAwaited = await oc.Me.GetAsync();
            Assert.AreEqual("CONNOR_OBRIEN", me.Username);
            Assert.AreEqual("CONNOR_OBRIEN", meAwaited.Username);
        }

      /// <summary>
    /// Test that authenticate is successful
    /// </summary>
      [Test]
      public async Task CanAuthenticateWithCredentialsFlowTest()
      {
          Assert.IsNull(Configuration.Default.AccessToken);

          await oc.Auth.ClientCredentials("potato", "A015750C-B342-4B78-B0B8-32AAD7ACE076", new[] {"FullAccess", "BuyerImpersonation"});

          Assert.IsNotNull(Configuration.Default.AccessToken);

          Configuration.Default.ImpersonationToken = oc.Users.GetAccessToken("e3mpDiik3Ua_kZ9V66jQ6g", "j2qPn7FyTECStXqY8sPTAQ",
              new ImpersonateTokenRequest
              {
                  ClientID = "BC4C655E-B11A-4EB0-BF61-1A349FCF72DA",
                  Roles = new List<string>() { "FullAccess" }
              });

          var adminMe = await oc.Me.GetAsync();
          var impersonatedMe = await oc.As().Me.GetAsync();
          Assert.AreEqual("cobrien451", adminMe.Username);
          Assert.AreEqual("CONNOR_OBRIEN", impersonatedMe.Username);
      }

      /// <summary>
      /// Test that we get the proper token back
      /// </summary>
      [Test, Ignore("Test is broken")]
      public void ItReturnsTheProperTokens()
      {
      }

      /// <summary>
      /// Test that the auth fails properly 
      /// </summary>
      [Test, Ignore("Test is broken")]
      public async Task ItFailsProperlyWithWrongAuthParams() 
      {
      }
  }
}
