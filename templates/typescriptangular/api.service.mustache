{{>licenseInfo}}
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
{{#useHttpClient}}
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';
{{/useHttpClient}}
{{^useHttpClient}}
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';
import { CustomQueryEncoderHelper }                          from '../encoder';
{{/useHttpClient}}

import { Observable }                                        from 'rxjs{{#useRxjsVersion6Imports}}';{{/useRxjsVersion6Imports}}{{^useRxjsVersion6Imports}}/Observable';{{/useRxjsVersion6Imports}}
import { OcTokenService }                                      from './token.service';
{{^useHttpClient}}
import '../rxjs-operators';
{{/useHttpClient}}

{{#imports}}
import { {{classname}} } from '../{{filename}}';
{{/imports}}

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
{{#withInterfaces}}
import { {{classname}}Interface }                            from './{{classname}}Interface';
{{/withInterfaces}}

{{#operations}}

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
@Injectable()
{{#withInterfaces}}
export class {{classname}} implements {{classname}}Interface {
{{/withInterfaces}}
{{^withInterfaces}}
export class {{classname}} {
{{/withInterfaces}}

    protected basePath = '{{{basePath}}}';
    public defaultHeaders = new {{#useHttpClient}}Http{{/useHttpClient}}Headers();
    public configuration = new Configuration();
    private impersonating = false;

    constructor(protected {{#useHttpClient}}httpClient: HttpClient{{/useHttpClient}}{{^useHttpClient}}http: Http{{/useHttpClient}}, protected ocTokenService: OcTokenService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
{{^useHttpClient}}
{{! Before HttpClient implementation or method overloading we relied on 2 functions, 1 to return the straight body as json
    and another to get the full response.}}

{{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     {{#required}}
     * @param {{paramName}} {{description}}
     {{/required}}
     {{^required}}
     * @param opts.{{paramName}} {{description}}
     {{/required}}
     {{/allParams}}*/
    {{! if you change this method signature, also change the version below }}
    public {{operationIdCamelCase}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{^useHttpClient}}{{#hasParams}}, {{/hasParams}}extraHttpRequestParams?: RequestOptionsArgs{{/useHttpClient}}): Observable<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}{}{{/returnType}}> {
        return this.{{operationIdCamelCase}}WithHttpInfo({{#allParams}}{{paramName}}, {{/allParams}}extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
{{^isResponseFile}}
                    return response.json() || {};
{{/isResponseFile}}
{{#isResponseFile}}
                    return response.blob();
{{/isResponseFile}}
                }
            });
    }

{{/operation}}
{{/useHttpClient}}
    /**
     * @description enable impersonation by calling this prior to any of the other methods in this service
     * 
     */
    public As(): this {
        this.impersonating = true;
        return this;
    }
{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}
     {{#required}}
     * @param {{paramName}} {{description}}
     {{/required}}
     {{^required}}
     * @param options.{{paramName}} {{description}}
     {{/required}}
     {{/allParams}}
     {{#useHttpClient}}* @param options.observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param options.reportProgress flag to report request and response progress.{{/useHttpClient}}
     */
    {{#useHttpClient}}
    {{#hasOptionalParams}}
   
    {{/hasOptionalParams}}
    public {{operationIdCamelCase}}({{#requiredParams}}{{paramName}}: {{{dataType}}}, {{/requiredParams}}options?: { {{#queryParams}}{{#isFilterParam}}filters?: { [key: string]: string | Array<string>; }, {{/isFilterParam}}{{^isFilterParam}}{{paramName}}?: {{{dataType}}}, {{/isFilterParam}}{{/queryParams}}observe?: 'body', reportProgress?: boolean}): Observable<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>;
    public {{operationIdCamelCase}}({{#requiredParams}}{{paramName}}: {{{dataType}}}, {{/requiredParams}}options?: { {{#queryParams}}{{#isFilterParam}}filters?: { [key: string]: string | Array<string>; }, {{/isFilterParam}}{{^isFilterParam}}{{paramName}}?: {{{dataType}}}, {{/isFilterParam}}{{/queryParams}}observe?: 'response', reportProgress?: boolean}): Observable<HttpResponse<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>>;
    public {{operationIdCamelCase}}({{#requiredParams}}{{paramName}}: {{{dataType}}}, {{/requiredParams}}options?: { {{#queryParams}}{{#isFilterParam}}filters?: { [key: string]: string | Array<string>; }, {{/isFilterParam}}{{^isFilterParam}}{{paramName}}?: {{{dataType}}}, {{/isFilterParam}}{{/queryParams}}observe?: 'events', reportProgress?: boolean}): Observable<HttpEvent<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>>;
    public {{operationIdCamelCase}}({{#requiredParams}}{{paramName}}: {{{dataType}}}, {{/requiredParams}}options?: { {{#queryParams}}{{#isFilterParam}}filters?: { [key: string]: string | Array<string>; }, {{/isFilterParam}}{{^isFilterParam}}{{paramName}}?: {{{dataType}}}, {{/isFilterParam}}{{/queryParams}}observe?: any, reportProgress?: boolean}): Observable<any> {
    {{/useHttpClient}}
    {{^useHttpClient}}
    public {{operationIdCamelCase}}WithHttpInfo({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}extraHttpRequestParams?: RequestOptionsArgs): Observable<Response> {
    {{/useHttpClient}}
        let opts = options || {};
        if (opts.observe === null || opts.observe === undefined) {
            opts.observe = 'body';
        }
        if (opts.reportProgress === null || opts.reportProgress === undefined) {
            opts.reportProgress = false;
        }
{{#allParams}}
{{#required}}
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{operationIdCamelCase}}.');
        }
{{/required}}
{{/allParams}}

{{#hasQueryParams}}
        {{#useHttpClient}}
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        {{/useHttpClient}}
        {{^useHttpClient}}
        let queryParameters = new URLSearchParams('', new CustomQueryEncoderHelper());
        {{/useHttpClient}}
{{#queryParams}}
        {{#isListContainer}}
        if ({{^required}}opts.{{/required}}{{paramName}}) {
        {{#isCollectionFormatMulti}}
            {{^required}}opts.{{/required}}{{paramName}}.forEach((element) => {
                {{#useHttpClient}}queryParameters = {{/useHttpClient}}queryParameters.append('{{baseName}}', <any>element);
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            {{#useHttpClient}}queryParameters = {{/useHttpClient}}queryParameters.set('{{baseName}}', {{^required}}opts.{{/required}}{{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
        {{/isCollectionFormatMulti}}
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if ({{^required}}opts.{{/required}}{{paramName}} !== undefined) {
        {{#isDateTime}}
            {{#useHttpClient}}queryParameters = {{/useHttpClient}}queryParameters.set('{{baseName}}', <any>{{^required}}opts.{{/required}}{{paramName}}.toISOString());
        {{/isDateTime}}
        {{^isDateTime}}
            {{#isFilterParam}}
            queryParameters = this.configuration.unwrapFilters({{^required}}opts.{{/required}}{{paramName}}, queryParameters, '{{operationIdCamelCase}}');
            {{/isFilterParam}}
            {{^isFilterParam}}
            {{#useHttpClient}}queryParameters = {{/useHttpClient}}queryParameters.set('{{baseName}}', <any>{{^required}}opts.{{/required}}{{paramName}});
            {{/isFilterParam}}
        {{/isDateTime}}
        }
        if ({{^required}}opts.{{/required}}{{paramName}} === null) {
            throw new Error('Parameter {{paramName}} was null when calling {{operationIdCamelCase}}. Null values are not allowed');
        }
        {{/isListContainer}}
{{/queryParams}}

{{/hasQueryParams}}
        let headers = {{#useHttpClient}}this.defaultHeaders;{{/useHttpClient}}{{^useHttpClient}}new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845{{/useHttpClient}}
{{#headerParams}}
        {{#isListContainer}}
        if ({{paramName}}) {
            {{#useHttpClient}}headers = {{/useHttpClient}}headers.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if ({{paramName}} !== undefined && {{paramName}} !== null) {
            {{#useHttpClient}}headers = {{/useHttpClient}}headers.set('{{baseName}}', String({{paramName}}));
        }
        {{/isListContainer}}
{{/headerParams}}

{{#authMethods}}
        // authentication ({{name}}) required
{{#isApiKey}}
{{#isKeyInHeader}}
        if (this.configuration.apiKeys["{{keyParamName}}"]) {
            {{#useHttpClient}}headers = {{/useHttpClient}}headers.set('{{keyParamName}}', this.configuration.apiKeys["{{keyParamName}}"]);
        }

{{/isKeyInHeader}}
{{#isKeyInQuery}}
        if (this.configuration.apiKeys["{{keyParamName}}"]) {
            {{#useHttpClient}}queryParameters = {{/useHttpClient}}queryParameters.set('{{keyParamName}}', this.configuration.apiKeys["{{keyParamName}}"]);
        }

{{/isKeyInQuery}}
{{/isApiKey}}
{{#isBasic}}
        if (this.configuration.username || this.configuration.password) {
            {{#useHttpClient}}headers = {{/useHttpClient}}headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

{{/isBasic}}
{{#isOAuth}}
        let accessToken = this.impersonating ? this.ocTokenService.GetImpersonation() : this.ocTokenService.GetAccess();
        this.impersonating = false;
        {{#useHttpClient}}headers = {{/useHttpClient}}headers.set('Authorization', 'Bearer ' + accessToken);

{{/isOAuth}}
{{/authMethods}}
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            {{#produces}}
            '{{{mediaType}}}'{{#hasMore}},{{/hasMore}}
            {{/produces}}
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
{{^useHttpClient}}
            headers.set("Accept", httpHeaderAcceptSelected);
{{/useHttpClient}}
{{#useHttpClient}}
            headers = headers.set("Accept", httpHeaderAcceptSelected);
{{/useHttpClient}}
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            {{#consumes}}
            '{{{mediaType}}}'{{#hasMore}},{{/hasMore}}
            {{/consumes}}
        ];
{{#bodyParam}}
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
{{^useHttpClient}}
            headers.set('Content-Type', httpContentTypeSelected);
{{/useHttpClient}}
{{#useHttpClient}}
            headers = headers.set("Content-Type", httpContentTypeSelected);
{{/useHttpClient}}
        }
{{/bodyParam}}

{{#useHttpClient}}
        return this.httpClient.{{httpMethod}}{{^isResponseFile}}<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>{{/isResponseFile}}(`${this.basePath}{{{path}}}`,{{#isBodyAllowed}}
            {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}{{#hasFormParams}}convertFormParamsToString ? formParams.toString() : formParams{{/hasFormParams}}{{^hasFormParams}}null{{/hasFormParams}}{{/bodyParam}},{{/isBodyAllowed}}
            {
{{#hasQueryParams}}
                params: queryParameters,
{{/hasQueryParams}}
{{#isResponseFile}}
                responseType: "blob",
{{/isResponseFile}}
                headers: headers,
                observe: opts.observe,
                reportProgress: opts.reportProgress
            }
        );
{{/useHttpClient}}
{{^useHttpClient}}
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: {{httpMethod}},
            headers: headers,
{{#bodyParam}}
            body: {{paramName}} == null ? '' : JSON.stringify({{paramName}}), // https://github.com/angular/angular/issues/10612
{{/bodyParam}}
{{#isResponseFile}}
            responseType: ResponseContentType.Blob,
{{/isResponseFile}}
{{#hasQueryParams}}
            search: queryParameters,
{{/hasQueryParams}}
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(`${this.basePath}{{{path}}}`, requestOptions);
{{/useHttpClient}}
    }
{{/operation}}
 }
{{/operations}}
