<?php
/**
 * ApiAuthTest
 * php version 5
 *
 * @category class
 * @package  {{invokerPackage}}
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/license-2.0 apache licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

{{>partial_header}}
/**
 * note: this class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * please update the test case below to test the endpoint.
 */

namespace {{invokerPackage}};

use \{{invokerPackage}}\configuration;
use \{{invokerPackage}}\apiclient;
use \{{invokerPackage}}\apiexception;
use \{{invokerPackage}}\objectserializer;
use \{{invokerPackage}}\apiauth;
/**
 * ApiAuthTest class doc comment
 *
 * @category class
 * @package  {{invokerPackage}}
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/license-2.0 apache licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

class ApiAuthTest extends \PHPUnit_Framework_TestCase
{

    private static $validClientId;
    private static $validUsername;
    private static $validPassword;
    private static $validClientSecret;

    private static $invalidClientId;
    private static $invalidUsername;
    private static $invalidPassword;
    private static $invalidClientSecret;

    private static $scopes;
    private static $badAuthUrl;

    private static $impersonationToken;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        ApiAuthTest::$validClientId = "BA89381F-E787-477D-B220-F8A01F0D582A";
        ApiAuthTest::$validUsername = "testo5";
        ApiAuthTest::$validPassword = "testo5";
        ApiAuthTest::$validClientSecret = "";

        ApiAuthTest::$invalidClientId = "L6kzJlz1ewwYYeVozNCs";
        ApiAuthTest::$invalidUsername = "invaliduser";
        ApiAuthTest::$invalidPassword = "invalidpassword";
        ApiAuthTest::$invalidClientSecret = "L6kzJlz1ewwYYeVozNCs";

        ApiAuthTest::$scopes = ["FullAccess"];
        ApiAuthTest::$badAuthUrl = "thisshouldnotwork";

        ApiAuthTest::$impersonationToken = "4QAtuGBvK8bj22XdT0H5";
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for successful login with the password flow
     */
    public function testPasswordFlowSuccesfulLogin()
    {
        Configuration::getDefaultConfiguration()->setClientId(ApiAuthTest::$validClientId);
        Configuration::getDefaultConfiguration()->setScopes(ApiAuthTest::$scopes);

        ApiAuth::login(ApiAuthTest::$validUsername, ApiAuthTest::$validPassword);

        $this->assertNotEmpty(Configuration::getDefaultConfiguration()->getAccessToken());
    }

    /**
    * @expectedException {{invokerPackage}}\ApiException
     */
    public function testPasswordFlowFailsWithEmptyClientId()
    {
        Configuration::getDefaultConfiguration()->setClientId('');
        Configuration::getDefaultConfiguration()->setScopes(ApiAuthTest::$scopes);

        ApiAuth::login(ApiAuthTest::$validUsername, ApiAuthTest::$validPassword);
    }

    /**
     * @expectedException {{invokerPackage}}\ApiException
     */
    public function testPasswordFlowFailsWithInvalidClientId()
    {
        Configuration::getDefaultConfiguration()->setClientId(ApiAuthTest::$invalidClientId);
        Configuration::getDefaultConfiguration()->setScopes(ApiAuthTest::$scopes);

        ApiAuth::login(ApiAuthTest::$validUsername, ApiAuthTest::$validPassword);
    }

    /**
     * @expectedException {{invokerPackage}}\ApiException
     */
    public function testPasswordFlowFailsWithInvalidUsernamePassword()
    {
        Configuration::getDefaultConfiguration()->setClientId(ApiAuthTest::$validClientId);
        Configuration::getDefaultConfiguration()->setScopes(ApiAuthTest::$scopes);

        ApiAuth::login(ApiAuthTest::$invalidUsername, ApiAuthTest::$invalidPassword);
    }

    public function testCredentialsFlowSuccesfulLogin()
    {
        Configuration::getDefaultConfiguration()->setClientId(ApiAuthTest::$validClientId);
        Configuration::getDefaultConfiguration()->setScopes(ApiAuthTest::$scopes);

        ApiAuth::authenticate(ApiAuthTest::$validClientSecret);
        $this->assertNotEmpty(Configuration::getDefaultConfiguration()->getAccessToken());
    }

    /**
     * @expectedException {{invokerPackage}}\ApiException
     */
    public function testCredentialsFlowFailsWithEmptyClientId()
    {
        Configuration::getDefaultConfiguration()->setClientId('');
        Configuration::getDefaultConfiguration()->setScopes(ApiAuthTest::$scopes);

        ApiAuth::authenticate(ApiAuthTest::$validClientSecret);
    }

    /**
     * @expectedException {{invokerPackage}}\ApiException
     */
    public function testCredentialsFlowFailsWithInvalidClientId()
    {
        Configuration::getDefaultConfiguration()->setClientId(ApiAuthTest::$invalidClientId);
        Configuration::getDefaultConfiguration()->setScopes(ApiAuthTest::$scopes);

        ApiAuth::authenticate(ApiAuthTest::$validClientSecret);
    }

    public function testImpersonationSucceeds()
    {
        ApiAuth::startImpersonate(ApiAuthTest::$impersonationToken);
        $this->assertTrue(Configuration::getDefaultConfiguration()->isImpersonating());
    }

    /**
     * @expectedException \InvalidArgumentException
     */
    public function testImpersonationFailsWhenNoToken()
    {
        ApiAuth::startImpersonate('');
        $this->assertFalse(Configuration::getDefaultConfiguration()->isImpersonating());
    }

    public function testImpersonationStopsProperly()
    {
        ApiAuth::startImpersonate(ApiAuthTest::$impersonationToken);
        $this->assertTrue(Configuration::getDefaultConfiguration()->isImpersonating());

        ApiAuth::stopImpersonate();
        $this->assertFalse(Configuration::getDefaultConfiguration()->isImpersonating());
    }

    public function testImpersonationReturnProperToken()
    {
        ApiAuth::startImpersonate(ApiAuthTest::$impersonationToken);
        $this->assertEquals(Configuration::getDefaultConfiguration()->getAccessToken(), ApiAuthTest::$impersonationToken);

        ApiAuth::stopImpersonate();
        $this->assertNotEquals(Configuration::getDefaultConfiguration()->getAccessToken(), ApiAuthTest::$impersonationToken);
    }
}
