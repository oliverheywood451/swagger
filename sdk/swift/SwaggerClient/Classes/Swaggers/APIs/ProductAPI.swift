//
// ProductAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ProductAPI: APIBase {
    /**

     - parameter productID: (path) ID of the product. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func callGet(productID productID: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        callGetWithRequestBuilder(productID: productID).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /products/{productID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func callGetWithRequestBuilder(productID productID: String) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter product: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func create(product product: Product, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        createWithRequestBuilder(product: product).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /products
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter product: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func createWithRequestBuilder(product product: Product) -> RequestBuilder<AnyObject> {
        let path = "/products"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = product.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func delete(productID productID: String, completion: ((error: ErrorType?) -> Void)) {
        deleteWithRequestBuilder(productID: productID).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /products/{productID}
     - OAuth:
       - type: oauth2
       - name: auth
     
     - parameter productID: (path) ID of the product. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWithRequestBuilder(productID productID: String) -> RequestBuilder<Void> {
        var path = "/products/{productID}"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter buyerID: (path) ID of the buyer. 
     - parameter productID: (path) ID of the product. 
     - parameter userID: (query) ID of the user. (optional)
     - parameter userGroupID: (query) ID of the user group. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAssignment(buyerID buyerID: String, productID: String, userID: String? = nil, userGroupID: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteAssignmentWithRequestBuilder(buyerID: buyerID, productID: productID, userID: userID, userGroupID: userGroupID).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /products/{productID}/assignments/{buyerID}
     - OAuth:
       - type: oauth2
       - name: auth
     
     - parameter buyerID: (path) ID of the buyer. 
     - parameter productID: (path) ID of the product. 
     - parameter userID: (query) ID of the user. (optional)
     - parameter userGroupID: (query) ID of the user group. (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteAssignmentWithRequestBuilder(buyerID buyerID: String, productID: String, userID: String? = nil, userGroupID: String? = nil) -> RequestBuilder<Void> {
        var path = "/products/{productID}/assignments/{buyerID}"
        path = path.stringByReplacingOccurrencesOfString("{buyerID}", withString: "\(buyerID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "userID": userID,
            "userGroupID": userGroupID
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter overwriteExisting: (query) Overwrite existing of the product. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func generateVariants(productID productID: String, overwriteExisting: Bool? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        generateVariantsWithRequestBuilder(productID: productID, overwriteExisting: overwriteExisting).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /products/{productID}/variants/generate
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 
     - parameter overwriteExisting: (query) Overwrite existing of the product. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func generateVariantsWithRequestBuilder(productID productID: String, overwriteExisting: Bool? = nil) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}/variants/generate"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "overwriteExisting": overwriteExisting
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInventory(productID productID: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        getInventoryWithRequestBuilder(productID: productID).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /products/{productID}/inventory
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func getInventoryWithRequestBuilder(productID productID: String) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}/inventory"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter variantID: (path) ID of the variant. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVariant(productID productID: String, variantID: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        getVariantWithRequestBuilder(productID: productID, variantID: variantID).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /products/{productID}/variants/{variantID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 
     - parameter variantID: (path) ID of the variant. 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func getVariantWithRequestBuilder(productID productID: String, variantID: String) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}/variants/{variantID}"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{variantID}", withString: "\(variantID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter variantID: (path) ID of the variant. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVariantInventory(productID productID: String, variantID: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        getVariantInventoryWithRequestBuilder(productID: productID, variantID: variantID).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /products/{productID}/variants/inventory/{variantID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 
     - parameter variantID: (path) ID of the variant. 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func getVariantInventoryWithRequestBuilder(productID productID: String, variantID: String) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}/variants/inventory/{variantID}"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{variantID}", withString: "\(variantID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func list(search search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        listWithRequestBuilder(search: search, searchOn: searchOn, sortBy: sortBy, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /products
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func listWithRequestBuilder(search search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil) -> RequestBuilder<AnyObject> {
        let path = "/products"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "searchOn": searchOn,
            "sortBy": sortBy,
            "page": page?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter productID: (query) ID of the product. (optional)
     - parameter buyerID: (query) ID of the buyer. (optional)
     - parameter userID: (query) ID of the user. (optional)
     - parameter userGroupID: (query) ID of the user group. (optional)
     - parameter level: (query) Level of the product. (optional)
     - parameter priceScheduleID: (query) ID of the price schedule. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listAssignments(productID productID: String? = nil, buyerID: String? = nil, userID: String? = nil, userGroupID: String? = nil, level: String? = nil, priceScheduleID: String? = nil, page: Int32? = nil, pageSize: Int32? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        listAssignmentsWithRequestBuilder(productID: productID, buyerID: buyerID, userID: userID, userGroupID: userGroupID, level: level, priceScheduleID: priceScheduleID, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /products/assignments
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (query) ID of the product. (optional)
     - parameter buyerID: (query) ID of the buyer. (optional)
     - parameter userID: (query) ID of the user. (optional)
     - parameter userGroupID: (query) ID of the user group. (optional)
     - parameter level: (query) Level of the product. (optional)
     - parameter priceScheduleID: (query) ID of the price schedule. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func listAssignmentsWithRequestBuilder(productID productID: String? = nil, buyerID: String? = nil, userID: String? = nil, userGroupID: String? = nil, level: String? = nil, priceScheduleID: String? = nil, page: Int32? = nil, pageSize: Int32? = nil) -> RequestBuilder<AnyObject> {
        let path = "/products/assignments"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "productID": productID,
            "buyerID": buyerID,
            "userID": userID,
            "userGroupID": userGroupID,
            "level": level,
            "priceScheduleID": priceScheduleID,
            "page": page?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listInventory(search search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        listInventoryWithRequestBuilder(search: search, searchOn: searchOn, sortBy: sortBy, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /products/inventory
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func listInventoryWithRequestBuilder(search search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil) -> RequestBuilder<AnyObject> {
        let path = "/products/inventory"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "searchOn": searchOn,
            "sortBy": sortBy,
            "page": page?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listVariantInventory(productID productID: String, search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        listVariantInventoryWithRequestBuilder(productID: productID, search: search, searchOn: searchOn, sortBy: sortBy, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /products/{productID}/variants/inventory
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 
     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func listVariantInventoryWithRequestBuilder(productID productID: String, search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}/variants/inventory"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "searchOn": searchOn,
            "sortBy": sortBy,
            "page": page?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listVariants(productID productID: String, search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        listVariantsWithRequestBuilder(productID: productID, search: search, searchOn: searchOn, sortBy: sortBy, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /products/{productID}/variants
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 
     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func listVariantsWithRequestBuilder(productID productID: String, search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}/variants"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "searchOn": searchOn,
            "sortBy": sortBy,
            "page": page?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter product: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patch(productID productID: String, product: Product, completion: ((error: ErrorType?) -> Void)) {
        patchWithRequestBuilder(productID: productID, product: product).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - PATCH /products/{productID}
     - OAuth:
       - type: oauth2
       - name: auth
     
     - parameter productID: (path) ID of the product. 
     - parameter product: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func patchWithRequestBuilder(productID productID: String, product: Product) -> RequestBuilder<Void> {
        var path = "/products/{productID}"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = product.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter variantID: (path) ID of the variant. 
     - parameter variant: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchVariant(productID productID: String, variantID: String, variant: Variant, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        patchVariantWithRequestBuilder(productID: productID, variantID: variantID, variant: variant).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PATCH /products/{productID}/variants/{variantID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 
     - parameter variantID: (path) ID of the variant. 
     - parameter variant: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func patchVariantWithRequestBuilder(productID productID: String, variantID: String, variant: Variant) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}/variants/{variantID}"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{variantID}", withString: "\(variantID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = variant.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter productAssignment: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func saveAssignment(productAssignment productAssignment: ProductAssignment, completion: ((error: ErrorType?) -> Void)) {
        saveAssignmentWithRequestBuilder(productAssignment: productAssignment).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /products/assignments
     - OAuth:
       - type: oauth2
       - name: auth
     
     - parameter productAssignment: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func saveAssignmentWithRequestBuilder(productAssignment productAssignment: ProductAssignment) -> RequestBuilder<Void> {
        let path = "/products/assignments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = productAssignment.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter product: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func update(productID productID: String, product: Product, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        updateWithRequestBuilder(productID: productID, product: product).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /products/{productID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 
     - parameter product: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func updateWithRequestBuilder(productID productID: String, product: Product) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = product.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter inventory: (path) Inventory of the product. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateInventory(productID productID: String, inventory: Int32, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        updateInventoryWithRequestBuilder(productID: productID, inventory: inventory).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /products/{productID}/inventory/{inventory}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 
     - parameter inventory: (path) Inventory of the product. 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func updateInventoryWithRequestBuilder(productID productID: String, inventory: Int32) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}/inventory/{inventory}"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{inventory}", withString: "\(inventory)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter variantID: (path) ID of the variant. 
     - parameter variant: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVariant(productID productID: String, variantID: String, variant: Variant, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        updateVariantWithRequestBuilder(productID: productID, variantID: variantID, variant: variant).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /products/{productID}/variants/{variantID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 
     - parameter variantID: (path) ID of the variant. 
     - parameter variant: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func updateVariantWithRequestBuilder(productID productID: String, variantID: String, variant: Variant) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}/variants/{variantID}"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{variantID}", withString: "\(variantID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = variant.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter productID: (path) ID of the product. 
     - parameter variantID: (path) ID of the variant. 
     - parameter inventory: (path) Inventory of the product. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVariantInventory(productID productID: String, variantID: String, inventory: Int32, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        updateVariantInventoryWithRequestBuilder(productID: productID, variantID: variantID, inventory: inventory).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /products/{productID}/variants/inventory/{variantID}/{inventory}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter productID: (path) ID of the product. 
     - parameter variantID: (path) ID of the variant. 
     - parameter inventory: (path) Inventory of the product. 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func updateVariantInventoryWithRequestBuilder(productID productID: String, variantID: String, inventory: Int32) -> RequestBuilder<AnyObject> {
        var path = "/products/{productID}/variants/inventory/{variantID}/{inventory}"
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{variantID}", withString: "\(variantID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{inventory}", withString: "\(inventory)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
