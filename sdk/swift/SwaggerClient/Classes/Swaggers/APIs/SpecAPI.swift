//
// SpecAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class SpecAPI: APIBase {
    /**

     - parameter specID: (path) ID of the spec. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func callGet(specID specID: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        callGetWithRequestBuilder(specID: specID).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /specs/{specID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter specID: (path) ID of the spec. 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func callGetWithRequestBuilder(specID specID: String) -> RequestBuilder<AnyObject> {
        var path = "/specs/{specID}"
        path = path.stringByReplacingOccurrencesOfString("{specID}", withString: "\(specID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter spec: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func create(spec spec: Spec, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        createWithRequestBuilder(spec: spec).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /specs
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter spec: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func createWithRequestBuilder(spec spec: Spec) -> RequestBuilder<AnyObject> {
        let path = "/specs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = spec.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter specID: (path) ID of the spec. 
     - parameter option: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createOption(specID specID: String, option: SpecOption, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        createOptionWithRequestBuilder(specID: specID, option: option).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /specs/{specID}/options
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter specID: (path) ID of the spec. 
     - parameter option: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func createOptionWithRequestBuilder(specID specID: String, option: SpecOption) -> RequestBuilder<AnyObject> {
        var path = "/specs/{specID}/options"
        path = path.stringByReplacingOccurrencesOfString("{specID}", withString: "\(specID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = option.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter specID: (path) ID of the spec. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func delete(specID specID: String, completion: ((error: ErrorType?) -> Void)) {
        deleteWithRequestBuilder(specID: specID).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /specs/{specID}
     - OAuth:
       - type: oauth2
       - name: auth
     
     - parameter specID: (path) ID of the spec. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWithRequestBuilder(specID specID: String) -> RequestBuilder<Void> {
        var path = "/specs/{specID}"
        path = path.stringByReplacingOccurrencesOfString("{specID}", withString: "\(specID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter specID: (path) ID of the spec. 
     - parameter optionID: (path) ID of the option. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOption(specID specID: String, optionID: String, completion: ((error: ErrorType?) -> Void)) {
        deleteOptionWithRequestBuilder(specID: specID, optionID: optionID).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /specs/{specID}/options/{optionID}
     - OAuth:
       - type: oauth2
       - name: auth
     
     - parameter specID: (path) ID of the spec. 
     - parameter optionID: (path) ID of the option. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteOptionWithRequestBuilder(specID specID: String, optionID: String) -> RequestBuilder<Void> {
        var path = "/specs/{specID}/options/{optionID}"
        path = path.stringByReplacingOccurrencesOfString("{specID}", withString: "\(specID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{optionID}", withString: "\(optionID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter specID: (path) ID of the spec. 
     - parameter productID: (path) ID of the product. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteProductAssignment(specID specID: String, productID: String, completion: ((error: ErrorType?) -> Void)) {
        deleteProductAssignmentWithRequestBuilder(specID: specID, productID: productID).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /specs/{specID}/productassignments/{productID}
     - OAuth:
       - type: oauth2
       - name: auth
     
     - parameter specID: (path) ID of the spec. 
     - parameter productID: (path) ID of the product. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteProductAssignmentWithRequestBuilder(specID specID: String, productID: String) -> RequestBuilder<Void> {
        var path = "/specs/{specID}/productassignments/{productID}"
        path = path.stringByReplacingOccurrencesOfString("{specID}", withString: "\(specID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{productID}", withString: "\(productID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter specID: (path) ID of the spec. 
     - parameter optionID: (path) ID of the option. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOption(specID specID: String, optionID: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        getOptionWithRequestBuilder(specID: specID, optionID: optionID).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /specs/{specID}/options/{optionID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter specID: (path) ID of the spec. 
     - parameter optionID: (path) ID of the option. 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func getOptionWithRequestBuilder(specID specID: String, optionID: String) -> RequestBuilder<AnyObject> {
        var path = "/specs/{specID}/options/{optionID}"
        path = path.stringByReplacingOccurrencesOfString("{specID}", withString: "\(specID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{optionID}", withString: "\(optionID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func list(search search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        listWithRequestBuilder(search: search, searchOn: searchOn, sortBy: sortBy, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /specs
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func listWithRequestBuilder(search search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil) -> RequestBuilder<AnyObject> {
        let path = "/specs"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "searchOn": searchOn,
            "sortBy": sortBy,
            "page": page?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter specID: (path) ID of the spec. 
     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listOptions(specID specID: String, search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        listOptionsWithRequestBuilder(specID: specID, search: search, searchOn: searchOn, sortBy: sortBy, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /specs/{specID}/options
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter specID: (path) ID of the spec. 
     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func listOptionsWithRequestBuilder(specID specID: String, search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil) -> RequestBuilder<AnyObject> {
        var path = "/specs/{specID}/options"
        path = path.stringByReplacingOccurrencesOfString("{specID}", withString: "\(specID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "searchOn": searchOn,
            "sortBy": sortBy,
            "page": page?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter specID: (query) ID of the spec. (optional)
     - parameter productID: (query) ID of the product. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listProductAssignments(specID specID: String? = nil, productID: String? = nil, page: Int32? = nil, pageSize: Int32? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        listProductAssignmentsWithRequestBuilder(specID: specID, productID: productID, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /specs/productassignments
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter specID: (query) ID of the spec. (optional)
     - parameter productID: (query) ID of the product. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func listProductAssignmentsWithRequestBuilder(specID specID: String? = nil, productID: String? = nil, page: Int32? = nil, pageSize: Int32? = nil) -> RequestBuilder<AnyObject> {
        let path = "/specs/productassignments"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "specID": specID,
            "productID": productID,
            "page": page?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter specID: (path) ID of the spec. 
     - parameter spec: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patch(specID specID: String, spec: Spec, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        patchWithRequestBuilder(specID: specID, spec: spec).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PATCH /specs/{specID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter specID: (path) ID of the spec. 
     - parameter spec: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func patchWithRequestBuilder(specID specID: String, spec: Spec) -> RequestBuilder<AnyObject> {
        var path = "/specs/{specID}"
        path = path.stringByReplacingOccurrencesOfString("{specID}", withString: "\(specID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = spec.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter specID: (path) ID of the spec. 
     - parameter optionID: (path) ID of the option. 
     - parameter option: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchOption(specID specID: String, optionID: String, option: SpecOption, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        patchOptionWithRequestBuilder(specID: specID, optionID: optionID, option: option).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PATCH /specs/{specID}/options/{optionID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter specID: (path) ID of the spec. 
     - parameter optionID: (path) ID of the option. 
     - parameter option: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func patchOptionWithRequestBuilder(specID specID: String, optionID: String, option: SpecOption) -> RequestBuilder<AnyObject> {
        var path = "/specs/{specID}/options/{optionID}"
        path = path.stringByReplacingOccurrencesOfString("{specID}", withString: "\(specID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{optionID}", withString: "\(optionID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = option.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter productAssignment: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func saveProductAssignment(productAssignment productAssignment: SpecProductAssignment, completion: ((error: ErrorType?) -> Void)) {
        saveProductAssignmentWithRequestBuilder(productAssignment: productAssignment).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /specs/productassignments
     - OAuth:
       - type: oauth2
       - name: auth
     
     - parameter productAssignment: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func saveProductAssignmentWithRequestBuilder(productAssignment productAssignment: SpecProductAssignment) -> RequestBuilder<Void> {
        let path = "/specs/productassignments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = productAssignment.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter specID: (path) ID of the spec. 
     - parameter spec: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func update(specID specID: String, spec: Spec, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        updateWithRequestBuilder(specID: specID, spec: spec).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /specs/{specID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter specID: (path) ID of the spec. 
     - parameter spec: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func updateWithRequestBuilder(specID specID: String, spec: Spec) -> RequestBuilder<AnyObject> {
        var path = "/specs/{specID}"
        path = path.stringByReplacingOccurrencesOfString("{specID}", withString: "\(specID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = spec.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter specID: (path) ID of the spec. 
     - parameter optionID: (path) ID of the option. 
     - parameter option: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateOption(specID specID: String, optionID: String, option: SpecOption, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        updateOptionWithRequestBuilder(specID: specID, optionID: optionID, option: option).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /specs/{specID}/options/{optionID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter specID: (path) ID of the spec. 
     - parameter optionID: (path) ID of the option. 
     - parameter option: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func updateOptionWithRequestBuilder(specID specID: String, optionID: String, option: SpecOption) -> RequestBuilder<AnyObject> {
        var path = "/specs/{specID}/options/{optionID}"
        path = path.stringByReplacingOccurrencesOfString("{specID}", withString: "\(specID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{optionID}", withString: "\(optionID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = option.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
