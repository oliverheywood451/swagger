//
// PaymentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class PaymentAPI: APIBase {
    /**

     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func callGet(buyerID buyerID: String, orderID: String, paymentID: String, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        callGetWithRequestBuilder(buyerID: buyerID, orderID: orderID, paymentID: paymentID).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /buyers/{buyerID}/orders/{orderID}/payments/{paymentID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 

     - returns: RequestBuilder<AnyObject> 
     */
    public class func callGetWithRequestBuilder(buyerID buyerID: String, orderID: String, paymentID: String) -> RequestBuilder<AnyObject> {
        var path = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}"
        path = path.stringByReplacingOccurrencesOfString("{buyerID}", withString: "\(buyerID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderID}", withString: "\(orderID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{paymentID}", withString: "\(paymentID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter payment: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func create(buyerID buyerID: String, orderID: String, payment: Payment, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        createWithRequestBuilder(buyerID: buyerID, orderID: orderID, payment: payment).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /buyers/{buyerID}/orders/{orderID}/payments
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter payment: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func createWithRequestBuilder(buyerID buyerID: String, orderID: String, payment: Payment) -> RequestBuilder<AnyObject> {
        var path = "/buyers/{buyerID}/orders/{orderID}/payments"
        path = path.stringByReplacingOccurrencesOfString("{buyerID}", withString: "\(buyerID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderID}", withString: "\(orderID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = payment.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter transaction: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createTransaction(buyerID buyerID: String, orderID: String, paymentID: String, transaction: PaymentTransaction, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        createTransactionWithRequestBuilder(buyerID: buyerID, orderID: orderID, paymentID: paymentID, transaction: transaction).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter transaction: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func createTransactionWithRequestBuilder(buyerID buyerID: String, orderID: String, paymentID: String, transaction: PaymentTransaction) -> RequestBuilder<AnyObject> {
        var path = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions"
        path = path.stringByReplacingOccurrencesOfString("{buyerID}", withString: "\(buyerID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderID}", withString: "\(orderID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{paymentID}", withString: "\(paymentID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = transaction.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func delete(buyerID buyerID: String, orderID: String, paymentID: String, completion: ((error: ErrorType?) -> Void)) {
        deleteWithRequestBuilder(buyerID: buyerID, orderID: orderID, paymentID: paymentID).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /buyers/{buyerID}/orders/{orderID}/payments/{paymentID}
     - OAuth:
       - type: oauth2
       - name: auth
     
     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWithRequestBuilder(buyerID buyerID: String, orderID: String, paymentID: String) -> RequestBuilder<Void> {
        var path = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}"
        path = path.stringByReplacingOccurrencesOfString("{buyerID}", withString: "\(buyerID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderID}", withString: "\(orderID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{paymentID}", withString: "\(paymentID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter transactionID: (path) ID of the transaction. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteTransaction(buyerID buyerID: String, orderID: String, paymentID: String, transactionID: String, completion: ((error: ErrorType?) -> Void)) {
        deleteTransactionWithRequestBuilder(buyerID: buyerID, orderID: orderID, paymentID: paymentID, transactionID: transactionID).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}
     - OAuth:
       - type: oauth2
       - name: auth
     
     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter transactionID: (path) ID of the transaction. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteTransactionWithRequestBuilder(buyerID buyerID: String, orderID: String, paymentID: String, transactionID: String) -> RequestBuilder<Void> {
        var path = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}"
        path = path.stringByReplacingOccurrencesOfString("{buyerID}", withString: "\(buyerID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderID}", withString: "\(orderID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{paymentID}", withString: "\(paymentID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{transactionID}", withString: "\(transactionID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func list(buyerID buyerID: String, orderID: String, search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        listWithRequestBuilder(buyerID: buyerID, orderID: orderID, search: search, searchOn: searchOn, sortBy: sortBy, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /buyers/{buyerID}/orders/{orderID}/payments
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter search: (query) Word or phrase to search for. (optional)
     - parameter searchOn: (query) Comma-delimited list of fields to search on. (optional)
     - parameter sortBy: (query) Comma-delimited list of fields to sort by. (optional)
     - parameter page: (query) Page of results to return. Default: 1 (optional)
     - parameter pageSize: (query) Number of results to return per page. Default: 20, max: 100. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func listWithRequestBuilder(buyerID buyerID: String, orderID: String, search: String? = nil, searchOn: String? = nil, sortBy: String? = nil, page: Int32? = nil, pageSize: Int32? = nil) -> RequestBuilder<AnyObject> {
        var path = "/buyers/{buyerID}/orders/{orderID}/payments"
        path = path.stringByReplacingOccurrencesOfString("{buyerID}", withString: "\(buyerID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderID}", withString: "\(orderID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "searchOn": searchOn,
            "sortBy": sortBy,
            "page": page?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter partialPayment: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patch(buyerID buyerID: String, orderID: String, paymentID: String, partialPayment: Payment, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        patchWithRequestBuilder(buyerID: buyerID, orderID: orderID, paymentID: paymentID, partialPayment: partialPayment).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PATCH /buyers/{buyerID}/orders/{orderID}/payments/{paymentID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter partialPayment: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func patchWithRequestBuilder(buyerID buyerID: String, orderID: String, paymentID: String, partialPayment: Payment) -> RequestBuilder<AnyObject> {
        var path = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}"
        path = path.stringByReplacingOccurrencesOfString("{buyerID}", withString: "\(buyerID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderID}", withString: "\(orderID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{paymentID}", withString: "\(paymentID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = partialPayment.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter transactionID: (path) ID of the transaction. 
     - parameter partialTransaction: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchTransaction(buyerID buyerID: String, orderID: String, paymentID: String, transactionID: String, partialTransaction: PaymentTransaction, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        patchTransactionWithRequestBuilder(buyerID: buyerID, orderID: orderID, paymentID: paymentID, transactionID: transactionID, partialTransaction: partialTransaction).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PATCH /buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter transactionID: (path) ID of the transaction. 
     - parameter partialTransaction: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func patchTransactionWithRequestBuilder(buyerID buyerID: String, orderID: String, paymentID: String, transactionID: String, partialTransaction: PaymentTransaction) -> RequestBuilder<AnyObject> {
        var path = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}"
        path = path.stringByReplacingOccurrencesOfString("{buyerID}", withString: "\(buyerID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderID}", withString: "\(orderID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{paymentID}", withString: "\(paymentID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{transactionID}", withString: "\(transactionID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = partialTransaction.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter payment: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func update(buyerID buyerID: String, orderID: String, paymentID: String, payment: Payment, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        updateWithRequestBuilder(buyerID: buyerID, orderID: orderID, paymentID: paymentID, payment: payment).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /buyers/{buyerID}/orders/{orderID}/payments/{paymentID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter payment: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func updateWithRequestBuilder(buyerID buyerID: String, orderID: String, paymentID: String, payment: Payment) -> RequestBuilder<AnyObject> {
        var path = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}"
        path = path.stringByReplacingOccurrencesOfString("{buyerID}", withString: "\(buyerID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderID}", withString: "\(orderID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{paymentID}", withString: "\(paymentID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = payment.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter transactionID: (path) ID of the transaction. 
     - parameter transaction: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateTransaction(buyerID buyerID: String, orderID: String, paymentID: String, transactionID: String, transaction: PaymentTransaction, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        updateTransactionWithRequestBuilder(buyerID: buyerID, orderID: orderID, paymentID: paymentID, transactionID: transactionID, transaction: transaction).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}
     - OAuth:
       - type: oauth2
       - name: auth
     - examples: [{example="{}", contentType=application/json}]
     
     - parameter buyerID: (path) ID of the buyer. 
     - parameter orderID: (path) ID of the order. 
     - parameter paymentID: (path) ID of the payment. 
     - parameter transactionID: (path) ID of the transaction. 
     - parameter transaction: (body)  

     - returns: RequestBuilder<AnyObject> 
     */
    public class func updateTransactionWithRequestBuilder(buyerID buyerID: String, orderID: String, paymentID: String, transactionID: String, transaction: PaymentTransaction) -> RequestBuilder<AnyObject> {
        var path = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}"
        path = path.stringByReplacingOccurrencesOfString("{buyerID}", withString: "\(buyerID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderID}", withString: "\(orderID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{paymentID}", withString: "\(paymentID)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{transactionID}", withString: "\(transactionID)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = transaction.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
