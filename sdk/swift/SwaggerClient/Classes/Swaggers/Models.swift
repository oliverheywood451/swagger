// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [Address]
            Decoders.addDecoder(clazz: [Address].self) { (source: AnyObject) -> [Address] in
                return Decoders.decode(clazz: [Address].self, source: source)
            }
            // Decoder for Address
            Decoders.addDecoder(clazz: Address.self) { (source: AnyObject) -> Address in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Address()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.companyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CompanyName"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FirstName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LastName"])
                instance.street1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Street1"])
                instance.street2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Street2"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["City"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["State"])
                instance.zip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Zip"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Country"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Phone"])
                instance.addressName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["AddressName"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [AddressAssignment]
            Decoders.addDecoder(clazz: [AddressAssignment].self) { (source: AnyObject) -> [AddressAssignment] in
                return Decoders.decode(clazz: [AddressAssignment].self, source: source)
            }
            // Decoder for AddressAssignment
            Decoders.addDecoder(clazz: AddressAssignment.self) { (source: AnyObject) -> AddressAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AddressAssignment()
                instance.addressID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["AddressID"])
                instance.userID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserID"])
                instance.userGroupID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserGroupID"])
                instance.isShipping = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IsShipping"])
                instance.isBilling = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IsBilling"])
                return instance
            }


            // Decoder for [ApprovalRule]
            Decoders.addDecoder(clazz: [ApprovalRule].self) { (source: AnyObject) -> [ApprovalRule] in
                return Decoders.decode(clazz: [ApprovalRule].self, source: source)
            }
            // Decoder for ApprovalRule
            Decoders.addDecoder(clazz: ApprovalRule.self) { (source: AnyObject) -> ApprovalRule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ApprovalRule()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.approvingGroupID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ApprovingGroupID"])
                instance.ruleExpression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["RuleExpression"])
                instance.scope = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Scope"])
                instance.scopeTimeUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ScopeTimeUnit"])
                instance.scopeTimeNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ScopeTimeNumber"])
                instance.scopeStartDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["ScopeStartDate"])
                instance.expireAfterTimeUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ExpireAfterTimeUnit"])
                instance.expireAfterNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ExpireAfterNumber"])
                instance.approveOnExpire = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ApproveOnExpire"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [Buyer]
            Decoders.addDecoder(clazz: [Buyer].self) { (source: AnyObject) -> [Buyer] in
                return Decoders.decode(clazz: [Buyer].self, source: source)
            }
            // Decoder for Buyer
            Decoders.addDecoder(clazz: Buyer.self) { (source: AnyObject) -> Buyer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Buyer()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Active"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [BuyerAddress]
            Decoders.addDecoder(clazz: [BuyerAddress].self) { (source: AnyObject) -> [BuyerAddress] in
                return Decoders.decode(clazz: [BuyerAddress].self, source: source)
            }
            // Decoder for BuyerAddress
            Decoders.addDecoder(clazz: BuyerAddress.self) { (source: AnyObject) -> BuyerAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BuyerAddress()
                instance.shipping = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Shipping"])
                instance.billing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Billing"])
                instance.companyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CompanyName"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FirstName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LastName"])
                instance.street1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Street1"])
                instance.street2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Street2"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["City"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["State"])
                instance.zip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Zip"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Country"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Phone"])
                instance.addressName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["AddressName"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [BuyerCreditCard]
            Decoders.addDecoder(clazz: [BuyerCreditCard].self) { (source: AnyObject) -> [BuyerCreditCard] in
                return Decoders.decode(clazz: [BuyerCreditCard].self, source: source)
            }
            // Decoder for BuyerCreditCard
            Decoders.addDecoder(clazz: BuyerCreditCard.self) { (source: AnyObject) -> BuyerCreditCard in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BuyerCreditCard()
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Token"])
                instance.cardType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CardType"])
                instance.partialAccountNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PartialAccountNumber"])
                instance.cardholderName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CardholderName"])
                instance.expirationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["ExpirationDate"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [Category]
            Decoders.addDecoder(clazz: [Category].self) { (source: AnyObject) -> [Category] in
                return Decoders.decode(clazz: [Category].self, source: source)
            }
            // Decoder for Category
            Decoders.addDecoder(clazz: Category.self) { (source: AnyObject) -> Category in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Category()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                instance.listOrder = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ListOrder"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Active"])
                instance.parentID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ParentID"])
                return instance
            }


            // Decoder for [CategoryAssignment]
            Decoders.addDecoder(clazz: [CategoryAssignment].self) { (source: AnyObject) -> [CategoryAssignment] in
                return Decoders.decode(clazz: [CategoryAssignment].self, source: source)
            }
            // Decoder for CategoryAssignment
            Decoders.addDecoder(clazz: CategoryAssignment.self) { (source: AnyObject) -> CategoryAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CategoryAssignment()
                instance.categoryID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CategoryID"])
                instance.userID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserID"])
                instance.userGroupID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserGroupID"])
                return instance
            }


            // Decoder for [CategoryProductAssignment]
            Decoders.addDecoder(clazz: [CategoryProductAssignment].self) { (source: AnyObject) -> [CategoryProductAssignment] in
                return Decoders.decode(clazz: [CategoryProductAssignment].self, source: source)
            }
            // Decoder for CategoryProductAssignment
            Decoders.addDecoder(clazz: CategoryProductAssignment.self) { (source: AnyObject) -> CategoryProductAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CategoryProductAssignment()
                instance.categoryID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CategoryID"])
                instance.productID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ProductID"])
                instance.listOrder = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ListOrder"])
                return instance
            }


            // Decoder for [CostCenter]
            Decoders.addDecoder(clazz: [CostCenter].self) { (source: AnyObject) -> [CostCenter] in
                return Decoders.decode(clazz: [CostCenter].self, source: source)
            }
            // Decoder for CostCenter
            Decoders.addDecoder(clazz: CostCenter.self) { (source: AnyObject) -> CostCenter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CostCenter()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [CostCenterAssignment]
            Decoders.addDecoder(clazz: [CostCenterAssignment].self) { (source: AnyObject) -> [CostCenterAssignment] in
                return Decoders.decode(clazz: [CostCenterAssignment].self, source: source)
            }
            // Decoder for CostCenterAssignment
            Decoders.addDecoder(clazz: CostCenterAssignment.self) { (source: AnyObject) -> CostCenterAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CostCenterAssignment()
                instance.costCenterID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CostCenterID"])
                instance.userID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserID"])
                instance.userGroupID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserGroupID"])
                return instance
            }


            // Decoder for [CreditCard]
            Decoders.addDecoder(clazz: [CreditCard].self) { (source: AnyObject) -> [CreditCard] in
                return Decoders.decode(clazz: [CreditCard].self, source: source)
            }
            // Decoder for CreditCard
            Decoders.addDecoder(clazz: CreditCard.self) { (source: AnyObject) -> CreditCard in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreditCard()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Token"])
                instance.cardType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CardType"])
                instance.partialAccountNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PartialAccountNumber"])
                instance.cardholderName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CardholderName"])
                instance.expirationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["ExpirationDate"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [CreditCardAssignment]
            Decoders.addDecoder(clazz: [CreditCardAssignment].self) { (source: AnyObject) -> [CreditCardAssignment] in
                return Decoders.decode(clazz: [CreditCardAssignment].self, source: source)
            }
            // Decoder for CreditCardAssignment
            Decoders.addDecoder(clazz: CreditCardAssignment.self) { (source: AnyObject) -> CreditCardAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreditCardAssignment()
                instance.creditCardID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CreditCardID"])
                instance.userID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserID"])
                instance.userGroupID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserGroupID"])
                return instance
            }


            // Decoder for [EmailTemplate]
            Decoders.addDecoder(clazz: [EmailTemplate].self) { (source: AnyObject) -> [EmailTemplate] in
                return Decoders.decode(clazz: [EmailTemplate].self, source: source)
            }
            // Decoder for EmailTemplate
            Decoders.addDecoder(clazz: EmailTemplate.self) { (source: AnyObject) -> EmailTemplate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EmailTemplate()
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Subject"])
                instance.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Body"])
                instance.replyEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ReplyEmail"])
                instance.sendMessageType = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["SendMessageType"])
                instance.emailFormatType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["EmailFormatType"])
                return instance
            }


            // Decoder for [ImpersonateTokenRequest]
            Decoders.addDecoder(clazz: [ImpersonateTokenRequest].self) { (source: AnyObject) -> [ImpersonateTokenRequest] in
                return Decoders.decode(clazz: [ImpersonateTokenRequest].self, source: source)
            }
            // Decoder for ImpersonateTokenRequest
            Decoders.addDecoder(clazz: ImpersonateTokenRequest.self) { (source: AnyObject) -> ImpersonateTokenRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ImpersonateTokenRequest()
                instance.clientID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ClientID"])
                instance.claims = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Claims"])
                return instance
            }


            // Decoder for [LineItem]
            Decoders.addDecoder(clazz: [LineItem].self) { (source: AnyObject) -> [LineItem] in
                return Decoders.decode(clazz: [LineItem].self, source: source)
            }
            // Decoder for LineItem
            Decoders.addDecoder(clazz: LineItem.self) { (source: AnyObject) -> LineItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LineItem()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.productID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ProductID"])
                instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Quantity"])
                instance.unitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["UnitPrice"])
                instance.costCenter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CostCenter"])
                instance.dateNeeded = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["DateNeeded"])
                instance.shippingAccount = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ShippingAccount"])
                instance.shippingAddressID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ShippingAddressID"])
                instance.shipfromAddressID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ShipfromAddressID"])
                instance.shipperID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ShipperID"])
                instance.specs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Specs"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [Order]
            Decoders.addDecoder(clazz: [Order].self) { (source: AnyObject) -> [Order] in
                return Decoders.decode(clazz: [Order].self, source: source)
            }
            // Decoder for Order
            Decoders.addDecoder(clazz: Order.self) { (source: AnyObject) -> Order in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Order()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Type"])
                instance.fromUserID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FromUserID"])
                instance.billingAddressID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["BillingAddressID"])
                instance.shippingAddressID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ShippingAddressID"])
                instance.comments = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Comments"])
                instance.shippingCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["ShippingCost"])
                instance.taxCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["TaxCost"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [Partial1]
            Decoders.addDecoder(clazz: [Partial1].self) { (source: AnyObject) -> [Partial1] in
                return Decoders.decode(clazz: [Partial1].self, source: source)
            }
            // Decoder for Partial1
            Decoders.addDecoder(clazz: Partial1.self) { (source: AnyObject) -> Partial1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Partial1()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Username"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Password"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FirstName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LastName"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Email"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Phone"])
                instance.termsAccepted = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["TermsAccepted"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Active"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                instance.securityProfileID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SecurityProfileID"])
                return instance
            }


            // Decoder for [PasswordReset]
            Decoders.addDecoder(clazz: [PasswordReset].self) { (source: AnyObject) -> [PasswordReset] in
                return Decoders.decode(clazz: [PasswordReset].self, source: source)
            }
            // Decoder for PasswordReset
            Decoders.addDecoder(clazz: PasswordReset.self) { (source: AnyObject) -> PasswordReset in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PasswordReset()
                instance.clientID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ClientID"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Username"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Password"])
                return instance
            }


            // Decoder for [PasswordResetRequest]
            Decoders.addDecoder(clazz: [PasswordResetRequest].self) { (source: AnyObject) -> [PasswordResetRequest] in
                return Decoders.decode(clazz: [PasswordResetRequest].self, source: source)
            }
            // Decoder for PasswordResetRequest
            Decoders.addDecoder(clazz: PasswordResetRequest.self) { (source: AnyObject) -> PasswordResetRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PasswordResetRequest()
                instance.clientID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ClientID"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Email"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Username"])
                instance.URL = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["URL"])
                return instance
            }


            // Decoder for [Payment]
            Decoders.addDecoder(clazz: [Payment].self) { (source: AnyObject) -> [Payment] in
                return Decoders.decode(clazz: [Payment].self, source: source)
            }
            // Decoder for Payment
            Decoders.addDecoder(clazz: Payment.self) { (source: AnyObject) -> Payment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Payment()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Type"])
                instance.creditCardID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CreditCardID"])
                instance.spendingAccountID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SpendingAccountID"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["Amount"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [PaymentTransaction]
            Decoders.addDecoder(clazz: [PaymentTransaction].self) { (source: AnyObject) -> [PaymentTransaction] in
                return Decoders.decode(clazz: [PaymentTransaction].self, source: source)
            }
            // Decoder for PaymentTransaction
            Decoders.addDecoder(clazz: PaymentTransaction.self) { (source: AnyObject) -> PaymentTransaction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentTransaction()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Type"])
                instance.dateExecuted = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["DateExecuted"])
                instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["Amount"])
                instance.succeeded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Succeeded"])
                instance.resultCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ResultCode"])
                instance.resultMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ResultMessage"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [PriceBreak]
            Decoders.addDecoder(clazz: [PriceBreak].self) { (source: AnyObject) -> [PriceBreak] in
                return Decoders.decode(clazz: [PriceBreak].self, source: source)
            }
            // Decoder for PriceBreak
            Decoders.addDecoder(clazz: PriceBreak.self) { (source: AnyObject) -> PriceBreak in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PriceBreak()
                instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Quantity"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["Price"])
                return instance
            }


            // Decoder for [PriceSchedule]
            Decoders.addDecoder(clazz: [PriceSchedule].self) { (source: AnyObject) -> [PriceSchedule] in
                return Decoders.decode(clazz: [PriceSchedule].self, source: source)
            }
            // Decoder for PriceSchedule
            Decoders.addDecoder(clazz: PriceSchedule.self) { (source: AnyObject) -> PriceSchedule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PriceSchedule()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.applyTax = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ApplyTax"])
                instance.applyShipping = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ApplyShipping"])
                instance.maxQuantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["MaxQuantity"])
                instance.useCumulativeQuantity = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["UseCumulativeQuantity"])
                instance.restrictedQuantity = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["RestrictedQuantity"])
                instance.orderType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["OrderType"])
                instance.priceBreaks = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["PriceBreaks"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [Product]
            Decoders.addDecoder(clazz: [Product].self) { (source: AnyObject) -> [Product] in
                return Decoders.decode(clazz: [Product].self, source: source)
            }
            // Decoder for Product
            Decoders.addDecoder(clazz: Product.self) { (source: AnyObject) -> Product in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Product()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.quantityMultiplier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["QuantityMultiplier"])
                instance.shipWeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["ShipWeight"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Active"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Type"])
                instance.inventoryEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["InventoryEnabled"])
                instance.inventoryNotificationPoint = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["InventoryNotificationPoint"])
                instance.variantLevelInventory = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["VariantLevelInventory"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                instance.allowOrderExceedInventory = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AllowOrderExceedInventory"])
                instance.inventoryVisible = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["InventoryVisible"])
                return instance
            }


            // Decoder for [ProductAssignment]
            Decoders.addDecoder(clazz: [ProductAssignment].self) { (source: AnyObject) -> [ProductAssignment] in
                return Decoders.decode(clazz: [ProductAssignment].self, source: source)
            }
            // Decoder for ProductAssignment
            Decoders.addDecoder(clazz: ProductAssignment.self) { (source: AnyObject) -> ProductAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductAssignment()
                instance.productID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ProductID"])
                instance.standardPriceScheduleID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["StandardPriceScheduleID"])
                instance.replenishmentPriceScheduleID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ReplenishmentPriceScheduleID"])
                instance.userID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserID"])
                instance.userGroupID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserGroupID"])
                instance.buyerID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["BuyerID"])
                return instance
            }


            // Decoder for [Promotion]
            Decoders.addDecoder(clazz: [Promotion].self) { (source: AnyObject) -> [Promotion] in
                return Decoders.decode(clazz: [Promotion].self, source: source)
            }
            // Decoder for Promotion
            Decoders.addDecoder(clazz: Promotion.self) { (source: AnyObject) -> Promotion in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Promotion()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Code"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.usagesRemaining = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["UsagesRemaining"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.finePrint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FinePrint"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["StartDate"])
                instance.expirationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["ExpirationDate"])
                instance.eligibleExpression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["EligibleExpression"])
                instance.valueExpression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ValueExpression"])
                instance.canCombine = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["CanCombine"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [PromotionAssignment]
            Decoders.addDecoder(clazz: [PromotionAssignment].self) { (source: AnyObject) -> [PromotionAssignment] in
                return Decoders.decode(clazz: [PromotionAssignment].self, source: source)
            }
            // Decoder for PromotionAssignment
            Decoders.addDecoder(clazz: PromotionAssignment.self) { (source: AnyObject) -> PromotionAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PromotionAssignment()
                instance.promotionID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PromotionID"])
                instance.buyerID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["BuyerID"])
                instance.userID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserID"])
                instance.userGroupID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserGroupID"])
                return instance
            }


            // Decoder for [Shipment]
            Decoders.addDecoder(clazz: [Shipment].self) { (source: AnyObject) -> [Shipment] in
                return Decoders.decode(clazz: [Shipment].self, source: source)
            }
            // Decoder for Shipment
            Decoders.addDecoder(clazz: Shipment.self) { (source: AnyObject) -> Shipment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Shipment()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.shipper = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Shipper"])
                instance.dateShipped = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["DateShipped"])
                instance.trackingNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["TrackingNumber"])
                instance.cost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["Cost"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Items"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [ShipmentItem]
            Decoders.addDecoder(clazz: [ShipmentItem].self) { (source: AnyObject) -> [ShipmentItem] in
                return Decoders.decode(clazz: [ShipmentItem].self, source: source)
            }
            // Decoder for ShipmentItem
            Decoders.addDecoder(clazz: ShipmentItem.self) { (source: AnyObject) -> ShipmentItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ShipmentItem()
                instance.orderID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["OrderID"])
                instance.lineItemID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LineItemID"])
                instance.quantityShipped = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["QuantityShipped"])
                return instance
            }


            // Decoder for [Spec]
            Decoders.addDecoder(clazz: [Spec].self) { (source: AnyObject) -> [Spec] in
                return Decoders.decode(clazz: [Spec].self, source: source)
            }
            // Decoder for Spec
            Decoders.addDecoder(clazz: Spec.self) { (source: AnyObject) -> Spec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Spec()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.listOrder = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ListOrder"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.defaultValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DefaultValue"])
                instance._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Required"])
                instance.allowOpenText = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AllowOpenText"])
                instance.defaultOptionID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DefaultOptionID"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [SpecOption]
            Decoders.addDecoder(clazz: [SpecOption].self) { (source: AnyObject) -> [SpecOption] in
                return Decoders.decode(clazz: [SpecOption].self, source: source)
            }
            // Decoder for SpecOption
            Decoders.addDecoder(clazz: SpecOption.self) { (source: AnyObject) -> SpecOption in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SpecOption()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Value"])
                instance.listOrder = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ListOrder"])
                instance.isOpenText = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IsOpenText"])
                instance.priceMarkupType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PriceMarkupType"])
                instance.priceMarkup = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["PriceMarkup"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [SpecProductAssignment]
            Decoders.addDecoder(clazz: [SpecProductAssignment].self) { (source: AnyObject) -> [SpecProductAssignment] in
                return Decoders.decode(clazz: [SpecProductAssignment].self, source: source)
            }
            // Decoder for SpecProductAssignment
            Decoders.addDecoder(clazz: SpecProductAssignment.self) { (source: AnyObject) -> SpecProductAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SpecProductAssignment()
                instance.specID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SpecID"])
                instance.productID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ProductID"])
                instance.definesVariant = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["DefinesVariant"])
                return instance
            }


            // Decoder for [SpendingAccount]
            Decoders.addDecoder(clazz: [SpendingAccount].self) { (source: AnyObject) -> [SpendingAccount] in
                return Decoders.decode(clazz: [SpendingAccount].self, source: source)
            }
            // Decoder for SpendingAccount
            Decoders.addDecoder(clazz: SpendingAccount.self) { (source: AnyObject) -> SpendingAccount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SpendingAccount()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.balance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["Balance"])
                instance.allowAsPaymentMethod = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AllowAsPaymentMethod"])
                instance.redemptionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["RedemptionCode"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["StartDate"])
                instance.endDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["EndDate"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [SpendingAccountAssignment]
            Decoders.addDecoder(clazz: [SpendingAccountAssignment].self) { (source: AnyObject) -> [SpendingAccountAssignment] in
                return Decoders.decode(clazz: [SpendingAccountAssignment].self, source: source)
            }
            // Decoder for SpendingAccountAssignment
            Decoders.addDecoder(clazz: SpendingAccountAssignment.self) { (source: AnyObject) -> SpendingAccountAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SpendingAccountAssignment()
                instance.spendingAccountID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SpendingAccountID"])
                instance.userID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserID"])
                instance.userGroupID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserGroupID"])
                instance.allowExceed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["AllowExceed"])
                return instance
            }


            // Decoder for [User]
            Decoders.addDecoder(clazz: [User].self) { (source: AnyObject) -> [User] in
                return Decoders.decode(clazz: [User].self, source: source)
            }
            // Decoder for User
            Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = User()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Username"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Password"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FirstName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LastName"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Email"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Phone"])
                instance.termsAccepted = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["TermsAccepted"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Active"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                instance.securityProfileID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SecurityProfileID"])
                return instance
            }


            // Decoder for [UserGroup]
            Decoders.addDecoder(clazz: [UserGroup].self) { (source: AnyObject) -> [UserGroup] in
                return Decoders.decode(clazz: [UserGroup].self, source: source)
            }
            // Decoder for UserGroup
            Decoders.addDecoder(clazz: UserGroup.self) { (source: AnyObject) -> UserGroup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserGroup()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }


            // Decoder for [UserGroupAssignment]
            Decoders.addDecoder(clazz: [UserGroupAssignment].self) { (source: AnyObject) -> [UserGroupAssignment] in
                return Decoders.decode(clazz: [UserGroupAssignment].self, source: source)
            }
            // Decoder for UserGroupAssignment
            Decoders.addDecoder(clazz: UserGroupAssignment.self) { (source: AnyObject) -> UserGroupAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserGroupAssignment()
                instance.userGroupID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserGroupID"])
                instance.userID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["UserID"])
                return instance
            }


            // Decoder for [Variant]
            Decoders.addDecoder(clazz: [Variant].self) { (source: AnyObject) -> [Variant] in
                return Decoders.decode(clazz: [Variant].self, source: source)
            }
            // Decoder for Variant
            Decoders.addDecoder(clazz: Variant.self) { (source: AnyObject) -> Variant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Variant()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Description"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Active"])
                instance.xp = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["xp"])
                return instance
            }
        }
    }
}
