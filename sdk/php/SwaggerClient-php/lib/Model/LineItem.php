<?php
/**
 * LineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LineItem Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LineItem implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'string',
        'product_id' => 'string',
        'quantity' => 'int',
        'unit_price' => 'float',
        'cost_center' => 'string',
        'date_needed' => '\DateTime',
        'shipping_account' => 'string',
        'shipping_address_id' => 'string',
        'shipfrom_address_id' => 'string',
        'shipper_id' => 'string',
        'specs' => '\Swagger\Client\Model\ShipmentItem[]',
        'xp' => 'object'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'ID',
        'product_id' => 'ProductID',
        'quantity' => 'Quantity',
        'unit_price' => 'UnitPrice',
        'cost_center' => 'CostCenter',
        'date_needed' => 'DateNeeded',
        'shipping_account' => 'ShippingAccount',
        'shipping_address_id' => 'ShippingAddressID',
        'shipfrom_address_id' => 'ShipfromAddressID',
        'shipper_id' => 'ShipperID',
        'specs' => 'Specs',
        'xp' => 'xp'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'product_id' => 'setProductId',
        'quantity' => 'setQuantity',
        'unit_price' => 'setUnitPrice',
        'cost_center' => 'setCostCenter',
        'date_needed' => 'setDateNeeded',
        'shipping_account' => 'setShippingAccount',
        'shipping_address_id' => 'setShippingAddressId',
        'shipfrom_address_id' => 'setShipfromAddressId',
        'shipper_id' => 'setShipperId',
        'specs' => 'setSpecs',
        'xp' => 'setXp'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'product_id' => 'getProductId',
        'quantity' => 'getQuantity',
        'unit_price' => 'getUnitPrice',
        'cost_center' => 'getCostCenter',
        'date_needed' => 'getDateNeeded',
        'shipping_account' => 'getShippingAccount',
        'shipping_address_id' => 'getShippingAddressId',
        'shipfrom_address_id' => 'getShipfromAddressId',
        'shipper_id' => 'getShipperId',
        'specs' => 'getSpecs',
        'xp' => 'getXp'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['cost_center'] = isset($data['cost_center']) ? $data['cost_center'] : null;
        $this->container['date_needed'] = isset($data['date_needed']) ? $data['date_needed'] : null;
        $this->container['shipping_account'] = isset($data['shipping_account']) ? $data['shipping_account'] : null;
        $this->container['shipping_address_id'] = isset($data['shipping_address_id']) ? $data['shipping_address_id'] : null;
        $this->container['shipfrom_address_id'] = isset($data['shipfrom_address_id']) ? $data['shipfrom_address_id'] : null;
        $this->container['shipper_id'] = isset($data['shipper_id']) ? $data['shipper_id'] : null;
        $this->container['specs'] = isset($data['specs']) ? $data['specs'] : null;
        $this->container['xp'] = isset($data['xp']) ? $data['xp'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product_id
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     * @param string $product_id
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_price
     * @return float
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     * @param float $unit_price
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets cost_center
     * @return string
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     * @param string $cost_center
     * @return $this
     */
    public function setCostCenter($cost_center)
    {
        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets date_needed
     * @return \DateTime
     */
    public function getDateNeeded()
    {
        return $this->container['date_needed'];
    }

    /**
     * Sets date_needed
     * @param \DateTime $date_needed
     * @return $this
     */
    public function setDateNeeded($date_needed)
    {
        $this->container['date_needed'] = $date_needed;

        return $this;
    }

    /**
     * Gets shipping_account
     * @return string
     */
    public function getShippingAccount()
    {
        return $this->container['shipping_account'];
    }

    /**
     * Sets shipping_account
     * @param string $shipping_account
     * @return $this
     */
    public function setShippingAccount($shipping_account)
    {
        $this->container['shipping_account'] = $shipping_account;

        return $this;
    }

    /**
     * Gets shipping_address_id
     * @return string
     */
    public function getShippingAddressId()
    {
        return $this->container['shipping_address_id'];
    }

    /**
     * Sets shipping_address_id
     * @param string $shipping_address_id
     * @return $this
     */
    public function setShippingAddressId($shipping_address_id)
    {
        $this->container['shipping_address_id'] = $shipping_address_id;

        return $this;
    }

    /**
     * Gets shipfrom_address_id
     * @return string
     */
    public function getShipfromAddressId()
    {
        return $this->container['shipfrom_address_id'];
    }

    /**
     * Sets shipfrom_address_id
     * @param string $shipfrom_address_id
     * @return $this
     */
    public function setShipfromAddressId($shipfrom_address_id)
    {
        $this->container['shipfrom_address_id'] = $shipfrom_address_id;

        return $this;
    }

    /**
     * Gets shipper_id
     * @return string
     */
    public function getShipperId()
    {
        return $this->container['shipper_id'];
    }

    /**
     * Sets shipper_id
     * @param string $shipper_id
     * @return $this
     */
    public function setShipperId($shipper_id)
    {
        $this->container['shipper_id'] = $shipper_id;

        return $this;
    }

    /**
     * Gets specs
     * @return \Swagger\Client\Model\ShipmentItem[]
     */
    public function getSpecs()
    {
        return $this->container['specs'];
    }

    /**
     * Sets specs
     * @param \Swagger\Client\Model\ShipmentItem[] $specs
     * @return $this
     */
    public function setSpecs($specs)
    {
        $this->container['specs'] = $specs;

        return $this;
    }

    /**
     * Gets xp
     * @return object
     */
    public function getXp()
    {
        return $this->container['xp'];
    }

    /**
     * Sets xp
     * @param object $xp
     * @return $this
     */
    public function setXp($xp)
    {
        $this->container['xp'] = $xp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


