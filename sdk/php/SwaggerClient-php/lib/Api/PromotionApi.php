<?php
/**
 * PromotionApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * PromotionApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.ordercloud.io/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return PromotionApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation callList
     *
     * 
     *
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function callList($search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        list($response) = $this->callListWithHttpInfo($search, $search_on, $sort_by, $page, $page_size);
        return $response;
    }

    /**
     * Operation callListWithHttpInfo
     *
     * 
     *
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function callListWithHttpInfo($search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        // parse inputs
        $resourcePath = "/promotions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($search_on !== null) {
            $queryParams['searchOn'] = $this->apiClient->getSerializer()->toQueryValue($search_on);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/promotions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation create
     *
     * 
     *
     * @param \Swagger\Client\Model\Promotion $promo  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function create($promo)
    {
        list($response) = $this->createWithHttpInfo($promo);
        return $response;
    }

    /**
     * Operation createWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\Promotion $promo  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createWithHttpInfo($promo)
    {
        // verify the required parameter 'promo' is set
        if ($promo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promo when calling create');
        }
        // parse inputs
        $resourcePath = "/promotions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($promo)) {
            $_tempBody = $promo;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/promotions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation delete
     *
     * 
     *
     * @param string $promotion_id ID of the promotion. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function delete($promotion_id)
    {
        list($response) = $this->deleteWithHttpInfo($promotion_id);
        return $response;
    }

    /**
     * Operation deleteWithHttpInfo
     *
     * 
     *
     * @param string $promotion_id ID of the promotion. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteWithHttpInfo($promotion_id)
    {
        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promotion_id when calling delete');
        }
        // parse inputs
        $resourcePath = "/promotions/{promotionID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                "{" . "promotionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($promotion_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/promotions/{promotionID}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAssignment
     *
     * 
     *
     * @param string $promotion_id ID of the promotion. (required)
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $user_id ID of the user. (optional)
     * @param string $user_group_id ID of the user group. (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAssignment($promotion_id, $buyer_id, $user_id = null, $user_group_id = null)
    {
        list($response) = $this->deleteAssignmentWithHttpInfo($promotion_id, $buyer_id, $user_id, $user_group_id);
        return $response;
    }

    /**
     * Operation deleteAssignmentWithHttpInfo
     *
     * 
     *
     * @param string $promotion_id ID of the promotion. (required)
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $user_id ID of the user. (optional)
     * @param string $user_group_id ID of the user group. (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAssignmentWithHttpInfo($promotion_id, $buyer_id, $user_id = null, $user_group_id = null)
    {
        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promotion_id when calling deleteAssignment');
        }
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling deleteAssignment');
        }
        // parse inputs
        $resourcePath = "/promotions/{promotionID}/assignments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($buyer_id !== null) {
            $queryParams['buyerID'] = $this->apiClient->getSerializer()->toQueryValue($buyer_id);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userID'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($user_group_id !== null) {
            $queryParams['userGroupID'] = $this->apiClient->getSerializer()->toQueryValue($user_group_id);
        }
        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                "{" . "promotionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($promotion_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/promotions/{promotionID}/assignments'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation get
     *
     * 
     *
     * @param string $promotion_id ID of the promotion. (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function get($promotion_id)
    {
        list($response) = $this->getWithHttpInfo($promotion_id);
        return $response;
    }

    /**
     * Operation getWithHttpInfo
     *
     * 
     *
     * @param string $promotion_id ID of the promotion. (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getWithHttpInfo($promotion_id)
    {
        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promotion_id when calling get');
        }
        // parse inputs
        $resourcePath = "/promotions/{promotionID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                "{" . "promotionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($promotion_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/promotions/{promotionID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listAssignments
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $promotion_id ID of the promotion. (optional)
     * @param string $user_id ID of the user. (optional)
     * @param string $user_group_id ID of the user group. (optional)
     * @param string $level Level of the promotion. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listAssignments($buyer_id, $promotion_id = null, $user_id = null, $user_group_id = null, $level = null, $page = null, $page_size = null)
    {
        list($response) = $this->listAssignmentsWithHttpInfo($buyer_id, $promotion_id, $user_id, $user_group_id, $level, $page, $page_size);
        return $response;
    }

    /**
     * Operation listAssignmentsWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $promotion_id ID of the promotion. (optional)
     * @param string $user_id ID of the user. (optional)
     * @param string $user_group_id ID of the user group. (optional)
     * @param string $level Level of the promotion. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listAssignmentsWithHttpInfo($buyer_id, $promotion_id = null, $user_id = null, $user_group_id = null, $level = null, $page = null, $page_size = null)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling listAssignments');
        }
        // parse inputs
        $resourcePath = "/promotions/assignments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($buyer_id !== null) {
            $queryParams['buyerID'] = $this->apiClient->getSerializer()->toQueryValue($buyer_id);
        }
        // query params
        if ($promotion_id !== null) {
            $queryParams['promotionID'] = $this->apiClient->getSerializer()->toQueryValue($promotion_id);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userID'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($user_group_id !== null) {
            $queryParams['userGroupID'] = $this->apiClient->getSerializer()->toQueryValue($user_group_id);
        }
        // query params
        if ($level !== null) {
            $queryParams['level'] = $this->apiClient->getSerializer()->toQueryValue($level);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/promotions/assignments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation patch
     *
     * 
     *
     * @param string $promotion_id ID of the promotion. (required)
     * @param \Swagger\Client\Model\Promotion $partial_promotion  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patch($promotion_id, $partial_promotion)
    {
        list($response) = $this->patchWithHttpInfo($promotion_id, $partial_promotion);
        return $response;
    }

    /**
     * Operation patchWithHttpInfo
     *
     * 
     *
     * @param string $promotion_id ID of the promotion. (required)
     * @param \Swagger\Client\Model\Promotion $partial_promotion  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patchWithHttpInfo($promotion_id, $partial_promotion)
    {
        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promotion_id when calling patch');
        }
        // verify the required parameter 'partial_promotion' is set
        if ($partial_promotion === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partial_promotion when calling patch');
        }
        // parse inputs
        $resourcePath = "/promotions/{promotionID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                "{" . "promotionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($promotion_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partial_promotion)) {
            $_tempBody = $partial_promotion;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/promotions/{promotionID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation saveAssignment
     *
     * 
     *
     * @param \Swagger\Client\Model\PromotionAssignment $assignment  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveAssignment($assignment)
    {
        list($response) = $this->saveAssignmentWithHttpInfo($assignment);
        return $response;
    }

    /**
     * Operation saveAssignmentWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\PromotionAssignment $assignment  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveAssignmentWithHttpInfo($assignment)
    {
        // verify the required parameter 'assignment' is set
        if ($assignment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assignment when calling saveAssignment');
        }
        // parse inputs
        $resourcePath = "/promotions/assignments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($assignment)) {
            $_tempBody = $assignment;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/promotions/assignments'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation update
     *
     * 
     *
     * @param string $promotion_id ID of the promotion. (required)
     * @param \Swagger\Client\Model\Promotion $promo  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function update($promotion_id, $promo)
    {
        list($response) = $this->updateWithHttpInfo($promotion_id, $promo);
        return $response;
    }

    /**
     * Operation updateWithHttpInfo
     *
     * 
     *
     * @param string $promotion_id ID of the promotion. (required)
     * @param \Swagger\Client\Model\Promotion $promo  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateWithHttpInfo($promotion_id, $promo)
    {
        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promotion_id when calling update');
        }
        // verify the required parameter 'promo' is set
        if ($promo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promo when calling update');
        }
        // parse inputs
        $resourcePath = "/promotions/{promotionID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                "{" . "promotionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($promotion_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($promo)) {
            $_tempBody = $promo;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/promotions/{promotionID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
