<?php
/**
 * SpecApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * SpecApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SpecApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.ordercloud.io/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SpecApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation callList
     *
     * 
     *
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function callList($search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        list($response) = $this->callListWithHttpInfo($search, $search_on, $sort_by, $page, $page_size);
        return $response;
    }

    /**
     * Operation callListWithHttpInfo
     *
     * 
     *
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function callListWithHttpInfo($search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        // parse inputs
        $resourcePath = "/specs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($search_on !== null) {
            $queryParams['searchOn'] = $this->apiClient->getSerializer()->toQueryValue($search_on);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/specs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation create
     *
     * 
     *
     * @param \Swagger\Client\Model\Spec $spec  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function create($spec)
    {
        list($response) = $this->createWithHttpInfo($spec);
        return $response;
    }

    /**
     * Operation createWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\Spec $spec  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createWithHttpInfo($spec)
    {
        // verify the required parameter 'spec' is set
        if ($spec === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec when calling create');
        }
        // parse inputs
        $resourcePath = "/specs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($spec)) {
            $_tempBody = $spec;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/specs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createOption
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param \Swagger\Client\Model\SpecOption $option  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createOption($spec_id, $option)
    {
        list($response) = $this->createOptionWithHttpInfo($spec_id, $option);
        return $response;
    }

    /**
     * Operation createOptionWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param \Swagger\Client\Model\SpecOption $option  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createOptionWithHttpInfo($spec_id, $option)
    {
        // verify the required parameter 'spec_id' is set
        if ($spec_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec_id when calling createOption');
        }
        // verify the required parameter 'option' is set
        if ($option === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option when calling createOption');
        }
        // parse inputs
        $resourcePath = "/specs/{specID}/options";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($spec_id !== null) {
            $resourcePath = str_replace(
                "{" . "specID" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($option)) {
            $_tempBody = $option;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/specs/{specID}/options'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation delete
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function delete($spec_id)
    {
        list($response) = $this->deleteWithHttpInfo($spec_id);
        return $response;
    }

    /**
     * Operation deleteWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteWithHttpInfo($spec_id)
    {
        // verify the required parameter 'spec_id' is set
        if ($spec_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec_id when calling delete');
        }
        // parse inputs
        $resourcePath = "/specs/{specID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($spec_id !== null) {
            $resourcePath = str_replace(
                "{" . "specID" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/specs/{specID}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOption
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $option_id ID of the option. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteOption($spec_id, $option_id)
    {
        list($response) = $this->deleteOptionWithHttpInfo($spec_id, $option_id);
        return $response;
    }

    /**
     * Operation deleteOptionWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $option_id ID of the option. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteOptionWithHttpInfo($spec_id, $option_id)
    {
        // verify the required parameter 'spec_id' is set
        if ($spec_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec_id when calling deleteOption');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling deleteOption');
        }
        // parse inputs
        $resourcePath = "/specs/{specID}/options/{optionID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($spec_id !== null) {
            $resourcePath = str_replace(
                "{" . "specID" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "optionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/specs/{specID}/options/{optionID}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProductAssignment
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $product_id ID of the product. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteProductAssignment($spec_id, $product_id)
    {
        list($response) = $this->deleteProductAssignmentWithHttpInfo($spec_id, $product_id);
        return $response;
    }

    /**
     * Operation deleteProductAssignmentWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $product_id ID of the product. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteProductAssignmentWithHttpInfo($spec_id, $product_id)
    {
        // verify the required parameter 'spec_id' is set
        if ($spec_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec_id when calling deleteProductAssignment');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteProductAssignment');
        }
        // parse inputs
        $resourcePath = "/specs/{specID}/productassignments/{productID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($spec_id !== null) {
            $resourcePath = str_replace(
                "{" . "specID" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "productID" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/specs/{specID}/productassignments/{productID}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation get
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function get($spec_id)
    {
        list($response) = $this->getWithHttpInfo($spec_id);
        return $response;
    }

    /**
     * Operation getWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getWithHttpInfo($spec_id)
    {
        // verify the required parameter 'spec_id' is set
        if ($spec_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec_id when calling get');
        }
        // parse inputs
        $resourcePath = "/specs/{specID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($spec_id !== null) {
            $resourcePath = str_replace(
                "{" . "specID" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/specs/{specID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOption
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $option_id ID of the option. (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getOption($spec_id, $option_id)
    {
        list($response) = $this->getOptionWithHttpInfo($spec_id, $option_id);
        return $response;
    }

    /**
     * Operation getOptionWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $option_id ID of the option. (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getOptionWithHttpInfo($spec_id, $option_id)
    {
        // verify the required parameter 'spec_id' is set
        if ($spec_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec_id when calling getOption');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling getOption');
        }
        // parse inputs
        $resourcePath = "/specs/{specID}/options/{optionID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($spec_id !== null) {
            $resourcePath = str_replace(
                "{" . "specID" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "optionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/specs/{specID}/options/{optionID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listOptions
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listOptions($spec_id, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        list($response) = $this->listOptionsWithHttpInfo($spec_id, $search, $search_on, $sort_by, $page, $page_size);
        return $response;
    }

    /**
     * Operation listOptionsWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listOptionsWithHttpInfo($spec_id, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        // verify the required parameter 'spec_id' is set
        if ($spec_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec_id when calling listOptions');
        }
        // parse inputs
        $resourcePath = "/specs/{specID}/options";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($search_on !== null) {
            $queryParams['searchOn'] = $this->apiClient->getSerializer()->toQueryValue($search_on);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // path params
        if ($spec_id !== null) {
            $resourcePath = str_replace(
                "{" . "specID" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/specs/{specID}/options'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listProductAssignments
     *
     * 
     *
     * @param string $spec_id ID of the spec. (optional)
     * @param string $product_id ID of the product. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listProductAssignments($spec_id = null, $product_id = null, $page = null, $page_size = null)
    {
        list($response) = $this->listProductAssignmentsWithHttpInfo($spec_id, $product_id, $page, $page_size);
        return $response;
    }

    /**
     * Operation listProductAssignmentsWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (optional)
     * @param string $product_id ID of the product. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listProductAssignmentsWithHttpInfo($spec_id = null, $product_id = null, $page = null, $page_size = null)
    {
        // parse inputs
        $resourcePath = "/specs/productassignments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($spec_id !== null) {
            $queryParams['specID'] = $this->apiClient->getSerializer()->toQueryValue($spec_id);
        }
        // query params
        if ($product_id !== null) {
            $queryParams['productID'] = $this->apiClient->getSerializer()->toQueryValue($product_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/specs/productassignments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation patch
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param \Swagger\Client\Model\Spec $spec  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patch($spec_id, $spec)
    {
        list($response) = $this->patchWithHttpInfo($spec_id, $spec);
        return $response;
    }

    /**
     * Operation patchWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param \Swagger\Client\Model\Spec $spec  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patchWithHttpInfo($spec_id, $spec)
    {
        // verify the required parameter 'spec_id' is set
        if ($spec_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec_id when calling patch');
        }
        // verify the required parameter 'spec' is set
        if ($spec === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec when calling patch');
        }
        // parse inputs
        $resourcePath = "/specs/{specID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($spec_id !== null) {
            $resourcePath = str_replace(
                "{" . "specID" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($spec)) {
            $_tempBody = $spec;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/specs/{specID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation patchOption
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $option_id ID of the option. (required)
     * @param \Swagger\Client\Model\SpecOption $option  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patchOption($spec_id, $option_id, $option)
    {
        list($response) = $this->patchOptionWithHttpInfo($spec_id, $option_id, $option);
        return $response;
    }

    /**
     * Operation patchOptionWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $option_id ID of the option. (required)
     * @param \Swagger\Client\Model\SpecOption $option  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patchOptionWithHttpInfo($spec_id, $option_id, $option)
    {
        // verify the required parameter 'spec_id' is set
        if ($spec_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec_id when calling patchOption');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling patchOption');
        }
        // verify the required parameter 'option' is set
        if ($option === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option when calling patchOption');
        }
        // parse inputs
        $resourcePath = "/specs/{specID}/options/{optionID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($spec_id !== null) {
            $resourcePath = str_replace(
                "{" . "specID" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "optionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($option)) {
            $_tempBody = $option;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/specs/{specID}/options/{optionID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation saveProductAssignment
     *
     * 
     *
     * @param \Swagger\Client\Model\SpecProductAssignment $product_assignment  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveProductAssignment($product_assignment)
    {
        list($response) = $this->saveProductAssignmentWithHttpInfo($product_assignment);
        return $response;
    }

    /**
     * Operation saveProductAssignmentWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\SpecProductAssignment $product_assignment  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveProductAssignmentWithHttpInfo($product_assignment)
    {
        // verify the required parameter 'product_assignment' is set
        if ($product_assignment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_assignment when calling saveProductAssignment');
        }
        // parse inputs
        $resourcePath = "/specs/productassignments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($product_assignment)) {
            $_tempBody = $product_assignment;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/specs/productassignments'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation update
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param \Swagger\Client\Model\Spec $spec  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function update($spec_id, $spec)
    {
        list($response) = $this->updateWithHttpInfo($spec_id, $spec);
        return $response;
    }

    /**
     * Operation updateWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param \Swagger\Client\Model\Spec $spec  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateWithHttpInfo($spec_id, $spec)
    {
        // verify the required parameter 'spec_id' is set
        if ($spec_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec_id when calling update');
        }
        // verify the required parameter 'spec' is set
        if ($spec === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec when calling update');
        }
        // parse inputs
        $resourcePath = "/specs/{specID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($spec_id !== null) {
            $resourcePath = str_replace(
                "{" . "specID" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($spec)) {
            $_tempBody = $spec;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/specs/{specID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOption
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $option_id ID of the option. (required)
     * @param \Swagger\Client\Model\SpecOption $option  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateOption($spec_id, $option_id, $option)
    {
        list($response) = $this->updateOptionWithHttpInfo($spec_id, $option_id, $option);
        return $response;
    }

    /**
     * Operation updateOptionWithHttpInfo
     *
     * 
     *
     * @param string $spec_id ID of the spec. (required)
     * @param string $option_id ID of the option. (required)
     * @param \Swagger\Client\Model\SpecOption $option  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateOptionWithHttpInfo($spec_id, $option_id, $option)
    {
        // verify the required parameter 'spec_id' is set
        if ($spec_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $spec_id when calling updateOption');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling updateOption');
        }
        // verify the required parameter 'option' is set
        if ($option === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option when calling updateOption');
        }
        // parse inputs
        $resourcePath = "/specs/{specID}/options/{optionID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($spec_id !== null) {
            $resourcePath = str_replace(
                "{" . "specID" . "}",
                $this->apiClient->getSerializer()->toPathValue($spec_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "optionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($option)) {
            $_tempBody = $option;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/specs/{specID}/options/{optionID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
