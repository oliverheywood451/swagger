<?php
/**
 * OrderApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.ordercloud.io/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return OrderApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addPromotion
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $promo_code Promo code of the order. (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addPromotion($buyer_id, $order_id, $promo_code)
    {
        list($response) = $this->addPromotionWithHttpInfo($buyer_id, $order_id, $promo_code);
        return $response;
    }

    /**
     * Operation addPromotionWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $promo_code Promo code of the order. (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addPromotionWithHttpInfo($buyer_id, $order_id, $promo_code)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling addPromotion');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling addPromotion');
        }
        // verify the required parameter 'promo_code' is set
        if ($promo_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promo_code when calling addPromotion');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($promo_code !== null) {
            $resourcePath = str_replace(
                "{" . "promoCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($promo_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation approve
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $comments Comments to be saved with the order approval. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function approve($buyer_id, $order_id, $comments = null)
    {
        list($response) = $this->approveWithHttpInfo($buyer_id, $order_id, $comments);
        return $response;
    }

    /**
     * Operation approveWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $comments Comments to be saved with the order approval. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function approveWithHttpInfo($buyer_id, $order_id, $comments = null)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling approve');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling approve');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/approve";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($comments !== null) {
            $queryParams['comments'] = $this->apiClient->getSerializer()->toQueryValue($comments);
        }
        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/approve'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cancel
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancel($buyer_id, $order_id)
    {
        list($response) = $this->cancelWithHttpInfo($buyer_id, $order_id);
        return $response;
    }

    /**
     * Operation cancelWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelWithHttpInfo($buyer_id, $order_id)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling cancel');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling cancel');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/cancel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/cancel'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation create
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param \Swagger\Client\Model\Order $order  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function create($buyer_id, $order)
    {
        list($response) = $this->createWithHttpInfo($buyer_id, $order);
        return $response;
    }

    /**
     * Operation createWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param \Swagger\Client\Model\Order $order  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createWithHttpInfo($buyer_id, $order)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling create');
        }
        // verify the required parameter 'order' is set
        if ($order === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order when calling create');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($order)) {
            $_tempBody = $order;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation decline
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $comments Comments to be saved with the order denial. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function decline($buyer_id, $order_id, $comments = null)
    {
        list($response) = $this->declineWithHttpInfo($buyer_id, $order_id, $comments);
        return $response;
    }

    /**
     * Operation declineWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $comments Comments to be saved with the order denial. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function declineWithHttpInfo($buyer_id, $order_id, $comments = null)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling decline');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling decline');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/decline";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($comments !== null) {
            $queryParams['comments'] = $this->apiClient->getSerializer()->toQueryValue($comments);
        }
        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/decline'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation delete
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function delete($buyer_id, $order_id)
    {
        list($response) = $this->deleteWithHttpInfo($buyer_id, $order_id);
        return $response;
    }

    /**
     * Operation deleteWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteWithHttpInfo($buyer_id, $order_id)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling delete');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling delete');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/buyers/{buyerID}/orders/{orderID}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation get
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function get($buyer_id, $order_id)
    {
        list($response) = $this->getWithHttpInfo($buyer_id, $order_id);
        return $response;
    }

    /**
     * Operation getWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getWithHttpInfo($buyer_id, $order_id)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling get');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling get');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listApprovals
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listApprovals($buyer_id, $order_id, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        list($response) = $this->listApprovalsWithHttpInfo($buyer_id, $order_id, $search, $search_on, $sort_by, $page, $page_size);
        return $response;
    }

    /**
     * Operation listApprovalsWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listApprovalsWithHttpInfo($buyer_id, $order_id, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling listApprovals');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling listApprovals');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/approvals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($search_on !== null) {
            $queryParams['searchOn'] = $this->apiClient->getSerializer()->toQueryValue($search_on);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/approvals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listEligibleApprovers
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listEligibleApprovers($buyer_id, $order_id, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        list($response) = $this->listEligibleApproversWithHttpInfo($buyer_id, $order_id, $search, $search_on, $sort_by, $page, $page_size);
        return $response;
    }

    /**
     * Operation listEligibleApproversWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listEligibleApproversWithHttpInfo($buyer_id, $order_id, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling listEligibleApprovers');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling listEligibleApprovers');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/eligibleapprovers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($search_on !== null) {
            $queryParams['searchOn'] = $this->apiClient->getSerializer()->toQueryValue($search_on);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/eligibleapprovers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listIncoming
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (optional)
     * @param string $from Lower bound of date range that the order was submitted. (optional)
     * @param string $to Upper bound of date range that the order was submitted. (optional)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listIncoming($buyer_id = null, $from = null, $to = null, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        list($response) = $this->listIncomingWithHttpInfo($buyer_id, $from, $to, $search, $search_on, $sort_by, $page, $page_size);
        return $response;
    }

    /**
     * Operation listIncomingWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (optional)
     * @param string $from Lower bound of date range that the order was submitted. (optional)
     * @param string $to Upper bound of date range that the order was submitted. (optional)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listIncomingWithHttpInfo($buyer_id = null, $from = null, $to = null, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        // parse inputs
        $resourcePath = "/orders/incoming";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($buyer_id !== null) {
            $queryParams['buyerID'] = $this->apiClient->getSerializer()->toQueryValue($buyer_id);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($search_on !== null) {
            $queryParams['searchOn'] = $this->apiClient->getSerializer()->toQueryValue($search_on);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/orders/incoming'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listOutgoing
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (optional)
     * @param string $from Lower bound of date range that the order was created. (optional)
     * @param string $to Upper bound of date range that the order was created. (optional)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listOutgoing($buyer_id = null, $from = null, $to = null, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        list($response) = $this->listOutgoingWithHttpInfo($buyer_id, $from, $to, $search, $search_on, $sort_by, $page, $page_size);
        return $response;
    }

    /**
     * Operation listOutgoingWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (optional)
     * @param string $from Lower bound of date range that the order was created. (optional)
     * @param string $to Upper bound of date range that the order was created. (optional)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listOutgoingWithHttpInfo($buyer_id = null, $from = null, $to = null, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        // parse inputs
        $resourcePath = "/orders/outgoing";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($buyer_id !== null) {
            $queryParams['buyerID'] = $this->apiClient->getSerializer()->toQueryValue($buyer_id);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($search_on !== null) {
            $queryParams['searchOn'] = $this->apiClient->getSerializer()->toQueryValue($search_on);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/orders/outgoing'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listPromotions
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listPromotions($buyer_id, $order_id, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        list($response) = $this->listPromotionsWithHttpInfo($buyer_id, $order_id, $search, $search_on, $sort_by, $page, $page_size);
        return $response;
    }

    /**
     * Operation listPromotionsWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $search Word or phrase to search for. (optional)
     * @param string $search_on Comma-delimited list of fields to search on. (optional)
     * @param string $sort_by Comma-delimited list of fields to sort by. (optional)
     * @param int $page Page of results to return. Default: 1 (optional)
     * @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listPromotionsWithHttpInfo($buyer_id, $order_id, $search = null, $search_on = null, $sort_by = null, $page = null, $page_size = null)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling listPromotions');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling listPromotions');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/promotions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($search_on !== null) {
            $queryParams['searchOn'] = $this->apiClient->getSerializer()->toQueryValue($search_on);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/promotions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation patch
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Order $partial_order  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patch($buyer_id, $order_id, $partial_order)
    {
        list($response) = $this->patchWithHttpInfo($buyer_id, $order_id, $partial_order);
        return $response;
    }

    /**
     * Operation patchWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Order $partial_order  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patchWithHttpInfo($buyer_id, $order_id, $partial_order)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling patch');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling patch');
        }
        // verify the required parameter 'partial_order' is set
        if ($partial_order === null) {
            throw new \InvalidArgumentException('Missing the required parameter $partial_order when calling patch');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($partial_order)) {
            $_tempBody = $partial_order;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation patchBillingAddress
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Address $address  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patchBillingAddress($buyer_id, $order_id, $address)
    {
        list($response) = $this->patchBillingAddressWithHttpInfo($buyer_id, $order_id, $address);
        return $response;
    }

    /**
     * Operation patchBillingAddressWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Address $address  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patchBillingAddressWithHttpInfo($buyer_id, $order_id, $address)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling patchBillingAddress');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling patchBillingAddress');
        }
        // verify the required parameter 'address' is set
        if ($address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address when calling patchBillingAddress');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/billto";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($address)) {
            $_tempBody = $address;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/billto'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation patchShippingAddress
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Address $address  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patchShippingAddress($buyer_id, $order_id, $address)
    {
        list($response) = $this->patchShippingAddressWithHttpInfo($buyer_id, $order_id, $address);
        return $response;
    }

    /**
     * Operation patchShippingAddressWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Address $address  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function patchShippingAddressWithHttpInfo($buyer_id, $order_id, $address)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling patchShippingAddress');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling patchShippingAddress');
        }
        // verify the required parameter 'address' is set
        if ($address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address when calling patchShippingAddress');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/shipto";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($address)) {
            $_tempBody = $address;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/shipto'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removePromotion
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $promo_code Promo code of the order. (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removePromotion($buyer_id, $order_id, $promo_code)
    {
        list($response) = $this->removePromotionWithHttpInfo($buyer_id, $order_id, $promo_code);
        return $response;
    }

    /**
     * Operation removePromotionWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param string $promo_code Promo code of the order. (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removePromotionWithHttpInfo($buyer_id, $order_id, $promo_code)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling removePromotion');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling removePromotion');
        }
        // verify the required parameter 'promo_code' is set
        if ($promo_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $promo_code when calling removePromotion');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($promo_code !== null) {
            $resourcePath = str_replace(
                "{" . "promoCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($promo_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setBillingAddress
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Address $address  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function setBillingAddress($buyer_id, $order_id, $address)
    {
        list($response) = $this->setBillingAddressWithHttpInfo($buyer_id, $order_id, $address);
        return $response;
    }

    /**
     * Operation setBillingAddressWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Address $address  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function setBillingAddressWithHttpInfo($buyer_id, $order_id, $address)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling setBillingAddress');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling setBillingAddress');
        }
        // verify the required parameter 'address' is set
        if ($address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address when calling setBillingAddress');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/billto";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($address)) {
            $_tempBody = $address;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/billto'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setShippingAddress
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Address $address  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function setShippingAddress($buyer_id, $order_id, $address)
    {
        list($response) = $this->setShippingAddressWithHttpInfo($buyer_id, $order_id, $address);
        return $response;
    }

    /**
     * Operation setShippingAddressWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Address $address  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function setShippingAddressWithHttpInfo($buyer_id, $order_id, $address)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling setShippingAddress');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling setShippingAddress');
        }
        // verify the required parameter 'address' is set
        if ($address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address when calling setShippingAddress');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/shipto";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($address)) {
            $_tempBody = $address;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/shipto'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ship
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Shipment $shipment  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function ship($buyer_id, $order_id, $shipment)
    {
        list($response) = $this->shipWithHttpInfo($buyer_id, $order_id, $shipment);
        return $response;
    }

    /**
     * Operation shipWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Shipment $shipment  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function shipWithHttpInfo($buyer_id, $order_id, $shipment)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling ship');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling ship');
        }
        // verify the required parameter 'shipment' is set
        if ($shipment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shipment when calling ship');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/ship";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($shipment)) {
            $_tempBody = $shipment;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/ship'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation submit
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function submit($buyer_id, $order_id)
    {
        list($response) = $this->submitWithHttpInfo($buyer_id, $order_id);
        return $response;
    }

    /**
     * Operation submitWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function submitWithHttpInfo($buyer_id, $order_id)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling submit');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling submit');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}/submit";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}/submit'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation transferTempUserOrder
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $temp_user_token Temp user token of the order. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transferTempUserOrder($buyer_id, $temp_user_token)
    {
        list($response) = $this->transferTempUserOrderWithHttpInfo($buyer_id, $temp_user_token);
        return $response;
    }

    /**
     * Operation transferTempUserOrderWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $temp_user_token Temp user token of the order. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transferTempUserOrderWithHttpInfo($buyer_id, $temp_user_token)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling transferTempUserOrder');
        }
        // verify the required parameter 'temp_user_token' is set
        if ($temp_user_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $temp_user_token when calling transferTempUserOrder');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($temp_user_token !== null) {
            $queryParams['tempUserToken'] = $this->apiClient->getSerializer()->toQueryValue($temp_user_token);
        }
        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/buyers/{buyerID}/orders'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation update
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Order $order  (required)
     * @return object
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function update($buyer_id, $order_id, $order)
    {
        list($response) = $this->updateWithHttpInfo($buyer_id, $order_id, $order);
        return $response;
    }

    /**
     * Operation updateWithHttpInfo
     *
     * 
     *
     * @param string $buyer_id ID of the buyer. (required)
     * @param string $order_id ID of the order. (required)
     * @param \Swagger\Client\Model\Order $order  (required)
     * @return Array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateWithHttpInfo($buyer_id, $order_id, $order)
    {
        // verify the required parameter 'buyer_id' is set
        if ($buyer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $buyer_id when calling update');
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling update');
        }
        // verify the required parameter 'order' is set
        if ($order === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order when calling update');
        }
        // parse inputs
        $resourcePath = "/buyers/{buyerID}/orders/{orderID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($buyer_id !== null) {
            $resourcePath = str_replace(
                "{" . "buyerID" . "}",
                $this->apiClient->getSerializer()->toPathValue($buyer_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderID" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($order)) {
            $_tempBody = $order;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/buyers/{buyerID}/orders/{orderID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
