/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class CreditCardApi {
    protected basePath = 'https://api.ordercloud.io/v1';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param creditCardID ID of the credit card.
     */
    public _delete (buyerID: string, creditCardID: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/buyers/{buyerID}/creditcards/{creditCardID}'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'creditCardID' + '}', String(creditCardID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling _delete.');
        }
        // verify required parameter 'creditCardID' is not null or undefined
        if (creditCardID === null || creditCardID === undefined) {
            throw new Error('Required parameter creditCardID was null or undefined when calling _delete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param card 
     */
    public create (buyerID: string, card: models.CreditCard, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/creditcards'
            .replace('{' + 'buyerID' + '}', String(buyerID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling create.');
        }
        // verify required parameter 'card' is not null or undefined
        if (card === null || card === undefined) {
            throw new Error('Required parameter card was null or undefined when calling create.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(card);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param creditCardID ID of the credit card.
     * @param userID ID of the user.
     * @param userGroupID ID of the user group.
     */
    public deleteAssignment (buyerID: string, creditCardID: string, userID?: string, userGroupID?: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/buyers/{buyerID}/creditcards/{creditCardID}/assignments'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'creditCardID' + '}', String(creditCardID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling deleteAssignment.');
        }
        // verify required parameter 'creditCardID' is not null or undefined
        if (creditCardID === null || creditCardID === undefined) {
            throw new Error('Required parameter creditCardID was null or undefined when calling deleteAssignment.');
        }
        if (userID !== undefined) {
            queryParameters.set('userID', String(userID));
        }

        if (userGroupID !== undefined) {
            queryParameters.set('userGroupID', String(userGroupID));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param creditCardID ID of the credit card.
     */
    public get (buyerID: string, creditCardID: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/creditcards/{creditCardID}'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'creditCardID' + '}', String(creditCardID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling get.');
        }
        // verify required parameter 'creditCardID' is not null or undefined
        if (creditCardID === null || creditCardID === undefined) {
            throw new Error('Required parameter creditCardID was null or undefined when calling get.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param search Word or phrase to search for.
     * @param searchOn Comma-delimited list of fields to search on.
     * @param sortBy Comma-delimited list of fields to sort by.
     * @param page Page of results to return. Default: 1
     * @param pageSize Number of results to return per page. Default: 20, max: 100.
     */
    public list (buyerID: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/creditcards'
            .replace('{' + 'buyerID' + '}', String(buyerID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling list.');
        }
        if (search !== undefined) {
            queryParameters.set('search', String(search));
        }

        if (searchOn !== undefined) {
            queryParameters.set('searchOn', String(searchOn));
        }

        if (sortBy !== undefined) {
            queryParameters.set('sortBy', String(sortBy));
        }

        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param creditCardID ID of the credit card.
     * @param userID ID of the user.
     * @param userGroupID ID of the user group.
     * @param level Level of the credit card.
     * @param page Page of results to return. Default: 1
     * @param pageSize Number of results to return per page. Default: 20, max: 100.
     */
    public listAssignments (buyerID: string, creditCardID?: string, userID?: string, userGroupID?: string, level?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/creditcards/assignments'
            .replace('{' + 'buyerID' + '}', String(buyerID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling listAssignments.');
        }
        if (creditCardID !== undefined) {
            queryParameters.set('creditCardID', String(creditCardID));
        }

        if (userID !== undefined) {
            queryParameters.set('userID', String(userID));
        }

        if (userGroupID !== undefined) {
            queryParameters.set('userGroupID', String(userGroupID));
        }

        if (level !== undefined) {
            queryParameters.set('level', String(level));
        }

        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param creditCardID ID of the credit card.
     * @param card 
     */
    public patch (buyerID: string, creditCardID: string, card: models.CreditCard, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/creditcards/{creditCardID}'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'creditCardID' + '}', String(creditCardID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling patch.');
        }
        // verify required parameter 'creditCardID' is not null or undefined
        if (creditCardID === null || creditCardID === undefined) {
            throw new Error('Required parameter creditCardID was null or undefined when calling patch.');
        }
        // verify required parameter 'card' is not null or undefined
        if (card === null || card === undefined) {
            throw new Error('Required parameter card was null or undefined when calling patch.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PATCH',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(card);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param assignment 
     */
    public saveAssignment (buyerID: string, assignment: models.CreditCardAssignment, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/buyers/{buyerID}/creditcards/assignments'
            .replace('{' + 'buyerID' + '}', String(buyerID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling saveAssignment.');
        }
        // verify required parameter 'assignment' is not null or undefined
        if (assignment === null || assignment === undefined) {
            throw new Error('Required parameter assignment was null or undefined when calling saveAssignment.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(assignment);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param creditCardID ID of the credit card.
     * @param card 
     */
    public update (buyerID: string, creditCardID: string, card: models.CreditCard, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/creditcards/{creditCardID}'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'creditCardID' + '}', String(creditCardID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling update.');
        }
        // verify required parameter 'creditCardID' is not null or undefined
        if (creditCardID === null || creditCardID === undefined) {
            throw new Error('Required parameter creditCardID was null or undefined when calling update.');
        }
        // verify required parameter 'card' is not null or undefined
        if (card === null || card === undefined) {
            throw new Error('Required parameter card was null or undefined when calling update.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(card);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
