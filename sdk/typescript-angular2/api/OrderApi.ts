/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class OrderApi {
    protected basePath = 'https://api.ordercloud.io/v1';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     */
    public _delete (buyerID: string, orderID: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling _delete.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling _delete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param promoCode Promo code of the order.
     */
    public addPromotion (buyerID: string, orderID: string, promoCode: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID))
            .replace('{' + 'promoCode' + '}', String(promoCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling addPromotion.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling addPromotion.');
        }
        // verify required parameter 'promoCode' is not null or undefined
        if (promoCode === null || promoCode === undefined) {
            throw new Error('Required parameter promoCode was null or undefined when calling addPromotion.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param comments Comments to be saved with the order approval.
     */
    public approve (buyerID: string, orderID: string, comments?: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/approve'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling approve.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling approve.');
        }
        if (comments !== undefined) {
            queryParameters.set('comments', String(comments));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     */
    public cancel (buyerID: string, orderID: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/cancel'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling cancel.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling cancel.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param order 
     */
    public create (buyerID: string, order: models.Order, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders'
            .replace('{' + 'buyerID' + '}', String(buyerID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling create.');
        }
        // verify required parameter 'order' is not null or undefined
        if (order === null || order === undefined) {
            throw new Error('Required parameter order was null or undefined when calling create.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(order);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param comments Comments to be saved with the order denial.
     */
    public decline (buyerID: string, orderID: string, comments?: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/decline'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling decline.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling decline.');
        }
        if (comments !== undefined) {
            queryParameters.set('comments', String(comments));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     */
    public get (buyerID: string, orderID: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling get.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling get.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param search Word or phrase to search for.
     * @param searchOn Comma-delimited list of fields to search on.
     * @param sortBy Comma-delimited list of fields to sort by.
     * @param page Page of results to return. Default: 1
     * @param pageSize Number of results to return per page. Default: 20, max: 100.
     */
    public listApprovals (buyerID: string, orderID: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/approvals'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling listApprovals.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling listApprovals.');
        }
        if (search !== undefined) {
            queryParameters.set('search', String(search));
        }

        if (searchOn !== undefined) {
            queryParameters.set('searchOn', String(searchOn));
        }

        if (sortBy !== undefined) {
            queryParameters.set('sortBy', String(sortBy));
        }

        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param search Word or phrase to search for.
     * @param searchOn Comma-delimited list of fields to search on.
     * @param sortBy Comma-delimited list of fields to sort by.
     * @param page Page of results to return. Default: 1
     * @param pageSize Number of results to return per page. Default: 20, max: 100.
     */
    public listEligibleApprovers (buyerID: string, orderID: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/eligibleapprovers'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling listEligibleApprovers.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling listEligibleApprovers.');
        }
        if (search !== undefined) {
            queryParameters.set('search', String(search));
        }

        if (searchOn !== undefined) {
            queryParameters.set('searchOn', String(searchOn));
        }

        if (sortBy !== undefined) {
            queryParameters.set('sortBy', String(sortBy));
        }

        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param from Lower bound of date range that the order was submitted.
     * @param to Upper bound of date range that the order was submitted.
     * @param search Word or phrase to search for.
     * @param searchOn Comma-delimited list of fields to search on.
     * @param sortBy Comma-delimited list of fields to sort by.
     * @param page Page of results to return. Default: 1
     * @param pageSize Number of results to return per page. Default: 20, max: 100.
     */
    public listIncoming (buyerID?: string, from?: string, to?: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/orders/incoming';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (buyerID !== undefined) {
            queryParameters.set('buyerID', String(buyerID));
        }

        if (from !== undefined) {
            queryParameters.set('from', String(from));
        }

        if (to !== undefined) {
            queryParameters.set('to', String(to));
        }

        if (search !== undefined) {
            queryParameters.set('search', String(search));
        }

        if (searchOn !== undefined) {
            queryParameters.set('searchOn', String(searchOn));
        }

        if (sortBy !== undefined) {
            queryParameters.set('sortBy', String(sortBy));
        }

        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param from Lower bound of date range that the order was created.
     * @param to Upper bound of date range that the order was created.
     * @param search Word or phrase to search for.
     * @param searchOn Comma-delimited list of fields to search on.
     * @param sortBy Comma-delimited list of fields to sort by.
     * @param page Page of results to return. Default: 1
     * @param pageSize Number of results to return per page. Default: 20, max: 100.
     */
    public listOutgoing (buyerID?: string, from?: string, to?: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/orders/outgoing';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (buyerID !== undefined) {
            queryParameters.set('buyerID', String(buyerID));
        }

        if (from !== undefined) {
            queryParameters.set('from', String(from));
        }

        if (to !== undefined) {
            queryParameters.set('to', String(to));
        }

        if (search !== undefined) {
            queryParameters.set('search', String(search));
        }

        if (searchOn !== undefined) {
            queryParameters.set('searchOn', String(searchOn));
        }

        if (sortBy !== undefined) {
            queryParameters.set('sortBy', String(sortBy));
        }

        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param search Word or phrase to search for.
     * @param searchOn Comma-delimited list of fields to search on.
     * @param sortBy Comma-delimited list of fields to sort by.
     * @param page Page of results to return. Default: 1
     * @param pageSize Number of results to return per page. Default: 20, max: 100.
     */
    public listPromotions (buyerID: string, orderID: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/promotions'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling listPromotions.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling listPromotions.');
        }
        if (search !== undefined) {
            queryParameters.set('search', String(search));
        }

        if (searchOn !== undefined) {
            queryParameters.set('searchOn', String(searchOn));
        }

        if (sortBy !== undefined) {
            queryParameters.set('sortBy', String(sortBy));
        }

        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', String(pageSize));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param partialOrder 
     */
    public patch (buyerID: string, orderID: string, partialOrder: models.Order, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling patch.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling patch.');
        }
        // verify required parameter 'partialOrder' is not null or undefined
        if (partialOrder === null || partialOrder === undefined) {
            throw new Error('Required parameter partialOrder was null or undefined when calling patch.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PATCH',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(partialOrder);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param address 
     */
    public patchBillingAddress (buyerID: string, orderID: string, address: models.Address, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/billto'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling patchBillingAddress.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling patchBillingAddress.');
        }
        // verify required parameter 'address' is not null or undefined
        if (address === null || address === undefined) {
            throw new Error('Required parameter address was null or undefined when calling patchBillingAddress.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PATCH',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(address);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param address 
     */
    public patchShippingAddress (buyerID: string, orderID: string, address: models.Address, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/shipto'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling patchShippingAddress.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling patchShippingAddress.');
        }
        // verify required parameter 'address' is not null or undefined
        if (address === null || address === undefined) {
            throw new Error('Required parameter address was null or undefined when calling patchShippingAddress.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PATCH',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(address);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param promoCode Promo code of the order.
     */
    public removePromotion (buyerID: string, orderID: string, promoCode: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID))
            .replace('{' + 'promoCode' + '}', String(promoCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling removePromotion.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling removePromotion.');
        }
        // verify required parameter 'promoCode' is not null or undefined
        if (promoCode === null || promoCode === undefined) {
            throw new Error('Required parameter promoCode was null or undefined when calling removePromotion.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param address 
     */
    public setBillingAddress (buyerID: string, orderID: string, address: models.Address, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/billto'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling setBillingAddress.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling setBillingAddress.');
        }
        // verify required parameter 'address' is not null or undefined
        if (address === null || address === undefined) {
            throw new Error('Required parameter address was null or undefined when calling setBillingAddress.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(address);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param address 
     */
    public setShippingAddress (buyerID: string, orderID: string, address: models.Address, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/shipto'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling setShippingAddress.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling setShippingAddress.');
        }
        // verify required parameter 'address' is not null or undefined
        if (address === null || address === undefined) {
            throw new Error('Required parameter address was null or undefined when calling setShippingAddress.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(address);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param shipment 
     */
    public ship (buyerID: string, orderID: string, shipment: models.Shipment, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/ship'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling ship.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling ship.');
        }
        // verify required parameter 'shipment' is not null or undefined
        if (shipment === null || shipment === undefined) {
            throw new Error('Required parameter shipment was null or undefined when calling ship.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(shipment);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     */
    public submit (buyerID: string, orderID: string, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}/submit'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling submit.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling submit.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param tempUserToken Temp user token of the order.
     */
    public transferTempUserOrder (buyerID: string, tempUserToken: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/buyers/{buyerID}/orders'
            .replace('{' + 'buyerID' + '}', String(buyerID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling transferTempUserOrder.');
        }
        // verify required parameter 'tempUserToken' is not null or undefined
        if (tempUserToken === null || tempUserToken === undefined) {
            throw new Error('Required parameter tempUserToken was null or undefined when calling transferTempUserOrder.');
        }
        if (tempUserToken !== undefined) {
            queryParameters.set('tempUserToken', String(tempUserToken));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer.
     * @param orderID ID of the order.
     * @param order 
     */
    public update (buyerID: string, orderID: string, order: models.Order, extraHttpRequestParams?: any ) : Observable<any> {
        const path = this.basePath + '/buyers/{buyerID}/orders/{orderID}'
            .replace('{' + 'buyerID' + '}', String(buyerID))
            .replace('{' + 'orderID' + '}', String(orderID));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'buyerID' is not null or undefined
        if (buyerID === null || buyerID === undefined) {
            throw new Error('Required parameter buyerID was null or undefined when calling update.');
        }
        // verify required parameter 'orderID' is not null or undefined
        if (orderID === null || orderID === undefined) {
            throw new Error('Required parameter orderID was null or undefined when calling update.');
        }
        // verify required parameter 'order' is not null or undefined
        if (order === null || order === undefined) {
            throw new Error('Required parameter order was null or undefined when calling update.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(order);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
