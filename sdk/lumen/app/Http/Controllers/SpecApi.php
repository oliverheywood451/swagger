<?php

/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class SpecApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation create
     *
     * .
     *
     *
     * @return Http response
     */
    public function create()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['spec'])) {
            throw new \InvalidArgumentException('Missing the required parameter $spec when calling create');
        }
        $spec = $input['spec'];


        return response('How about implementing create as a POST method ?');
    }
    /**
     * Operation list
     *
     * .
     *
     *
     * @return Http response
     */
    public function list()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing list as a GET method ?');
    }
    /**
     * Operation listProductAssignments
     *
     * .
     *
     *
     * @return Http response
     */
    public function listProductAssignments()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $specID = $input['specID'];

        $productID = $input['productID'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listProductAssignments as a GET method ?');
    }
    /**
     * Operation saveProductAssignment
     *
     * .
     *
     *
     * @return Http response
     */
    public function saveProductAssignment()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['productAssignment'])) {
            throw new \InvalidArgumentException('Missing the required parameter $productAssignment when calling saveProductAssignment');
        }
        $productAssignment = $input['productAssignment'];


        return response('How about implementing saveProductAssignment as a POST method ?');
    }
    /**
     * Operation delete
     *
     * .
     *
     * @param String $specID ID of the spec. (required)
     *
     * @return Http response
     */
    public function delete($specID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing delete as a DELETE method ?');
    }
    /**
     * Operation get
     *
     * .
     *
     * @param String $specID ID of the spec. (required)
     *
     * @return Http response
     */
    public function get($specID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing get as a GET method ?');
    }
    /**
     * Operation patch
     *
     * .
     *
     * @param String $specID ID of the spec. (required)
     *
     * @return Http response
     */
    public function patch($specID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing patch as a PATCH method ?');
    }
    /**
     * Operation update
     *
     * .
     *
     * @param String $specID ID of the spec. (required)
     *
     * @return Http response
     */
    public function update($specID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing update as a PUT method ?');
    }
    /**
     * Operation createOption
     *
     * .
     *
     * @param String $specID ID of the spec. (required)
     *
     * @return Http response
     */
    public function createOption($specID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing createOption as a POST method ?');
    }
    /**
     * Operation listOptions
     *
     * .
     *
     * @param String $specID ID of the spec. (required)
     *
     * @return Http response
     */
    public function listOptions($specID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listOptions as a GET method ?');
    }
    /**
     * Operation deleteOption
     *
     * .
     *
     * @param String $specID ID of the spec. (required)
     * @param String $optionID ID of the option. (required)
     *
     * @return Http response
     */
    public function deleteOption($specID, $optionID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteOption as a DELETE method ?');
    }
    /**
     * Operation getOption
     *
     * .
     *
     * @param String $specID ID of the spec. (required)
     * @param String $optionID ID of the option. (required)
     *
     * @return Http response
     */
    public function getOption($specID, $optionID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getOption as a GET method ?');
    }
    /**
     * Operation patchOption
     *
     * .
     *
     * @param String $specID ID of the spec. (required)
     * @param String $optionID ID of the option. (required)
     *
     * @return Http response
     */
    public function patchOption($specID, $optionID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing patchOption as a PATCH method ?');
    }
    /**
     * Operation updateOption
     *
     * .
     *
     * @param String $specID ID of the spec. (required)
     * @param String $optionID ID of the option. (required)
     *
     * @return Http response
     */
    public function updateOption($specID, $optionID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateOption as a PUT method ?');
    }
    /**
     * Operation deleteProductAssignment
     *
     * .
     *
     * @param String $specID ID of the spec. (required)
     * @param String $productID ID of the product. (required)
     *
     * @return Http response
     */
    public function deleteProductAssignment($specID, $productID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteProductAssignment as a DELETE method ?');
    }
}
