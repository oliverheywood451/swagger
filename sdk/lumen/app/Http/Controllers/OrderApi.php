<?php

/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class OrderApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation create
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     *
     * @return Http response
     */
    public function create($buyerID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing create as a POST method ?');
    }
    /**
     * Operation transferTempUserOrder
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     *
     * @return Http response
     */
    public function transferTempUserOrder($buyerID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing transferTempUserOrder as a PUT method ?');
    }
    /**
     * Operation delete
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function delete($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing delete as a DELETE method ?');
    }
    /**
     * Operation get
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function get($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing get as a GET method ?');
    }
    /**
     * Operation patch
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function patch($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing patch as a PATCH method ?');
    }
    /**
     * Operation update
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function update($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing update as a PUT method ?');
    }
    /**
     * Operation listApprovals
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function listApprovals($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listApprovals as a GET method ?');
    }
    /**
     * Operation approve
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function approve($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing approve as a POST method ?');
    }
    /**
     * Operation patchBillingAddress
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function patchBillingAddress($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing patchBillingAddress as a PATCH method ?');
    }
    /**
     * Operation setBillingAddress
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function setBillingAddress($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing setBillingAddress as a PUT method ?');
    }
    /**
     * Operation cancel
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function cancel($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing cancel as a POST method ?');
    }
    /**
     * Operation decline
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function decline($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing decline as a POST method ?');
    }
    /**
     * Operation listEligibleApprovers
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function listEligibleApprovers($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listEligibleApprovers as a GET method ?');
    }
    /**
     * Operation listPromotions
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function listPromotions($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listPromotions as a GET method ?');
    }
    /**
     * Operation addPromotion
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     * @param String $promoCode Promo code of the order. (required)
     *
     * @return Http response
     */
    public function addPromotion($buyerID, $orderID, $promoCode)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing addPromotion as a POST method ?');
    }
    /**
     * Operation removePromotion
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     * @param String $promoCode Promo code of the order. (required)
     *
     * @return Http response
     */
    public function removePromotion($buyerID, $orderID, $promoCode)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing removePromotion as a DELETE method ?');
    }
    /**
     * Operation ship
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function ship($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing ship as a POST method ?');
    }
    /**
     * Operation patchShippingAddress
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function patchShippingAddress($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing patchShippingAddress as a PATCH method ?');
    }
    /**
     * Operation setShippingAddress
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function setShippingAddress($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing setShippingAddress as a PUT method ?');
    }
    /**
     * Operation submit
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function submit($buyerID, $orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing submit as a POST method ?');
    }
    /**
     * Operation listIncoming
     *
     * .
     *
     *
     * @return Http response
     */
    public function listIncoming()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $buyerID = $input['buyerID'];

        $from = $input['from'];

        $to = $input['to'];

        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listIncoming as a GET method ?');
    }
    /**
     * Operation listOutgoing
     *
     * .
     *
     *
     * @return Http response
     */
    public function listOutgoing()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $buyerID = $input['buyerID'];

        $from = $input['from'];

        $to = $input['to'];

        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listOutgoing as a GET method ?');
    }
}
