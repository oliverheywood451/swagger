<?php

/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class PromotionApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation create
     *
     * .
     *
     *
     * @return Http response
     */
    public function create()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['promo'])) {
            throw new \InvalidArgumentException('Missing the required parameter $promo when calling create');
        }
        $promo = $input['promo'];


        return response('How about implementing create as a POST method ?');
    }
    /**
     * Operation list
     *
     * .
     *
     *
     * @return Http response
     */
    public function list()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing list as a GET method ?');
    }
    /**
     * Operation listAssignments
     *
     * .
     *
     *
     * @return Http response
     */
    public function listAssignments()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['buyerID'])) {
            throw new \InvalidArgumentException('Missing the required parameter $buyerID when calling listAssignments');
        }
        $buyerID = $input['buyerID'];

        $promotionID = $input['promotionID'];

        $userID = $input['userID'];

        $userGroupID = $input['userGroupID'];

        $level = $input['level'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listAssignments as a GET method ?');
    }
    /**
     * Operation saveAssignment
     *
     * .
     *
     *
     * @return Http response
     */
    public function saveAssignment()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['assignment'])) {
            throw new \InvalidArgumentException('Missing the required parameter $assignment when calling saveAssignment');
        }
        $assignment = $input['assignment'];


        return response('How about implementing saveAssignment as a POST method ?');
    }
    /**
     * Operation delete
     *
     * .
     *
     * @param String $promotionID ID of the promotion. (required)
     *
     * @return Http response
     */
    public function delete($promotionID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing delete as a DELETE method ?');
    }
    /**
     * Operation get
     *
     * .
     *
     * @param String $promotionID ID of the promotion. (required)
     *
     * @return Http response
     */
    public function get($promotionID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing get as a GET method ?');
    }
    /**
     * Operation patch
     *
     * .
     *
     * @param String $promotionID ID of the promotion. (required)
     *
     * @return Http response
     */
    public function patch($promotionID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing patch as a PATCH method ?');
    }
    /**
     * Operation update
     *
     * .
     *
     * @param String $promotionID ID of the promotion. (required)
     *
     * @return Http response
     */
    public function update($promotionID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing update as a PUT method ?');
    }
    /**
     * Operation deleteAssignment
     *
     * .
     *
     * @param String $promotionID ID of the promotion. (required)
     *
     * @return Http response
     */
    public function deleteAssignment($promotionID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteAssignment as a DELETE method ?');
    }
}
