<?php

/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class EmailTemplateApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation get
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $emailTemplateType Email template type of the email template. Possible values: OrderSubmittedForApproval, CustomerOrderSubmitted, OrderToApprove, OrderDeclined, OrderApproved, PriceRequestSubmitted, CustomerOrderShipped, ProductRequiresAttachment, InventoryPointReached, LineItemExceedsInventory, PriceRequestResponse, CustomerOrderUpdated, OrderCanceled, PriceRequestCanceled, NewOrderReceived, ApprovalNotification, EmailLoginVerificationCode. (required)
     *
     * @return Http response
     */
    public function get($buyerID, $emailTemplateType)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing get as a GET method ?');
    }
    /**
     * Operation patch
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $emailTemplateType Email template type of the email template. Possible values: OrderSubmittedForApproval, CustomerOrderSubmitted, OrderToApprove, OrderDeclined, OrderApproved, PriceRequestSubmitted, CustomerOrderShipped, ProductRequiresAttachment, InventoryPointReached, LineItemExceedsInventory, PriceRequestResponse, CustomerOrderUpdated, OrderCanceled, PriceRequestCanceled, NewOrderReceived, ApprovalNotification, EmailLoginVerificationCode. (required)
     *
     * @return Http response
     */
    public function patch($buyerID, $emailTemplateType)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing patch as a PATCH method ?');
    }
    /**
     * Operation resetToDefault
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $emailTemplateType Email template type of the email template. Possible values: OrderSubmittedForApproval, CustomerOrderSubmitted, OrderToApprove, OrderDeclined, OrderApproved, PriceRequestSubmitted, CustomerOrderShipped, ProductRequiresAttachment, InventoryPointReached, LineItemExceedsInventory, PriceRequestResponse, CustomerOrderUpdated, OrderCanceled, PriceRequestCanceled, NewOrderReceived, ApprovalNotification, EmailLoginVerificationCode. (required)
     *
     * @return Http response
     */
    public function resetToDefault($buyerID, $emailTemplateType)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing resetToDefault as a DELETE method ?');
    }
    /**
     * Operation update
     *
     * .
     *
     * @param String $buyerID ID of the buyer. (required)
     * @param String $emailTemplateType Email template type of the email template. Possible values: OrderSubmittedForApproval, CustomerOrderSubmitted, OrderToApprove, OrderDeclined, OrderApproved, PriceRequestSubmitted, CustomerOrderShipped, ProductRequiresAttachment, InventoryPointReached, LineItemExceedsInventory, PriceRequestResponse, CustomerOrderUpdated, OrderCanceled, PriceRequestCanceled, NewOrderReceived, ApprovalNotification, EmailLoginVerificationCode. (required)
     *
     * @return Http response
     */
    public function update($buyerID, $emailTemplateType)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing update as a PUT method ?');
    }
}
