<?php

/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class MeApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation get
     *
     * .
     *
     *
     * @return Http response
     */
    public function get()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing get as a GET method ?');
    }
    /**
     * Operation patch
     *
     * .
     *
     *
     * @return Http response
     */
    public function patch()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['user'])) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling patch');
        }
        $user = $input['user'];


        return response('How about implementing patch as a PATCH method ?');
    }
    /**
     * Operation update
     *
     * .
     *
     *
     * @return Http response
     */
    public function update()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['user'])) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling update');
        }
        $user = $input['user'];


        return response('How about implementing update as a PUT method ?');
    }
    /**
     * Operation createAddress
     *
     * .
     *
     *
     * @return Http response
     */
    public function createAddress()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['address'])) {
            throw new \InvalidArgumentException('Missing the required parameter $address when calling createAddress');
        }
        $address = $input['address'];


        return response('How about implementing createAddress as a POST method ?');
    }
    /**
     * Operation listAddresses
     *
     * .
     *
     *
     * @return Http response
     */
    public function listAddresses()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listAddresses as a GET method ?');
    }
    /**
     * Operation deleteAddress
     *
     * .
     *
     * @param String $addressID ID of the address. (required)
     *
     * @return Http response
     */
    public function deleteAddress($addressID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteAddress as a DELETE method ?');
    }
    /**
     * Operation getAddress
     *
     * .
     *
     * @param String $addressID ID of the address. (required)
     *
     * @return Http response
     */
    public function getAddress($addressID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getAddress as a GET method ?');
    }
    /**
     * Operation patchAddress
     *
     * .
     *
     * @param String $addressID ID of the address. (required)
     *
     * @return Http response
     */
    public function patchAddress($addressID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing patchAddress as a PATCH method ?');
    }
    /**
     * Operation updateAddress
     *
     * .
     *
     * @param String $addressID ID of the address. (required)
     *
     * @return Http response
     */
    public function updateAddress($addressID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateAddress as a PUT method ?');
    }
    /**
     * Operation listCategories
     *
     * .
     *
     *
     * @return Http response
     */
    public function listCategories()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $depth = $input['depth'];

        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listCategories as a GET method ?');
    }
    /**
     * Operation listSubcategories
     *
     * .
     *
     * @param String $parentID ID of the parent. (required)
     *
     * @return Http response
     */
    public function listSubcategories($parentID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listSubcategories as a GET method ?');
    }
    /**
     * Operation listCostCenters
     *
     * .
     *
     *
     * @return Http response
     */
    public function listCostCenters()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listCostCenters as a GET method ?');
    }
    /**
     * Operation createCreditCard
     *
     * .
     *
     *
     * @return Http response
     */
    public function createCreditCard()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['creditCard'])) {
            throw new \InvalidArgumentException('Missing the required parameter $creditCard when calling createCreditCard');
        }
        $creditCard = $input['creditCard'];


        return response('How about implementing createCreditCard as a POST method ?');
    }
    /**
     * Operation listCreditCards
     *
     * .
     *
     *
     * @return Http response
     */
    public function listCreditCards()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listCreditCards as a GET method ?');
    }
    /**
     * Operation deleteCreditCard
     *
     * .
     *
     * @param String $creditcardID ID of the creditcard. (required)
     *
     * @return Http response
     */
    public function deleteCreditCard($creditcardID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteCreditCard as a DELETE method ?');
    }
    /**
     * Operation getCreditCard
     *
     * .
     *
     * @param String $creditcardID ID of the creditcard. (required)
     *
     * @return Http response
     */
    public function getCreditCard($creditcardID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getCreditCard as a GET method ?');
    }
    /**
     * Operation patchCreditCard
     *
     * .
     *
     * @param String $creditcardID ID of the creditcard. (required)
     *
     * @return Http response
     */
    public function patchCreditCard($creditcardID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing patchCreditCard as a PATCH method ?');
    }
    /**
     * Operation updateCreditCard
     *
     * .
     *
     * @param String $creditcardID ID of the creditcard. (required)
     *
     * @return Http response
     */
    public function updateCreditCard($creditcardID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateCreditCard as a PUT method ?');
    }
    /**
     * Operation listIncomingOrders
     *
     * .
     *
     *
     * @return Http response
     */
    public function listIncomingOrders()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $from = $input['from'];

        $to = $input['to'];

        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listIncomingOrders as a GET method ?');
    }
    /**
     * Operation listOutgoingOrders
     *
     * .
     *
     *
     * @return Http response
     */
    public function listOutgoingOrders()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $from = $input['from'];

        $to = $input['to'];

        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listOutgoingOrders as a GET method ?');
    }
    /**
     * Operation getOrder
     *
     * .
     *
     * @param String $orderID ID of the order. (required)
     *
     * @return Http response
     */
    public function getOrder($orderID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getOrder as a GET method ?');
    }
    /**
     * Operation listProducts
     *
     * .
     *
     *
     * @return Http response
     */
    public function listProducts()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $categoryID = $input['categoryID'];

        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listProducts as a GET method ?');
    }
    /**
     * Operation getProduct
     *
     * .
     *
     * @param String $productID ID of the product. (required)
     *
     * @return Http response
     */
    public function getProduct($productID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getProduct as a GET method ?');
    }
    /**
     * Operation listSpecs
     *
     * .
     *
     * @param String $productID ID of the product. (required)
     *
     * @return Http response
     */
    public function listSpecs($productID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listSpecs as a GET method ?');
    }
    /**
     * Operation getSpec
     *
     * .
     *
     * @param String $productID ID of the product. (required)
     * @param String $specID ID of the spec. (required)
     *
     * @return Http response
     */
    public function getSpec($productID, $specID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getSpec as a GET method ?');
    }
    /**
     * Operation listPromotions
     *
     * .
     *
     *
     * @return Http response
     */
    public function listPromotions()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listPromotions as a GET method ?');
    }
    /**
     * Operation getPromotion
     *
     * .
     *
     * @param String $promotionID ID of the promotion. (required)
     *
     * @return Http response
     */
    public function getPromotion($promotionID)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getPromotion as a GET method ?');
    }
    /**
     * Operation listUserGroups
     *
     * .
     *
     *
     * @return Http response
     */
    public function listUserGroups()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $search = $input['search'];

        $searchOn = $input['searchOn'];

        $sortBy = $input['sortBy'];

        $page = $input['page'];

        $pageSize = $input['pageSize'];


        return response('How about implementing listUserGroups as a GET method ?');
    }
}
