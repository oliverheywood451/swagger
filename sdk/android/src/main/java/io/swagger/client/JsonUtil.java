/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Address".equalsIgnoreCase(className)) {
      return new TypeToken<List<Address>>(){}.getType();
    }
    
    if ("AddressAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<List<AddressAssignment>>(){}.getType();
    }
    
    if ("ApprovalRule".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApprovalRule>>(){}.getType();
    }
    
    if ("Buyer".equalsIgnoreCase(className)) {
      return new TypeToken<List<Buyer>>(){}.getType();
    }
    
    if ("BuyerAddress".equalsIgnoreCase(className)) {
      return new TypeToken<List<BuyerAddress>>(){}.getType();
    }
    
    if ("BuyerCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<List<BuyerCreditCard>>(){}.getType();
    }
    
    if ("Category".equalsIgnoreCase(className)) {
      return new TypeToken<List<Category>>(){}.getType();
    }
    
    if ("CategoryAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<List<CategoryAssignment>>(){}.getType();
    }
    
    if ("CategoryProductAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<List<CategoryProductAssignment>>(){}.getType();
    }
    
    if ("CostCenter".equalsIgnoreCase(className)) {
      return new TypeToken<List<CostCenter>>(){}.getType();
    }
    
    if ("CostCenterAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<List<CostCenterAssignment>>(){}.getType();
    }
    
    if ("CreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreditCard>>(){}.getType();
    }
    
    if ("CreditCardAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreditCardAssignment>>(){}.getType();
    }
    
    if ("EmailTemplate".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmailTemplate>>(){}.getType();
    }
    
    if ("ImpersonateTokenRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<ImpersonateTokenRequest>>(){}.getType();
    }
    
    if ("LineItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<LineItem>>(){}.getType();
    }
    
    if ("Order".equalsIgnoreCase(className)) {
      return new TypeToken<List<Order>>(){}.getType();
    }
    
    if ("Partial1".equalsIgnoreCase(className)) {
      return new TypeToken<List<Partial1>>(){}.getType();
    }
    
    if ("PasswordReset".equalsIgnoreCase(className)) {
      return new TypeToken<List<PasswordReset>>(){}.getType();
    }
    
    if ("PasswordResetRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<PasswordResetRequest>>(){}.getType();
    }
    
    if ("Payment".equalsIgnoreCase(className)) {
      return new TypeToken<List<Payment>>(){}.getType();
    }
    
    if ("PaymentTransaction".equalsIgnoreCase(className)) {
      return new TypeToken<List<PaymentTransaction>>(){}.getType();
    }
    
    if ("PriceBreak".equalsIgnoreCase(className)) {
      return new TypeToken<List<PriceBreak>>(){}.getType();
    }
    
    if ("PriceSchedule".equalsIgnoreCase(className)) {
      return new TypeToken<List<PriceSchedule>>(){}.getType();
    }
    
    if ("Product".equalsIgnoreCase(className)) {
      return new TypeToken<List<Product>>(){}.getType();
    }
    
    if ("ProductAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProductAssignment>>(){}.getType();
    }
    
    if ("Promotion".equalsIgnoreCase(className)) {
      return new TypeToken<List<Promotion>>(){}.getType();
    }
    
    if ("PromotionAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<List<PromotionAssignment>>(){}.getType();
    }
    
    if ("Shipment".equalsIgnoreCase(className)) {
      return new TypeToken<List<Shipment>>(){}.getType();
    }
    
    if ("ShipmentItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<ShipmentItem>>(){}.getType();
    }
    
    if ("Spec".equalsIgnoreCase(className)) {
      return new TypeToken<List<Spec>>(){}.getType();
    }
    
    if ("SpecOption".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpecOption>>(){}.getType();
    }
    
    if ("SpecProductAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpecProductAssignment>>(){}.getType();
    }
    
    if ("SpendingAccount".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpendingAccount>>(){}.getType();
    }
    
    if ("SpendingAccountAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpendingAccountAssignment>>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<List<User>>(){}.getType();
    }
    
    if ("UserGroup".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserGroup>>(){}.getType();
    }
    
    if ("UserGroupAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserGroupAssignment>>(){}.getType();
    }
    
    if ("Variant".equalsIgnoreCase(className)) {
      return new TypeToken<List<Variant>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Address".equalsIgnoreCase(className)) {
      return new TypeToken<Address>(){}.getType();
    }
    
    if ("AddressAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<AddressAssignment>(){}.getType();
    }
    
    if ("ApprovalRule".equalsIgnoreCase(className)) {
      return new TypeToken<ApprovalRule>(){}.getType();
    }
    
    if ("Buyer".equalsIgnoreCase(className)) {
      return new TypeToken<Buyer>(){}.getType();
    }
    
    if ("BuyerAddress".equalsIgnoreCase(className)) {
      return new TypeToken<BuyerAddress>(){}.getType();
    }
    
    if ("BuyerCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<BuyerCreditCard>(){}.getType();
    }
    
    if ("Category".equalsIgnoreCase(className)) {
      return new TypeToken<Category>(){}.getType();
    }
    
    if ("CategoryAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<CategoryAssignment>(){}.getType();
    }
    
    if ("CategoryProductAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<CategoryProductAssignment>(){}.getType();
    }
    
    if ("CostCenter".equalsIgnoreCase(className)) {
      return new TypeToken<CostCenter>(){}.getType();
    }
    
    if ("CostCenterAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<CostCenterAssignment>(){}.getType();
    }
    
    if ("CreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<CreditCard>(){}.getType();
    }
    
    if ("CreditCardAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<CreditCardAssignment>(){}.getType();
    }
    
    if ("EmailTemplate".equalsIgnoreCase(className)) {
      return new TypeToken<EmailTemplate>(){}.getType();
    }
    
    if ("ImpersonateTokenRequest".equalsIgnoreCase(className)) {
      return new TypeToken<ImpersonateTokenRequest>(){}.getType();
    }
    
    if ("LineItem".equalsIgnoreCase(className)) {
      return new TypeToken<LineItem>(){}.getType();
    }
    
    if ("Order".equalsIgnoreCase(className)) {
      return new TypeToken<Order>(){}.getType();
    }
    
    if ("Partial1".equalsIgnoreCase(className)) {
      return new TypeToken<Partial1>(){}.getType();
    }
    
    if ("PasswordReset".equalsIgnoreCase(className)) {
      return new TypeToken<PasswordReset>(){}.getType();
    }
    
    if ("PasswordResetRequest".equalsIgnoreCase(className)) {
      return new TypeToken<PasswordResetRequest>(){}.getType();
    }
    
    if ("Payment".equalsIgnoreCase(className)) {
      return new TypeToken<Payment>(){}.getType();
    }
    
    if ("PaymentTransaction".equalsIgnoreCase(className)) {
      return new TypeToken<PaymentTransaction>(){}.getType();
    }
    
    if ("PriceBreak".equalsIgnoreCase(className)) {
      return new TypeToken<PriceBreak>(){}.getType();
    }
    
    if ("PriceSchedule".equalsIgnoreCase(className)) {
      return new TypeToken<PriceSchedule>(){}.getType();
    }
    
    if ("Product".equalsIgnoreCase(className)) {
      return new TypeToken<Product>(){}.getType();
    }
    
    if ("ProductAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<ProductAssignment>(){}.getType();
    }
    
    if ("Promotion".equalsIgnoreCase(className)) {
      return new TypeToken<Promotion>(){}.getType();
    }
    
    if ("PromotionAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<PromotionAssignment>(){}.getType();
    }
    
    if ("Shipment".equalsIgnoreCase(className)) {
      return new TypeToken<Shipment>(){}.getType();
    }
    
    if ("ShipmentItem".equalsIgnoreCase(className)) {
      return new TypeToken<ShipmentItem>(){}.getType();
    }
    
    if ("Spec".equalsIgnoreCase(className)) {
      return new TypeToken<Spec>(){}.getType();
    }
    
    if ("SpecOption".equalsIgnoreCase(className)) {
      return new TypeToken<SpecOption>(){}.getType();
    }
    
    if ("SpecProductAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<SpecProductAssignment>(){}.getType();
    }
    
    if ("SpendingAccount".equalsIgnoreCase(className)) {
      return new TypeToken<SpendingAccount>(){}.getType();
    }
    
    if ("SpendingAccountAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<SpendingAccountAssignment>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<User>(){}.getType();
    }
    
    if ("UserGroup".equalsIgnoreCase(className)) {
      return new TypeToken<UserGroup>(){}.getType();
    }
    
    if ("UserGroupAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<UserGroupAssignment>(){}.getType();
    }
    
    if ("Variant".equalsIgnoreCase(className)) {
      return new TypeToken<Variant>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
