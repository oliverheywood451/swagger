/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.PriceSchedule;
import io.swagger.client.model.PriceBreak;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class PriceScheduleApi {
  String basePath = "https://api.ordercloud.io/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * 
   * @param priceSchedule 
   * @return Object
  */
  public Object create (PriceSchedule priceSchedule) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = priceSchedule;
  
      // verify the required parameter 'priceSchedule' is set
      if (priceSchedule == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceSchedule' when calling create",
      new ApiException(400, "Missing the required parameter 'priceSchedule' when calling create"));
      }
  

  // create path and map variables
  String path = "/priceschedules".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] { "auth" };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * 
   * @param priceSchedule 
  */
  public void create (PriceSchedule priceSchedule, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = priceSchedule;

  
    // verify the required parameter 'priceSchedule' is set
    if (priceSchedule == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'priceSchedule' when calling create",
         new ApiException(400, "Missing the required parameter 'priceSchedule' when calling create"));
    }
    

    // create path and map variables
    String path = "/priceschedules".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param priceScheduleID ID of the price schedule.
   * @return void
  */
  public void delete (String priceScheduleID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'priceScheduleID' is set
      if (priceScheduleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling delete",
      new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling delete"));
      }
  

  // create path and map variables
  String path = "/priceschedules/{priceScheduleID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] { "auth" };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return ;
        } else {
           return ;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * 
   * @param priceScheduleID ID of the price schedule.
  */
  public void delete (String priceScheduleID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'priceScheduleID' is set
    if (priceScheduleID == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling delete",
         new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling delete"));
    }
    

    // create path and map variables
    String path = "/priceschedules/{priceScheduleID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param priceScheduleID ID of the price schedule.
   * @param quantity Quantity of the price schedule.
   * @return void
  */
  public void deletePriceBreak (String priceScheduleID, Integer quantity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'priceScheduleID' is set
      if (priceScheduleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling deletePriceBreak",
      new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling deletePriceBreak"));
      }
  
      // verify the required parameter 'quantity' is set
      if (quantity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'quantity' when calling deletePriceBreak",
      new ApiException(400, "Missing the required parameter 'quantity' when calling deletePriceBreak"));
      }
  

  // create path and map variables
  String path = "/priceschedules/{priceScheduleID}/PriceBreaks".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "quantity", quantity));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] { "auth" };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return ;
        } else {
           return ;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * 
   * @param priceScheduleID ID of the price schedule.   * @param quantity Quantity of the price schedule.
  */
  public void deletePriceBreak (String priceScheduleID, Integer quantity, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'priceScheduleID' is set
    if (priceScheduleID == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling deletePriceBreak",
         new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling deletePriceBreak"));
    }
    
    // verify the required parameter 'quantity' is set
    if (quantity == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'quantity' when calling deletePriceBreak",
         new ApiException(400, "Missing the required parameter 'quantity' when calling deletePriceBreak"));
    }
    

    // create path and map variables
    String path = "/priceschedules/{priceScheduleID}/PriceBreaks".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "quantity", quantity));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param priceScheduleID ID of the price schedule.
   * @return Object
  */
  public Object get (String priceScheduleID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'priceScheduleID' is set
      if (priceScheduleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling get",
      new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling get"));
      }
  

  // create path and map variables
  String path = "/priceschedules/{priceScheduleID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] { "auth" };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * 
   * @param priceScheduleID ID of the price schedule.
  */
  public void get (String priceScheduleID, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'priceScheduleID' is set
    if (priceScheduleID == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling get",
         new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling get"));
    }
    

    // create path and map variables
    String path = "/priceschedules/{priceScheduleID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   * @return Object
  */
  public Object list (String search, String searchOn, String sortBy, Integer page, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/priceschedules".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "searchOn", searchOn));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "sortBy", sortBy));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] { "auth" };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * 
   * @param search Word or phrase to search for.   * @param searchOn Comma-delimited list of fields to search on.   * @param sortBy Comma-delimited list of fields to sort by.   * @param page Page of results to return. Default: 1   * @param pageSize Number of results to return per page. Default: 20, max: 100.
  */
  public void list (String search, String searchOn, String sortBy, Integer page, Integer pageSize, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/priceschedules".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "searchOn", searchOn));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortBy", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param priceScheduleID ID of the price schedule.
   * @param priceSchedule 
   * @return Object
  */
  public Object patch (String priceScheduleID, PriceSchedule priceSchedule) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = priceSchedule;
  
      // verify the required parameter 'priceScheduleID' is set
      if (priceScheduleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling patch",
      new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling patch"));
      }
  
      // verify the required parameter 'priceSchedule' is set
      if (priceSchedule == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceSchedule' when calling patch",
      new ApiException(400, "Missing the required parameter 'priceSchedule' when calling patch"));
      }
  

  // create path and map variables
  String path = "/priceschedules/{priceScheduleID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] { "auth" };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * 
   * @param priceScheduleID ID of the price schedule.   * @param priceSchedule 
  */
  public void patch (String priceScheduleID, PriceSchedule priceSchedule, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = priceSchedule;

  
    // verify the required parameter 'priceScheduleID' is set
    if (priceScheduleID == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling patch",
         new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling patch"));
    }
    
    // verify the required parameter 'priceSchedule' is set
    if (priceSchedule == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'priceSchedule' when calling patch",
         new ApiException(400, "Missing the required parameter 'priceSchedule' when calling patch"));
    }
    

    // create path and map variables
    String path = "/priceschedules/{priceScheduleID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param priceScheduleID ID of the price schedule.
   * @param priceBreak 
   * @return Object
  */
  public Object savePriceBreak (String priceScheduleID, PriceBreak priceBreak) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = priceBreak;
  
      // verify the required parameter 'priceScheduleID' is set
      if (priceScheduleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling savePriceBreak",
      new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling savePriceBreak"));
      }
  
      // verify the required parameter 'priceBreak' is set
      if (priceBreak == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceBreak' when calling savePriceBreak",
      new ApiException(400, "Missing the required parameter 'priceBreak' when calling savePriceBreak"));
      }
  

  // create path and map variables
  String path = "/priceschedules/{priceScheduleID}/PriceBreaks".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] { "auth" };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * 
   * @param priceScheduleID ID of the price schedule.   * @param priceBreak 
  */
  public void savePriceBreak (String priceScheduleID, PriceBreak priceBreak, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = priceBreak;

  
    // verify the required parameter 'priceScheduleID' is set
    if (priceScheduleID == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling savePriceBreak",
         new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling savePriceBreak"));
    }
    
    // verify the required parameter 'priceBreak' is set
    if (priceBreak == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'priceBreak' when calling savePriceBreak",
         new ApiException(400, "Missing the required parameter 'priceBreak' when calling savePriceBreak"));
    }
    

    // create path and map variables
    String path = "/priceschedules/{priceScheduleID}/PriceBreaks".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param priceScheduleID ID of the price schedule.
   * @param priceSchedule 
   * @return Object
  */
  public Object update (String priceScheduleID, PriceSchedule priceSchedule) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = priceSchedule;
  
      // verify the required parameter 'priceScheduleID' is set
      if (priceScheduleID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling update",
      new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling update"));
      }
  
      // verify the required parameter 'priceSchedule' is set
      if (priceSchedule == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'priceSchedule' when calling update",
      new ApiException(400, "Missing the required parameter 'priceSchedule' when calling update"));
      }
  

  // create path and map variables
  String path = "/priceschedules/{priceScheduleID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] { "auth" };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * 
   * @param priceScheduleID ID of the price schedule.   * @param priceSchedule 
  */
  public void update (String priceScheduleID, PriceSchedule priceSchedule, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = priceSchedule;

  
    // verify the required parameter 'priceScheduleID' is set
    if (priceScheduleID == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'priceScheduleID' when calling update",
         new ApiException(400, "Missing the required parameter 'priceScheduleID' when calling update"));
    }
    
    // verify the required parameter 'priceSchedule' is set
    if (priceSchedule == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'priceSchedule' when calling update",
         new ApiException(400, "Missing the required parameter 'priceSchedule' when calling update"));
    }
    

    // create path and map variables
    String path = "/priceschedules/{priceScheduleID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "priceScheduleID" + "\\}", apiInvoker.escapeString(priceScheduleID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
