/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class MeApi {
        protected basePath = 'https://api.ordercloud.io/v1';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * 
         * 
         * @param address 
         */
        public createAddress (address: BuyerAddress, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/addresses';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new Error('Required parameter address was null or undefined when calling createAddress.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: address,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param creditCard 
         */
        public createCreditCard (creditCard: BuyerCreditCard, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/creditcards';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'creditCard' is not null or undefined
            if (creditCard === null || creditCard === undefined) {
                throw new Error('Required parameter creditCard was null or undefined when calling createCreditCard.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: creditCard,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param addressID ID of the address.
         */
        public deleteAddress (addressID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/me/addresses/{addressID}'
                .replace('{' + 'addressID' + '}', String(addressID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'addressID' is not null or undefined
            if (addressID === null || addressID === undefined) {
                throw new Error('Required parameter addressID was null or undefined when calling deleteAddress.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param creditcardID ID of the creditcard.
         */
        public deleteCreditCard (creditcardID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/me/creditcards/{creditcardID}'
                .replace('{' + 'creditcardID' + '}', String(creditcardID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'creditcardID' is not null or undefined
            if (creditcardID === null || creditcardID === undefined) {
                throw new Error('Required parameter creditcardID was null or undefined when calling deleteCreditCard.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         */
        public get (extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param addressID ID of the address.
         */
        public getAddress (addressID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/addresses/{addressID}'
                .replace('{' + 'addressID' + '}', String(addressID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'addressID' is not null or undefined
            if (addressID === null || addressID === undefined) {
                throw new Error('Required parameter addressID was null or undefined when calling getAddress.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param creditcardID ID of the creditcard.
         */
        public getCreditCard (creditcardID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/creditcards/{creditcardID}'
                .replace('{' + 'creditcardID' + '}', String(creditcardID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'creditcardID' is not null or undefined
            if (creditcardID === null || creditcardID === undefined) {
                throw new Error('Required parameter creditcardID was null or undefined when calling getCreditCard.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param orderID ID of the order.
         */
        public getOrder (orderID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/orders/{orderID}'
                .replace('{' + 'orderID' + '}', String(orderID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'orderID' is not null or undefined
            if (orderID === null || orderID === undefined) {
                throw new Error('Required parameter orderID was null or undefined when calling getOrder.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         */
        public getProduct (productID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/products/{productID}'
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling getProduct.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param promotionID ID of the promotion.
         */
        public getPromotion (promotionID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/promotions/{promotionID}'
                .replace('{' + 'promotionID' + '}', String(promotionID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'promotionID' is not null or undefined
            if (promotionID === null || promotionID === undefined) {
                throw new Error('Required parameter promotionID was null or undefined when calling getPromotion.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param specID ID of the spec.
         */
        public getSpec (productID: string, specID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/products/{productID}/specs/{specID}'
                .replace('{' + 'productID' + '}', String(productID))
                .replace('{' + 'specID' + '}', String(specID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling getSpec.');
            }
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling getSpec.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listAddresses (search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/addresses';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param depth Depth of the category.
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listCategories (depth?: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/categories';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (depth !== undefined) {
                queryParameters['depth'] = depth;
            }

            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listCostCenters (search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/costcenters';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listCreditCards (search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/creditcards';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param from Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
         * @param to Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listIncomingOrders (from?: string, to?: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/orders/incoming';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (from !== undefined) {
                queryParameters['from'] = from;
            }

            if (to !== undefined) {
                queryParameters['to'] = to;
            }

            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param from Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
         * @param to Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listOutgoingOrders (from?: string, to?: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/orders/outgoing';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (from !== undefined) {
                queryParameters['from'] = from;
            }

            if (to !== undefined) {
                queryParameters['to'] = to;
            }

            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param categoryID ID of the category.
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listProducts (categoryID?: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/products';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (categoryID !== undefined) {
                queryParameters['categoryID'] = categoryID;
            }

            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listPromotions (search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/promotions';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listSpecs (productID: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/products/{productID}/specs'
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling listSpecs.');
            }
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param parentID ID of the parent.
         * @param depth Depth of the category.
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listSubcategories (parentID: string, depth?: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/categories/{parentID}/categories'
                .replace('{' + 'parentID' + '}', String(parentID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'parentID' is not null or undefined
            if (parentID === null || parentID === undefined) {
                throw new Error('Required parameter parentID was null or undefined when calling listSubcategories.');
            }
            if (depth !== undefined) {
                queryParameters['depth'] = depth;
            }

            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listUserGroups (search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/usergroups';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param user 
         */
        public patch (user: User, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new Error('Required parameter user was null or undefined when calling patch.');
            }
            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: true,
                data: user,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param addressID ID of the address.
         * @param address 
         */
        public patchAddress (addressID: string, address: BuyerAddress, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/me/addresses/{addressID}'
                .replace('{' + 'addressID' + '}', String(addressID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'addressID' is not null or undefined
            if (addressID === null || addressID === undefined) {
                throw new Error('Required parameter addressID was null or undefined when calling patchAddress.');
            }
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new Error('Required parameter address was null or undefined when calling patchAddress.');
            }
            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: true,
                data: address,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param creditcardID ID of the creditcard.
         * @param creditCard 
         */
        public patchCreditCard (creditcardID: string, creditCard: BuyerCreditCard, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/me/creditcards/{creditcardID}'
                .replace('{' + 'creditcardID' + '}', String(creditcardID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'creditcardID' is not null or undefined
            if (creditcardID === null || creditcardID === undefined) {
                throw new Error('Required parameter creditcardID was null or undefined when calling patchCreditCard.');
            }
            // verify required parameter 'creditCard' is not null or undefined
            if (creditCard === null || creditCard === undefined) {
                throw new Error('Required parameter creditCard was null or undefined when calling patchCreditCard.');
            }
            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: true,
                data: creditCard,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param user 
         */
        public update (user: User, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new Error('Required parameter user was null or undefined when calling update.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: user,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param addressID ID of the address.
         * @param address 
         */
        public updateAddress (addressID: string, address: BuyerAddress, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/addresses/{addressID}'
                .replace('{' + 'addressID' + '}', String(addressID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'addressID' is not null or undefined
            if (addressID === null || addressID === undefined) {
                throw new Error('Required parameter addressID was null or undefined when calling updateAddress.');
            }
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new Error('Required parameter address was null or undefined when calling updateAddress.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: address,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param creditcardID ID of the creditcard.
         * @param creditCard 
         */
        public updateCreditCard (creditcardID: string, creditCard: BuyerCreditCard, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/me/creditcards/{creditcardID}'
                .replace('{' + 'creditcardID' + '}', String(creditcardID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'creditcardID' is not null or undefined
            if (creditcardID === null || creditcardID === undefined) {
                throw new Error('Required parameter creditcardID was null or undefined when calling updateCreditCard.');
            }
            // verify required parameter 'creditCard' is not null or undefined
            if (creditCard === null || creditCard === undefined) {
                throw new Error('Required parameter creditCard was null or undefined when calling updateCreditCard.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: creditCard,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
