/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class ProductApi {
        protected basePath = 'https://api.ordercloud.io/v1';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * 
         * 
         * @param productID ID of the product.
         */
        public _delete (productID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/products/{productID}'
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling _delete.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param product 
         */
        public create (product: Product, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new Error('Required parameter product was null or undefined when calling create.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: product,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param buyerID ID of the buyer.
         * @param productID ID of the product.
         * @param userID ID of the user.
         * @param userGroupID ID of the user group.
         */
        public deleteAssignment (buyerID: string, productID: string, userID?: string, userGroupID?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/products/{productID}/assignments/{buyerID}'
                .replace('{' + 'buyerID' + '}', String(buyerID))
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'buyerID' is not null or undefined
            if (buyerID === null || buyerID === undefined) {
                throw new Error('Required parameter buyerID was null or undefined when calling deleteAssignment.');
            }
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling deleteAssignment.');
            }
            if (userID !== undefined) {
                queryParameters['userID'] = userID;
            }

            if (userGroupID !== undefined) {
                queryParameters['userGroupID'] = userGroupID;
            }

            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param overwriteExisting Overwrite existing of the product.
         */
        public generateVariants (productID: string, overwriteExisting?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}/variants/generate'
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling generateVariants.');
            }
            if (overwriteExisting !== undefined) {
                queryParameters['overwriteExisting'] = overwriteExisting;
            }

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         */
        public get (productID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}'
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling get.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         */
        public getInventory (productID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}/inventory'
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling getInventory.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param variantID ID of the variant.
         */
        public getVariant (productID: string, variantID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}/variants/{variantID}'
                .replace('{' + 'productID' + '}', String(productID))
                .replace('{' + 'variantID' + '}', String(variantID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling getVariant.');
            }
            // verify required parameter 'variantID' is not null or undefined
            if (variantID === null || variantID === undefined) {
                throw new Error('Required parameter variantID was null or undefined when calling getVariant.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param variantID ID of the variant.
         */
        public getVariantInventory (productID: string, variantID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}/variants/inventory/{variantID}'
                .replace('{' + 'productID' + '}', String(productID))
                .replace('{' + 'variantID' + '}', String(variantID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling getVariantInventory.');
            }
            // verify required parameter 'variantID' is not null or undefined
            if (variantID === null || variantID === undefined) {
                throw new Error('Required parameter variantID was null or undefined when calling getVariantInventory.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public list (search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param buyerID ID of the buyer.
         * @param userID ID of the user.
         * @param userGroupID ID of the user group.
         * @param level Level of the product.
         * @param priceScheduleID ID of the price schedule.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listAssignments (productID?: string, buyerID?: string, userID?: string, userGroupID?: string, level?: string, priceScheduleID?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/assignments';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (productID !== undefined) {
                queryParameters['productID'] = productID;
            }

            if (buyerID !== undefined) {
                queryParameters['buyerID'] = buyerID;
            }

            if (userID !== undefined) {
                queryParameters['userID'] = userID;
            }

            if (userGroupID !== undefined) {
                queryParameters['userGroupID'] = userGroupID;
            }

            if (level !== undefined) {
                queryParameters['level'] = level;
            }

            if (priceScheduleID !== undefined) {
                queryParameters['priceScheduleID'] = priceScheduleID;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listInventory (search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/inventory';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listVariantInventory (productID: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}/variants/inventory'
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling listVariantInventory.');
            }
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listVariants (productID: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}/variants'
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling listVariants.');
            }
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param product 
         */
        public patch (productID: string, product: Product, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/products/{productID}'
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling patch.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new Error('Required parameter product was null or undefined when calling patch.');
            }
            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: true,
                data: product,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param variantID ID of the variant.
         * @param variant 
         */
        public patchVariant (productID: string, variantID: string, variant: Variant, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}/variants/{variantID}'
                .replace('{' + 'productID' + '}', String(productID))
                .replace('{' + 'variantID' + '}', String(variantID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling patchVariant.');
            }
            // verify required parameter 'variantID' is not null or undefined
            if (variantID === null || variantID === undefined) {
                throw new Error('Required parameter variantID was null or undefined when calling patchVariant.');
            }
            // verify required parameter 'variant' is not null or undefined
            if (variant === null || variant === undefined) {
                throw new Error('Required parameter variant was null or undefined when calling patchVariant.');
            }
            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: true,
                data: variant,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productAssignment 
         */
        public saveAssignment (productAssignment: ProductAssignment, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/products/assignments';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productAssignment' is not null or undefined
            if (productAssignment === null || productAssignment === undefined) {
                throw new Error('Required parameter productAssignment was null or undefined when calling saveAssignment.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: productAssignment,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param product 
         */
        public update (productID: string, product: Product, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}'
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling update.');
            }
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new Error('Required parameter product was null or undefined when calling update.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: product,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param inventory Inventory of the product.
         */
        public updateInventory (productID: string, inventory: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}/inventory/{inventory}'
                .replace('{' + 'productID' + '}', String(productID))
                .replace('{' + 'inventory' + '}', String(inventory));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling updateInventory.');
            }
            // verify required parameter 'inventory' is not null or undefined
            if (inventory === null || inventory === undefined) {
                throw new Error('Required parameter inventory was null or undefined when calling updateInventory.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param variantID ID of the variant.
         * @param variant 
         */
        public updateVariant (productID: string, variantID: string, variant: Variant, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}/variants/{variantID}'
                .replace('{' + 'productID' + '}', String(productID))
                .replace('{' + 'variantID' + '}', String(variantID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling updateVariant.');
            }
            // verify required parameter 'variantID' is not null or undefined
            if (variantID === null || variantID === undefined) {
                throw new Error('Required parameter variantID was null or undefined when calling updateVariant.');
            }
            // verify required parameter 'variant' is not null or undefined
            if (variant === null || variant === undefined) {
                throw new Error('Required parameter variant was null or undefined when calling updateVariant.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: variant,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productID ID of the product.
         * @param variantID ID of the variant.
         * @param inventory Inventory of the product.
         */
        public updateVariantInventory (productID: string, variantID: string, inventory: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/products/{productID}/variants/inventory/{variantID}/{inventory}'
                .replace('{' + 'productID' + '}', String(productID))
                .replace('{' + 'variantID' + '}', String(variantID))
                .replace('{' + 'inventory' + '}', String(inventory));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling updateVariantInventory.');
            }
            // verify required parameter 'variantID' is not null or undefined
            if (variantID === null || variantID === undefined) {
                throw new Error('Required parameter variantID was null or undefined when calling updateVariantInventory.');
            }
            // verify required parameter 'inventory' is not null or undefined
            if (inventory === null || inventory === undefined) {
                throw new Error('Required parameter inventory was null or undefined when calling updateVariantInventory.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
