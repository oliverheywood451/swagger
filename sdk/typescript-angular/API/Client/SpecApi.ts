/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class SpecApi {
        protected basePath = 'https://api.ordercloud.io/v1';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * 
         * 
         * @param specID ID of the spec.
         */
        public _delete (specID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/specs/{specID}'
                .replace('{' + 'specID' + '}', String(specID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling _delete.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param spec 
         */
        public create (spec: Spec, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/specs';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'spec' is not null or undefined
            if (spec === null || spec === undefined) {
                throw new Error('Required parameter spec was null or undefined when calling create.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: spec,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param specID ID of the spec.
         * @param option 
         */
        public createOption (specID: string, option: SpecOption, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/specs/{specID}/options'
                .replace('{' + 'specID' + '}', String(specID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling createOption.');
            }
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new Error('Required parameter option was null or undefined when calling createOption.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: option,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param specID ID of the spec.
         * @param optionID ID of the option.
         */
        public deleteOption (specID: string, optionID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/specs/{specID}/options/{optionID}'
                .replace('{' + 'specID' + '}', String(specID))
                .replace('{' + 'optionID' + '}', String(optionID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling deleteOption.');
            }
            // verify required parameter 'optionID' is not null or undefined
            if (optionID === null || optionID === undefined) {
                throw new Error('Required parameter optionID was null or undefined when calling deleteOption.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param specID ID of the spec.
         * @param productID ID of the product.
         */
        public deleteProductAssignment (specID: string, productID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/specs/{specID}/productassignments/{productID}'
                .replace('{' + 'specID' + '}', String(specID))
                .replace('{' + 'productID' + '}', String(productID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling deleteProductAssignment.');
            }
            // verify required parameter 'productID' is not null or undefined
            if (productID === null || productID === undefined) {
                throw new Error('Required parameter productID was null or undefined when calling deleteProductAssignment.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param specID ID of the spec.
         */
        public get (specID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/specs/{specID}'
                .replace('{' + 'specID' + '}', String(specID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling get.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param specID ID of the spec.
         * @param optionID ID of the option.
         */
        public getOption (specID: string, optionID: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/specs/{specID}/options/{optionID}'
                .replace('{' + 'specID' + '}', String(specID))
                .replace('{' + 'optionID' + '}', String(optionID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling getOption.');
            }
            // verify required parameter 'optionID' is not null or undefined
            if (optionID === null || optionID === undefined) {
                throw new Error('Required parameter optionID was null or undefined when calling getOption.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public list (search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/specs';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param specID ID of the spec.
         * @param search Word or phrase to search for.
         * @param searchOn Comma-delimited list of fields to search on.
         * @param sortBy Comma-delimited list of fields to sort by.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listOptions (specID: string, search?: string, searchOn?: string, sortBy?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/specs/{specID}/options'
                .replace('{' + 'specID' + '}', String(specID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling listOptions.');
            }
            if (search !== undefined) {
                queryParameters['search'] = search;
            }

            if (searchOn !== undefined) {
                queryParameters['searchOn'] = searchOn;
            }

            if (sortBy !== undefined) {
                queryParameters['sortBy'] = sortBy;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param specID ID of the spec.
         * @param productID ID of the product.
         * @param page Page of results to return. Default: 1
         * @param pageSize Number of results to return per page. Default: 20, max: 100.
         */
        public listProductAssignments (specID?: string, productID?: string, page?: number, pageSize?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/specs/productassignments';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (specID !== undefined) {
                queryParameters['specID'] = specID;
            }

            if (productID !== undefined) {
                queryParameters['productID'] = productID;
            }

            if (page !== undefined) {
                queryParameters['page'] = page;
            }

            if (pageSize !== undefined) {
                queryParameters['pageSize'] = pageSize;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param specID ID of the spec.
         * @param spec 
         */
        public patch (specID: string, spec: Spec, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/specs/{specID}'
                .replace('{' + 'specID' + '}', String(specID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling patch.');
            }
            // verify required parameter 'spec' is not null or undefined
            if (spec === null || spec === undefined) {
                throw new Error('Required parameter spec was null or undefined when calling patch.');
            }
            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: true,
                data: spec,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param specID ID of the spec.
         * @param optionID ID of the option.
         * @param option 
         */
        public patchOption (specID: string, optionID: string, option: SpecOption, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/specs/{specID}/options/{optionID}'
                .replace('{' + 'specID' + '}', String(specID))
                .replace('{' + 'optionID' + '}', String(optionID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling patchOption.');
            }
            // verify required parameter 'optionID' is not null or undefined
            if (optionID === null || optionID === undefined) {
                throw new Error('Required parameter optionID was null or undefined when calling patchOption.');
            }
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new Error('Required parameter option was null or undefined when calling patchOption.');
            }
            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: true,
                data: option,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param productAssignment 
         */
        public saveProductAssignment (productAssignment: SpecProductAssignment, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/specs/productassignments';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'productAssignment' is not null or undefined
            if (productAssignment === null || productAssignment === undefined) {
                throw new Error('Required parameter productAssignment was null or undefined when calling saveProductAssignment.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: productAssignment,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param specID ID of the spec.
         * @param spec 
         */
        public update (specID: string, spec: Spec, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/specs/{specID}'
                .replace('{' + 'specID' + '}', String(specID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling update.');
            }
            // verify required parameter 'spec' is not null or undefined
            if (spec === null || spec === undefined) {
                throw new Error('Required parameter spec was null or undefined when calling update.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: spec,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param specID ID of the spec.
         * @param optionID ID of the option.
         * @param option 
         */
        public updateOption (specID: string, optionID: string, option: SpecOption, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
            const localVarPath = this.basePath + '/specs/{specID}/options/{optionID}'
                .replace('{' + 'specID' + '}', String(specID))
                .replace('{' + 'optionID' + '}', String(optionID));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'specID' is not null or undefined
            if (specID === null || specID === undefined) {
                throw new Error('Required parameter specID was null or undefined when calling updateOption.');
            }
            // verify required parameter 'optionID' is not null or undefined
            if (optionID === null || optionID === undefined) {
                throw new Error('Required parameter optionID was null or undefined when calling updateOption.');
            }
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new Error('Required parameter option was null or undefined when calling updateOption.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: option,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
