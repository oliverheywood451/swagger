/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.wordnik.client.api

import com.wordnik.client.model.BuyerAddress
import com.wordnik.client.model.BuyerCreditCard
import com.wordnik.client.model.User

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{FileUploadSupport, MultipartConfig, SizeConstraintExceededException}

import scala.collection.JavaConverters._

class MeApi (implicit val swagger: Swagger) extends ScalatraServlet
    with FileUploadSupport
    with JacksonJsonSupport
    with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "MeApi"
  override protected val applicationName: Option[String] = Some("/v1/Me")

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val createAddressOperation = (apiOperation[Object]("createAddress")
      summary ""
      parameters(bodyParam[BuyerAddress]("address").description(""))
  )

  post("/me/addresses",operation(createAddressOperation)) {
    
    
          val address = parsedBody.extract[BuyerAddress]

    println("address: " + address)
  }

  

  val createCreditCardOperation = (apiOperation[Object]("createCreditCard")
      summary ""
      parameters(bodyParam[BuyerCreditCard]("creditCard").description(""))
  )

  post("/me/creditcards",operation(createCreditCardOperation)) {
    
    
          val creditCard = parsedBody.extract[BuyerCreditCard]

    println("creditCard: " + creditCard)
  }

  

  val deleteAddressOperation = (apiOperation[Unit]("deleteAddress")
      summary ""
      parameters(pathParam[String]("addressID").description(""))
  )

  delete("/me/addresses/{addressID}",operation(deleteAddressOperation)) {
    
    
      val addressID = params.getOrElse("addressID", halt(400))
    
    println("addressID: " + addressID)
  }

  

  val deleteCreditCardOperation = (apiOperation[Unit]("deleteCreditCard")
      summary ""
      parameters(pathParam[String]("creditcardID").description(""))
  )

  delete("/me/creditcards/{creditcardID}",operation(deleteCreditCardOperation)) {
    
    
      val creditcardID = params.getOrElse("creditcardID", halt(400))
    
    println("creditcardID: " + creditcardID)
  }

  

  val getOperation = (apiOperation[Object]("get")
      summary ""
      parameters()
  )

  get("/me",operation(getOperation)) {
  }

  

  val getAddressOperation = (apiOperation[Object]("getAddress")
      summary ""
      parameters(pathParam[String]("addressID").description(""))
  )

  get("/me/addresses/{addressID}",operation(getAddressOperation)) {
    
    
      val addressID = params.getOrElse("addressID", halt(400))
    
    println("addressID: " + addressID)
  }

  

  val getCreditCardOperation = (apiOperation[Object]("getCreditCard")
      summary ""
      parameters(pathParam[String]("creditcardID").description(""))
  )

  get("/me/creditcards/{creditcardID}",operation(getCreditCardOperation)) {
    
    
      val creditcardID = params.getOrElse("creditcardID", halt(400))
    
    println("creditcardID: " + creditcardID)
  }

  

  val getOrderOperation = (apiOperation[Object]("getOrder")
      summary ""
      parameters(pathParam[String]("orderID").description(""))
  )

  get("/me/orders/{orderID}",operation(getOrderOperation)) {
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
  }

  

  val getProductOperation = (apiOperation[Object]("getProduct")
      summary ""
      parameters(pathParam[String]("productID").description(""))
  )

  get("/me/products/{productID}",operation(getProductOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
  }

  

  val getPromotionOperation = (apiOperation[Object]("getPromotion")
      summary ""
      parameters(pathParam[String]("promotionID").description(""))
  )

  get("/me/promotions/{promotionID}",operation(getPromotionOperation)) {
    
    
      val promotionID = params.getOrElse("promotionID", halt(400))
    
    println("promotionID: " + promotionID)
  }

  

  val getSpecOperation = (apiOperation[Object]("getSpec")
      summary ""
      parameters(pathParam[String]("productID").description(""), pathParam[String]("specID").description(""))
  )

  get("/me/products/{productID}/specs/{specID}",operation(getSpecOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
      val specID = params.getOrElse("specID", halt(400))
    
    println("specID: " + specID)
  }

  

  val listAddressesOperation = (apiOperation[Object]("listAddresses")
      summary ""
      parameters(queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/me/addresses",operation(listAddressesOperation)) {
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listCategoriesOperation = (apiOperation[Object]("listCategories")
      summary ""
      parameters(queryParam[String]("depth").description("").optional, queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/me/categories",operation(listCategoriesOperation)) {
    
    
                val depth = params.getAs[String]("depth")

    println("depth: " + depth)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listCostCentersOperation = (apiOperation[Object]("listCostCenters")
      summary ""
      parameters(queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/me/costcenters",operation(listCostCentersOperation)) {
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listCreditCardsOperation = (apiOperation[Object]("listCreditCards")
      summary ""
      parameters(queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/me/creditcards",operation(listCreditCardsOperation)) {
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listIncomingOrdersOperation = (apiOperation[Object]("listIncomingOrders")
      summary ""
      parameters(queryParam[String]("from").description("").optional, queryParam[String]("to").description("").optional, queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/me/orders/incoming",operation(listIncomingOrdersOperation)) {
    
    
                val from = params.getAs[String]("from")

    println("from: " + from)
    
    
                val to = params.getAs[String]("to")

    println("to: " + to)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listOutgoingOrdersOperation = (apiOperation[Object]("listOutgoingOrders")
      summary ""
      parameters(queryParam[String]("from").description("").optional, queryParam[String]("to").description("").optional, queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/me/orders/outgoing",operation(listOutgoingOrdersOperation)) {
    
    
                val from = params.getAs[String]("from")

    println("from: " + from)
    
    
                val to = params.getAs[String]("to")

    println("to: " + to)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listProductsOperation = (apiOperation[Object]("listProducts")
      summary ""
      parameters(queryParam[String]("categoryID").description("").optional, queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/me/products",operation(listProductsOperation)) {
    
    
                val categoryID = params.getAs[String]("categoryID")

    println("categoryID: " + categoryID)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listPromotionsOperation = (apiOperation[Object]("listPromotions")
      summary ""
      parameters(queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/me/promotions",operation(listPromotionsOperation)) {
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listSpecsOperation = (apiOperation[Object]("listSpecs")
      summary ""
      parameters(pathParam[String]("productID").description(""), queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/me/products/{productID}/specs",operation(listSpecsOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listSubcategoriesOperation = (apiOperation[Object]("listSubcategories")
      summary ""
      parameters(pathParam[String]("parentID").description(""), queryParam[String]("depth").description("").optional, queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/me/categories/{parentID}/categories",operation(listSubcategoriesOperation)) {
    
    
      val parentID = params.getOrElse("parentID", halt(400))
    
    println("parentID: " + parentID)
    
    
                val depth = params.getAs[String]("depth")

    println("depth: " + depth)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listUserGroupsOperation = (apiOperation[Object]("listUserGroups")
      summary ""
      parameters(queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/me/usergroups",operation(listUserGroupsOperation)) {
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val patchOperation = (apiOperation[Object]("patch")
      summary ""
      parameters(bodyParam[User]("user").description(""))
  )

  patch("/me",operation(patchOperation)) {
    
    
          val user = parsedBody.extract[User]

    println("user: " + user)
  }

  

  val patchAddressOperation = (apiOperation[Unit]("patchAddress")
      summary ""
      parameters(pathParam[String]("addressID").description(""), bodyParam[BuyerAddress]("address").description(""))
  )

  patch("/me/addresses/{addressID}",operation(patchAddressOperation)) {
    
    
      val addressID = params.getOrElse("addressID", halt(400))
    
    println("addressID: " + addressID)
    
    
          val address = parsedBody.extract[BuyerAddress]

    println("address: " + address)
  }

  

  val patchCreditCardOperation = (apiOperation[Unit]("patchCreditCard")
      summary ""
      parameters(pathParam[String]("creditcardID").description(""), bodyParam[BuyerCreditCard]("creditCard").description(""))
  )

  patch("/me/creditcards/{creditcardID}",operation(patchCreditCardOperation)) {
    
    
      val creditcardID = params.getOrElse("creditcardID", halt(400))
    
    println("creditcardID: " + creditcardID)
    
    
          val creditCard = parsedBody.extract[BuyerCreditCard]

    println("creditCard: " + creditCard)
  }

  

  val updateOperation = (apiOperation[Object]("update")
      summary ""
      parameters(bodyParam[User]("user").description(""))
  )

  put("/me",operation(updateOperation)) {
    
    
          val user = parsedBody.extract[User]

    println("user: " + user)
  }

  

  val updateAddressOperation = (apiOperation[Object]("updateAddress")
      summary ""
      parameters(pathParam[String]("addressID").description(""), bodyParam[BuyerAddress]("address").description(""))
  )

  put("/me/addresses/{addressID}",operation(updateAddressOperation)) {
    
    
      val addressID = params.getOrElse("addressID", halt(400))
    
    println("addressID: " + addressID)
    
    
          val address = parsedBody.extract[BuyerAddress]

    println("address: " + address)
  }

  

  val updateCreditCardOperation = (apiOperation[Object]("updateCreditCard")
      summary ""
      parameters(pathParam[String]("creditcardID").description(""), bodyParam[BuyerCreditCard]("creditCard").description(""))
  )

  put("/me/creditcards/{creditcardID}",operation(updateCreditCardOperation)) {
    
    
      val creditcardID = params.getOrElse("creditcardID", halt(400))
    
    println("creditcardID: " + creditcardID)
    
    
          val creditCard = parsedBody.extract[BuyerCreditCard]

    println("creditCard: " + creditCard)
  }

}
