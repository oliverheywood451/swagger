/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.wordnik.client.api

import com.wordnik.client.model.Order
import com.wordnik.client.model.Address
import com.wordnik.client.model.Shipment

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{FileUploadSupport, MultipartConfig, SizeConstraintExceededException}

import scala.collection.JavaConverters._

class OrderApi (implicit val swagger: Swagger) extends ScalatraServlet
    with FileUploadSupport
    with JacksonJsonSupport
    with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "OrderApi"
  override protected val applicationName: Option[String] = Some("/v1/Order")

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val addPromotionOperation = (apiOperation[Object]("addPromotion")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), pathParam[String]("promoCode").description(""))
  )

  post("/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}",operation(addPromotionOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
      val promoCode = params.getOrElse("promoCode", halt(400))
    
    println("promoCode: " + promoCode)
  }

  

  val approveOperation = (apiOperation[Object]("approve")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), queryParam[String]("comments").description("").optional)
  )

  post("/buyers/{buyerID}/orders/{orderID}/approve",operation(approveOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
                val comments = params.getAs[String]("comments")

    println("comments: " + comments)
  }

  

  val cancelOperation = (apiOperation[Object]("cancel")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""))
  )

  post("/buyers/{buyerID}/orders/{orderID}/cancel",operation(cancelOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
  }

  

  val createOperation = (apiOperation[Object]("create")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), bodyParam[Order]("order").description(""))
  )

  post("/buyers/{buyerID}/orders",operation(createOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
          val order = parsedBody.extract[Order]

    println("order: " + order)
  }

  

  val declineOperation = (apiOperation[Object]("decline")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), queryParam[String]("comments").description("").optional)
  )

  post("/buyers/{buyerID}/orders/{orderID}/decline",operation(declineOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
                val comments = params.getAs[String]("comments")

    println("comments: " + comments)
  }

  

  val deleteOperation = (apiOperation[Unit]("delete")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""))
  )

  delete("/buyers/{buyerID}/orders/{orderID}",operation(deleteOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
  }

  

  val getOperation = (apiOperation[Object]("get")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""))
  )

  get("/buyers/{buyerID}/orders/{orderID}",operation(getOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
  }

  

  val listApprovalsOperation = (apiOperation[Object]("listApprovals")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/buyers/{buyerID}/orders/{orderID}/approvals",operation(listApprovalsOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listEligibleApproversOperation = (apiOperation[Object]("listEligibleApprovers")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/buyers/{buyerID}/orders/{orderID}/eligibleapprovers",operation(listEligibleApproversOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listIncomingOperation = (apiOperation[Object]("listIncoming")
      summary ""
      parameters(queryParam[String]("buyerID").description("").optional, queryParam[String]("from").description("").optional, queryParam[String]("to").description("").optional, queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/orders/incoming",operation(listIncomingOperation)) {
    
    
                val buyerID = params.getAs[String]("buyerID")

    println("buyerID: " + buyerID)
    
    
                val from = params.getAs[String]("from")

    println("from: " + from)
    
    
                val to = params.getAs[String]("to")

    println("to: " + to)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listOutgoingOperation = (apiOperation[Object]("listOutgoing")
      summary ""
      parameters(queryParam[String]("buyerID").description("").optional, queryParam[String]("from").description("").optional, queryParam[String]("to").description("").optional, queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/orders/outgoing",operation(listOutgoingOperation)) {
    
    
                val buyerID = params.getAs[String]("buyerID")

    println("buyerID: " + buyerID)
    
    
                val from = params.getAs[String]("from")

    println("from: " + from)
    
    
                val to = params.getAs[String]("to")

    println("to: " + to)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listPromotionsOperation = (apiOperation[Object]("listPromotions")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/buyers/{buyerID}/orders/{orderID}/promotions",operation(listPromotionsOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val patchOperation = (apiOperation[Object]("patch")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), bodyParam[Order]("partialOrder").description(""))
  )

  patch("/buyers/{buyerID}/orders/{orderID}",operation(patchOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
          val partialOrder = parsedBody.extract[Order]

    println("partialOrder: " + partialOrder)
  }

  

  val patchBillingAddressOperation = (apiOperation[Object]("patchBillingAddress")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), bodyParam[Address]("address").description(""))
  )

  patch("/buyers/{buyerID}/orders/{orderID}/billto",operation(patchBillingAddressOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
          val address = parsedBody.extract[Address]

    println("address: " + address)
  }

  

  val patchShippingAddressOperation = (apiOperation[Object]("patchShippingAddress")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), bodyParam[Address]("address").description(""))
  )

  patch("/buyers/{buyerID}/orders/{orderID}/shipto",operation(patchShippingAddressOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
          val address = parsedBody.extract[Address]

    println("address: " + address)
  }

  

  val removePromotionOperation = (apiOperation[Object]("removePromotion")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), pathParam[String]("promoCode").description(""))
  )

  delete("/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}",operation(removePromotionOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
      val promoCode = params.getOrElse("promoCode", halt(400))
    
    println("promoCode: " + promoCode)
  }

  

  val setBillingAddressOperation = (apiOperation[Object]("setBillingAddress")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), bodyParam[Address]("address").description(""))
  )

  put("/buyers/{buyerID}/orders/{orderID}/billto",operation(setBillingAddressOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
          val address = parsedBody.extract[Address]

    println("address: " + address)
  }

  

  val setShippingAddressOperation = (apiOperation[Object]("setShippingAddress")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), bodyParam[Address]("address").description(""))
  )

  put("/buyers/{buyerID}/orders/{orderID}/shipto",operation(setShippingAddressOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
          val address = parsedBody.extract[Address]

    println("address: " + address)
  }

  

  val shipOperation = (apiOperation[Object]("ship")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), bodyParam[Shipment]("shipment").description(""))
  )

  post("/buyers/{buyerID}/orders/{orderID}/ship",operation(shipOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
          val shipment = parsedBody.extract[Shipment]

    println("shipment: " + shipment)
  }

  

  val submitOperation = (apiOperation[Object]("submit")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""))
  )

  post("/buyers/{buyerID}/orders/{orderID}/submit",operation(submitOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
  }

  

  val transferTempUserOrderOperation = (apiOperation[Unit]("transferTempUserOrder")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), queryParam[String]("tempUserToken").description(""))
  )

  put("/buyers/{buyerID}/orders",operation(transferTempUserOrderOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
                val tempUserToken = params.getAs[String]("tempUserToken")

    println("tempUserToken: " + tempUserToken)
  }

  

  val updateOperation = (apiOperation[Object]("update")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("orderID").description(""), bodyParam[Order]("order").description(""))
  )

  put("/buyers/{buyerID}/orders/{orderID}",operation(updateOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val orderID = params.getOrElse("orderID", halt(400))
    
    println("orderID: " + orderID)
    
    
          val order = parsedBody.extract[Order]

    println("order: " + order)
  }

}
