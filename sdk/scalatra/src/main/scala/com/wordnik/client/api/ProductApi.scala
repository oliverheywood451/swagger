/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.wordnik.client.api

import com.wordnik.client.model.Product
import com.wordnik.client.model.Variant
import com.wordnik.client.model.ProductAssignment

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{FileUploadSupport, MultipartConfig, SizeConstraintExceededException}

import scala.collection.JavaConverters._

class ProductApi (implicit val swagger: Swagger) extends ScalatraServlet
    with FileUploadSupport
    with JacksonJsonSupport
    with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ProductApi"
  override protected val applicationName: Option[String] = Some("/v1/Product")

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val createOperation = (apiOperation[Object]("create")
      summary ""
      parameters(bodyParam[Product]("product").description(""))
  )

  post("/products",operation(createOperation)) {
    
    
          val product = parsedBody.extract[Product]

    println("product: " + product)
  }

  

  val deleteOperation = (apiOperation[Unit]("delete")
      summary ""
      parameters(pathParam[String]("productID").description(""))
  )

  delete("/products/{productID}",operation(deleteOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
  }

  

  val deleteAssignmentOperation = (apiOperation[Unit]("deleteAssignment")
      summary ""
      parameters(pathParam[String]("buyerID").description(""), pathParam[String]("productID").description(""), queryParam[String]("userID").description("").optional, queryParam[String]("userGroupID").description("").optional)
  )

  delete("/products/{productID}/assignments/{buyerID}",operation(deleteAssignmentOperation)) {
    
    
      val buyerID = params.getOrElse("buyerID", halt(400))
    
    println("buyerID: " + buyerID)
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
                val userID = params.getAs[String]("userID")

    println("userID: " + userID)
    
    
                val userGroupID = params.getAs[String]("userGroupID")

    println("userGroupID: " + userGroupID)
  }

  

  val generateVariantsOperation = (apiOperation[Object]("generateVariants")
      summary ""
      parameters(pathParam[String]("productID").description(""), queryParam[Boolean]("overwriteExisting").description("").optional)
  )

  post("/products/{productID}/variants/generate",operation(generateVariantsOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
                val overwriteExisting = params.getAs[Boolean]("overwriteExisting")

    println("overwriteExisting: " + overwriteExisting)
  }

  

  val getOperation = (apiOperation[Object]("get")
      summary ""
      parameters(pathParam[String]("productID").description(""))
  )

  get("/products/{productID}",operation(getOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
  }

  

  val getInventoryOperation = (apiOperation[Object]("getInventory")
      summary ""
      parameters(pathParam[String]("productID").description(""))
  )

  get("/products/{productID}/inventory",operation(getInventoryOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
  }

  

  val getVariantOperation = (apiOperation[Object]("getVariant")
      summary ""
      parameters(pathParam[String]("productID").description(""), pathParam[String]("variantID").description(""))
  )

  get("/products/{productID}/variants/{variantID}",operation(getVariantOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
      val variantID = params.getOrElse("variantID", halt(400))
    
    println("variantID: " + variantID)
  }

  

  val getVariantInventoryOperation = (apiOperation[Object]("getVariantInventory")
      summary ""
      parameters(pathParam[String]("productID").description(""), pathParam[String]("variantID").description(""))
  )

  get("/products/{productID}/variants/inventory/{variantID}",operation(getVariantInventoryOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
      val variantID = params.getOrElse("variantID", halt(400))
    
    println("variantID: " + variantID)
  }

  

  val listOperation = (apiOperation[Object]("list")
      summary ""
      parameters(queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/products",operation(listOperation)) {
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listAssignmentsOperation = (apiOperation[Object]("listAssignments")
      summary ""
      parameters(queryParam[String]("productID").description("").optional, queryParam[String]("buyerID").description("").optional, queryParam[String]("userID").description("").optional, queryParam[String]("userGroupID").description("").optional, queryParam[String]("level").description("").optional, queryParam[String]("priceScheduleID").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/products/assignments",operation(listAssignmentsOperation)) {
    
    
                val productID = params.getAs[String]("productID")

    println("productID: " + productID)
    
    
                val buyerID = params.getAs[String]("buyerID")

    println("buyerID: " + buyerID)
    
    
                val userID = params.getAs[String]("userID")

    println("userID: " + userID)
    
    
                val userGroupID = params.getAs[String]("userGroupID")

    println("userGroupID: " + userGroupID)
    
    
                val level = params.getAs[String]("level")

    println("level: " + level)
    
    
                val priceScheduleID = params.getAs[String]("priceScheduleID")

    println("priceScheduleID: " + priceScheduleID)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listInventoryOperation = (apiOperation[Object]("listInventory")
      summary ""
      parameters(queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/products/inventory",operation(listInventoryOperation)) {
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listVariantInventoryOperation = (apiOperation[Object]("listVariantInventory")
      summary ""
      parameters(pathParam[String]("productID").description(""), queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/products/{productID}/variants/inventory",operation(listVariantInventoryOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val listVariantsOperation = (apiOperation[Object]("listVariants")
      summary ""
      parameters(pathParam[String]("productID").description(""), queryParam[String]("search").description("").optional, queryParam[String]("searchOn").description("").optional, queryParam[String]("sortBy").description("").optional, queryParam[Int]("page").description("").optional, queryParam[Int]("pageSize").description("").optional)
  )

  get("/products/{productID}/variants",operation(listVariantsOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
                val search = params.getAs[String]("search")

    println("search: " + search)
    
    
                val searchOn = params.getAs[String]("searchOn")

    println("searchOn: " + searchOn)
    
    
                val sortBy = params.getAs[String]("sortBy")

    println("sortBy: " + sortBy)
    
    
                val page = params.getAs[Int]("page")

    println("page: " + page)
    
    
                val pageSize = params.getAs[Int]("pageSize")

    println("pageSize: " + pageSize)
  }

  

  val patchOperation = (apiOperation[Unit]("patch")
      summary ""
      parameters(pathParam[String]("productID").description(""), bodyParam[Product]("product").description(""))
  )

  patch("/products/{productID}",operation(patchOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
          val product = parsedBody.extract[Product]

    println("product: " + product)
  }

  

  val patchVariantOperation = (apiOperation[Object]("patchVariant")
      summary ""
      parameters(pathParam[String]("productID").description(""), pathParam[String]("variantID").description(""), bodyParam[Variant]("variant").description(""))
  )

  patch("/products/{productID}/variants/{variantID}",operation(patchVariantOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
      val variantID = params.getOrElse("variantID", halt(400))
    
    println("variantID: " + variantID)
    
    
          val variant = parsedBody.extract[Variant]

    println("variant: " + variant)
  }

  

  val saveAssignmentOperation = (apiOperation[Unit]("saveAssignment")
      summary ""
      parameters(bodyParam[ProductAssignment]("productAssignment").description(""))
  )

  post("/products/assignments",operation(saveAssignmentOperation)) {
    
    
          val productAssignment = parsedBody.extract[ProductAssignment]

    println("productAssignment: " + productAssignment)
  }

  

  val updateOperation = (apiOperation[Object]("update")
      summary ""
      parameters(pathParam[String]("productID").description(""), bodyParam[Product]("product").description(""))
  )

  put("/products/{productID}",operation(updateOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
          val product = parsedBody.extract[Product]

    println("product: " + product)
  }

  

  val updateInventoryOperation = (apiOperation[Object]("updateInventory")
      summary ""
      parameters(pathParam[String]("productID").description(""), pathParam[Int]("inventory").description(""))
  )

  put("/products/{productID}/inventory/{inventory}",operation(updateInventoryOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
      val inventory = params.getOrElse("inventory", halt(400))
    
    println("inventory: " + inventory)
  }

  

  val updateVariantOperation = (apiOperation[Object]("updateVariant")
      summary ""
      parameters(pathParam[String]("productID").description(""), pathParam[String]("variantID").description(""), bodyParam[Variant]("variant").description(""))
  )

  put("/products/{productID}/variants/{variantID}",operation(updateVariantOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
      val variantID = params.getOrElse("variantID", halt(400))
    
    println("variantID: " + variantID)
    
    
          val variant = parsedBody.extract[Variant]

    println("variant: " + variant)
  }

  

  val updateVariantInventoryOperation = (apiOperation[Object]("updateVariantInventory")
      summary ""
      parameters(pathParam[String]("productID").description(""), pathParam[String]("variantID").description(""), pathParam[Int]("inventory").description(""))
  )

  put("/products/{productID}/variants/inventory/{variantID}/{inventory}",operation(updateVariantInventoryOperation)) {
    
    
      val productID = params.getOrElse("productID", halt(400))
    
    println("productID: " + productID)
    
    
      val variantID = params.getOrElse("variantID", halt(400))
    
    println("variantID: " + variantID)
    
    
      val inventory = params.getOrElse("inventory", halt(400))
    
    println("inventory: " + inventory)
  }

}
