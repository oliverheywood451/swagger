=begin comment

OrderCloud

A full ecommerce backend as a service.

OpenAPI spec version: 0.1
Contact: ordercloud@four51.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::OrderApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# add_promotion
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param string $promo_code Promo code of the order. (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'promo_code' => {
        data_type => 'string',
        description => 'Promo code of the order.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_promotion' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub add_promotion {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling add_promotion");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling add_promotion");
    }

    # verify the required parameter 'promo_code' is set
    unless (exists $args{'promo_code'}) {
      croak("Missing the required parameter 'promo_code' when calling add_promotion");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'promo_code'}) {
        my $_base_variable = "{" . "promoCode" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'promo_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# approve
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param string $comments Comments to be saved with the order approval. (optional)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'comments' => {
        data_type => 'string',
        description => 'Comments to be saved with the order approval.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'approve' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub approve {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling approve");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling approve");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/approve';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'comments'}) {
        $query_params->{'comments'} = $self->{api_client}->to_query_value($args{'comments'});
    }

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# cancel
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'cancel' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub cancel {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling cancel");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling cancel");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/cancel';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# create
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param Order $order  (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order' => {
        data_type => 'Order',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub create {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling create");
    }

    # verify the required parameter 'order' is set
    unless (exists $args{'order'}) {
      croak("Missing the required parameter 'order' when calling create");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'order'}) {
        $_body_data = $args{'order'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# decline
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param string $comments Comments to be saved with the order denial. (optional)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'comments' => {
        data_type => 'string',
        description => 'Comments to be saved with the order denial.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'decline' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub decline {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling decline");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling decline");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/decline';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'comments'}) {
        $query_params->{'comments'} = $self->{api_client}->to_query_value($args{'comments'});
    }

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# delete
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling delete");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling delete");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling get");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling get");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list_approvals
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param string $search Word or phrase to search for. (optional)
# @param string $search_on Comma-delimited list of fields to search on. (optional)
# @param string $sort_by Comma-delimited list of fields to sort by. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'search' => {
        data_type => 'string',
        description => 'Word or phrase to search for.',
        required => '0',
    },
    'search_on' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to search on.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to sort by.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_approvals' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list_approvals {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling list_approvals");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling list_approvals");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/approvals';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'search_on'}) {
        $query_params->{'searchOn'} = $self->{api_client}->to_query_value($args{'search_on'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list_eligible_approvers
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param string $search Word or phrase to search for. (optional)
# @param string $search_on Comma-delimited list of fields to search on. (optional)
# @param string $sort_by Comma-delimited list of fields to sort by. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'search' => {
        data_type => 'string',
        description => 'Word or phrase to search for.',
        required => '0',
    },
    'search_on' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to search on.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to sort by.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_eligible_approvers' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list_eligible_approvers {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling list_eligible_approvers");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling list_eligible_approvers");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/eligibleapprovers';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'search_on'}) {
        $query_params->{'searchOn'} = $self->{api_client}->to_query_value($args{'search_on'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list_incoming
#
# 
# 
# @param string $buyer_id ID of the buyer. (optional)
# @param string $from Lower bound of date range that the order was submitted. (optional)
# @param string $to Upper bound of date range that the order was submitted. (optional)
# @param string $search Word or phrase to search for. (optional)
# @param string $search_on Comma-delimited list of fields to search on. (optional)
# @param string $sort_by Comma-delimited list of fields to sort by. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '0',
    },
    'from' => {
        data_type => 'string',
        description => 'Lower bound of date range that the order was submitted.',
        required => '0',
    },
    'to' => {
        data_type => 'string',
        description => 'Upper bound of date range that the order was submitted.',
        required => '0',
    },
    'search' => {
        data_type => 'string',
        description => 'Word or phrase to search for.',
        required => '0',
    },
    'search_on' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to search on.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to sort by.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_incoming' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list_incoming {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/orders/incoming';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'buyer_id'}) {
        $query_params->{'buyerID'} = $self->{api_client}->to_query_value($args{'buyer_id'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'search_on'}) {
        $query_params->{'searchOn'} = $self->{api_client}->to_query_value($args{'search_on'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list_outgoing
#
# 
# 
# @param string $buyer_id ID of the buyer. (optional)
# @param string $from Lower bound of date range that the order was created. (optional)
# @param string $to Upper bound of date range that the order was created. (optional)
# @param string $search Word or phrase to search for. (optional)
# @param string $search_on Comma-delimited list of fields to search on. (optional)
# @param string $sort_by Comma-delimited list of fields to sort by. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '0',
    },
    'from' => {
        data_type => 'string',
        description => 'Lower bound of date range that the order was created.',
        required => '0',
    },
    'to' => {
        data_type => 'string',
        description => 'Upper bound of date range that the order was created.',
        required => '0',
    },
    'search' => {
        data_type => 'string',
        description => 'Word or phrase to search for.',
        required => '0',
    },
    'search_on' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to search on.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to sort by.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_outgoing' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list_outgoing {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/orders/outgoing';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'buyer_id'}) {
        $query_params->{'buyerID'} = $self->{api_client}->to_query_value($args{'buyer_id'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'search_on'}) {
        $query_params->{'searchOn'} = $self->{api_client}->to_query_value($args{'search_on'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list_promotions
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param string $search Word or phrase to search for. (optional)
# @param string $search_on Comma-delimited list of fields to search on. (optional)
# @param string $sort_by Comma-delimited list of fields to sort by. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'search' => {
        data_type => 'string',
        description => 'Word or phrase to search for.',
        required => '0',
    },
    'search_on' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to search on.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to sort by.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_promotions' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list_promotions {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling list_promotions");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling list_promotions");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/promotions';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'search_on'}) {
        $query_params->{'searchOn'} = $self->{api_client}->to_query_value($args{'search_on'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# patch
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param Order $partial_order  (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'partial_order' => {
        data_type => 'Order',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub patch {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling patch");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling patch");
    }

    # verify the required parameter 'partial_order' is set
    unless (exists $args{'partial_order'}) {
      croak("Missing the required parameter 'partial_order' when calling patch");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'partial_order'}) {
        $_body_data = $args{'partial_order'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# patch_billing_address
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param Address $address  (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'address' => {
        data_type => 'Address',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_billing_address' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub patch_billing_address {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling patch_billing_address");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling patch_billing_address");
    }

    # verify the required parameter 'address' is set
    unless (exists $args{'address'}) {
      croak("Missing the required parameter 'address' when calling patch_billing_address");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/billto';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'address'}) {
        $_body_data = $args{'address'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# patch_shipping_address
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param Address $address  (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'address' => {
        data_type => 'Address',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_shipping_address' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub patch_shipping_address {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling patch_shipping_address");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling patch_shipping_address");
    }

    # verify the required parameter 'address' is set
    unless (exists $args{'address'}) {
      croak("Missing the required parameter 'address' when calling patch_shipping_address");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/shipto';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'address'}) {
        $_body_data = $args{'address'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# remove_promotion
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param string $promo_code Promo code of the order. (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'promo_code' => {
        data_type => 'string',
        description => 'Promo code of the order.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_promotion' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub remove_promotion {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling remove_promotion");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling remove_promotion");
    }

    # verify the required parameter 'promo_code' is set
    unless (exists $args{'promo_code'}) {
      croak("Missing the required parameter 'promo_code' when calling remove_promotion");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'promo_code'}) {
        my $_base_variable = "{" . "promoCode" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'promo_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# set_billing_address
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param Address $address  (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'address' => {
        data_type => 'Address',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_billing_address' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub set_billing_address {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling set_billing_address");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling set_billing_address");
    }

    # verify the required parameter 'address' is set
    unless (exists $args{'address'}) {
      croak("Missing the required parameter 'address' when calling set_billing_address");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/billto';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'address'}) {
        $_body_data = $args{'address'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# set_shipping_address
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param Address $address  (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'address' => {
        data_type => 'Address',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_shipping_address' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub set_shipping_address {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling set_shipping_address");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling set_shipping_address");
    }

    # verify the required parameter 'address' is set
    unless (exists $args{'address'}) {
      croak("Missing the required parameter 'address' when calling set_shipping_address");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/shipto';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'address'}) {
        $_body_data = $args{'address'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# ship
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param Shipment $shipment  (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'shipment' => {
        data_type => 'Shipment',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ship' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub ship {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling ship");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling ship");
    }

    # verify the required parameter 'shipment' is set
    unless (exists $args{'shipment'}) {
      croak("Missing the required parameter 'shipment' when calling ship");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/ship';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'shipment'}) {
        $_body_data = $args{'shipment'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# submit
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'submit' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub submit {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling submit");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling submit");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}/submit';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# transfer_temp_user_order
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $temp_user_token Temp user token of the order. (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'temp_user_token' => {
        data_type => 'string',
        description => 'Temp user token of the order.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'transfer_temp_user_order' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub transfer_temp_user_order {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling transfer_temp_user_order");
    }

    # verify the required parameter 'temp_user_token' is set
    unless (exists $args{'temp_user_token'}) {
      croak("Missing the required parameter 'temp_user_token' when calling transfer_temp_user_order");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'temp_user_token'}) {
        $query_params->{'tempUserToken'} = $self->{api_client}->to_query_value($args{'temp_user_token'});
    }

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $order_id ID of the order. (required)
# @param Order $order  (required)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'ID of the order.',
        required => '1',
    },
    'order' => {
        data_type => 'Order',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub update {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling update");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling update");
    }

    # verify the required parameter 'order' is set
    unless (exists $args{'order'}) {
      croak("Missing the required parameter 'order' when calling update");
    }

    # parse inputs
    my $_resource_path = '/buyers/{buyerID}/orders/{orderID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'order_id'}) {
        my $_base_variable = "{" . "orderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'order_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'order'}) {
        $_body_data = $args{'order'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

1;
