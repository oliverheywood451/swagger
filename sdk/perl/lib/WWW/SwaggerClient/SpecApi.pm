=begin comment

OrderCloud

A full ecommerce backend as a service.

OpenAPI spec version: 0.1
Contact: ordercloud@four51.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::SpecApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create
#
# 
# 
# @param Spec $spec  (required)
{
    my $params = {
    'spec' => {
        data_type => 'Spec',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub create {
    my ($self, %args) = @_;

    # verify the required parameter 'spec' is set
    unless (exists $args{'spec'}) {
      croak("Missing the required parameter 'spec' when calling create");
    }

    # parse inputs
    my $_resource_path = '/specs';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # body params
    if ( exists $args{'spec'}) {
        $_body_data = $args{'spec'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# create_option
#
# 
# 
# @param string $spec_id ID of the spec. (required)
# @param SpecOption $option  (required)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '1',
    },
    'option' => {
        data_type => 'SpecOption',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_option' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub create_option {
    my ($self, %args) = @_;

    # verify the required parameter 'spec_id' is set
    unless (exists $args{'spec_id'}) {
      croak("Missing the required parameter 'spec_id' when calling create_option");
    }

    # verify the required parameter 'option' is set
    unless (exists $args{'option'}) {
      croak("Missing the required parameter 'option' when calling create_option");
    }

    # parse inputs
    my $_resource_path = '/specs/{specID}/options';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'spec_id'}) {
        my $_base_variable = "{" . "specID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'spec_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'option'}) {
        $_body_data = $args{'option'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# delete
#
# 
# 
# @param string $spec_id ID of the spec. (required)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete {
    my ($self, %args) = @_;

    # verify the required parameter 'spec_id' is set
    unless (exists $args{'spec_id'}) {
      croak("Missing the required parameter 'spec_id' when calling delete");
    }

    # parse inputs
    my $_resource_path = '/specs/{specID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'spec_id'}) {
        my $_base_variable = "{" . "specID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'spec_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_option
#
# 
# 
# @param string $spec_id ID of the spec. (required)
# @param string $option_id ID of the option. (required)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '1',
    },
    'option_id' => {
        data_type => 'string',
        description => 'ID of the option.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_option' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_option {
    my ($self, %args) = @_;

    # verify the required parameter 'spec_id' is set
    unless (exists $args{'spec_id'}) {
      croak("Missing the required parameter 'spec_id' when calling delete_option");
    }

    # verify the required parameter 'option_id' is set
    unless (exists $args{'option_id'}) {
      croak("Missing the required parameter 'option_id' when calling delete_option");
    }

    # parse inputs
    my $_resource_path = '/specs/{specID}/options/{optionID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'spec_id'}) {
        my $_base_variable = "{" . "specID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'spec_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'option_id'}) {
        my $_base_variable = "{" . "optionID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'option_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_product_assignment
#
# 
# 
# @param string $spec_id ID of the spec. (required)
# @param string $product_id ID of the product. (required)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '1',
    },
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_product_assignment' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_product_assignment {
    my ($self, %args) = @_;

    # verify the required parameter 'spec_id' is set
    unless (exists $args{'spec_id'}) {
      croak("Missing the required parameter 'spec_id' when calling delete_product_assignment");
    }

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling delete_product_assignment");
    }

    # parse inputs
    my $_resource_path = '/specs/{specID}/productassignments/{productID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'spec_id'}) {
        my $_base_variable = "{" . "specID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'spec_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get
#
# 
# 
# @param string $spec_id ID of the spec. (required)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get {
    my ($self, %args) = @_;

    # verify the required parameter 'spec_id' is set
    unless (exists $args{'spec_id'}) {
      croak("Missing the required parameter 'spec_id' when calling get");
    }

    # parse inputs
    my $_resource_path = '/specs/{specID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'spec_id'}) {
        my $_base_variable = "{" . "specID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'spec_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_option
#
# 
# 
# @param string $spec_id ID of the spec. (required)
# @param string $option_id ID of the option. (required)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '1',
    },
    'option_id' => {
        data_type => 'string',
        description => 'ID of the option.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_option' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_option {
    my ($self, %args) = @_;

    # verify the required parameter 'spec_id' is set
    unless (exists $args{'spec_id'}) {
      croak("Missing the required parameter 'spec_id' when calling get_option");
    }

    # verify the required parameter 'option_id' is set
    unless (exists $args{'option_id'}) {
      croak("Missing the required parameter 'option_id' when calling get_option");
    }

    # parse inputs
    my $_resource_path = '/specs/{specID}/options/{optionID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'spec_id'}) {
        my $_base_variable = "{" . "specID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'spec_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'option_id'}) {
        my $_base_variable = "{" . "optionID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'option_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list
#
# 
# 
# @param string $search Word or phrase to search for. (optional)
# @param string $search_on Comma-delimited list of fields to search on. (optional)
# @param string $sort_by Comma-delimited list of fields to sort by. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'search' => {
        data_type => 'string',
        description => 'Word or phrase to search for.',
        required => '0',
    },
    'search_on' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to search on.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to sort by.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/specs';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'search_on'}) {
        $query_params->{'searchOn'} = $self->{api_client}->to_query_value($args{'search_on'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list_options
#
# 
# 
# @param string $spec_id ID of the spec. (required)
# @param string $search Word or phrase to search for. (optional)
# @param string $search_on Comma-delimited list of fields to search on. (optional)
# @param string $sort_by Comma-delimited list of fields to sort by. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '1',
    },
    'search' => {
        data_type => 'string',
        description => 'Word or phrase to search for.',
        required => '0',
    },
    'search_on' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to search on.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to sort by.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_options' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list_options {
    my ($self, %args) = @_;

    # verify the required parameter 'spec_id' is set
    unless (exists $args{'spec_id'}) {
      croak("Missing the required parameter 'spec_id' when calling list_options");
    }

    # parse inputs
    my $_resource_path = '/specs/{specID}/options';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'search_on'}) {
        $query_params->{'searchOn'} = $self->{api_client}->to_query_value($args{'search_on'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # path params
    if ( exists $args{'spec_id'}) {
        my $_base_variable = "{" . "specID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'spec_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list_product_assignments
#
# 
# 
# @param string $spec_id ID of the spec. (optional)
# @param string $product_id ID of the product. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '0',
    },
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_product_assignments' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list_product_assignments {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/specs/productassignments';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'spec_id'}) {
        $query_params->{'specID'} = $self->{api_client}->to_query_value($args{'spec_id'});
    }

    # query params
    if ( exists $args{'product_id'}) {
        $query_params->{'productID'} = $self->{api_client}->to_query_value($args{'product_id'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# patch
#
# 
# 
# @param string $spec_id ID of the spec. (required)
# @param Spec $spec  (required)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '1',
    },
    'spec' => {
        data_type => 'Spec',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub patch {
    my ($self, %args) = @_;

    # verify the required parameter 'spec_id' is set
    unless (exists $args{'spec_id'}) {
      croak("Missing the required parameter 'spec_id' when calling patch");
    }

    # verify the required parameter 'spec' is set
    unless (exists $args{'spec'}) {
      croak("Missing the required parameter 'spec' when calling patch");
    }

    # parse inputs
    my $_resource_path = '/specs/{specID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'spec_id'}) {
        my $_base_variable = "{" . "specID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'spec_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'spec'}) {
        $_body_data = $args{'spec'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# patch_option
#
# 
# 
# @param string $spec_id ID of the spec. (required)
# @param string $option_id ID of the option. (required)
# @param SpecOption $option  (required)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '1',
    },
    'option_id' => {
        data_type => 'string',
        description => 'ID of the option.',
        required => '1',
    },
    'option' => {
        data_type => 'SpecOption',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_option' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub patch_option {
    my ($self, %args) = @_;

    # verify the required parameter 'spec_id' is set
    unless (exists $args{'spec_id'}) {
      croak("Missing the required parameter 'spec_id' when calling patch_option");
    }

    # verify the required parameter 'option_id' is set
    unless (exists $args{'option_id'}) {
      croak("Missing the required parameter 'option_id' when calling patch_option");
    }

    # verify the required parameter 'option' is set
    unless (exists $args{'option'}) {
      croak("Missing the required parameter 'option' when calling patch_option");
    }

    # parse inputs
    my $_resource_path = '/specs/{specID}/options/{optionID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'spec_id'}) {
        my $_base_variable = "{" . "specID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'spec_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'option_id'}) {
        my $_base_variable = "{" . "optionID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'option_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'option'}) {
        $_body_data = $args{'option'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# save_product_assignment
#
# 
# 
# @param SpecProductAssignment $product_assignment  (required)
{
    my $params = {
    'product_assignment' => {
        data_type => 'SpecProductAssignment',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'save_product_assignment' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub save_product_assignment {
    my ($self, %args) = @_;

    # verify the required parameter 'product_assignment' is set
    unless (exists $args{'product_assignment'}) {
      croak("Missing the required parameter 'product_assignment' when calling save_product_assignment");
    }

    # parse inputs
    my $_resource_path = '/specs/productassignments';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # body params
    if ( exists $args{'product_assignment'}) {
        $_body_data = $args{'product_assignment'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update
#
# 
# 
# @param string $spec_id ID of the spec. (required)
# @param Spec $spec  (required)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '1',
    },
    'spec' => {
        data_type => 'Spec',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub update {
    my ($self, %args) = @_;

    # verify the required parameter 'spec_id' is set
    unless (exists $args{'spec_id'}) {
      croak("Missing the required parameter 'spec_id' when calling update");
    }

    # verify the required parameter 'spec' is set
    unless (exists $args{'spec'}) {
      croak("Missing the required parameter 'spec' when calling update");
    }

    # parse inputs
    my $_resource_path = '/specs/{specID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'spec_id'}) {
        my $_base_variable = "{" . "specID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'spec_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'spec'}) {
        $_body_data = $args{'spec'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# update_option
#
# 
# 
# @param string $spec_id ID of the spec. (required)
# @param string $option_id ID of the option. (required)
# @param SpecOption $option  (required)
{
    my $params = {
    'spec_id' => {
        data_type => 'string',
        description => 'ID of the spec.',
        required => '1',
    },
    'option_id' => {
        data_type => 'string',
        description => 'ID of the option.',
        required => '1',
    },
    'option' => {
        data_type => 'SpecOption',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_option' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub update_option {
    my ($self, %args) = @_;

    # verify the required parameter 'spec_id' is set
    unless (exists $args{'spec_id'}) {
      croak("Missing the required parameter 'spec_id' when calling update_option");
    }

    # verify the required parameter 'option_id' is set
    unless (exists $args{'option_id'}) {
      croak("Missing the required parameter 'option_id' when calling update_option");
    }

    # verify the required parameter 'option' is set
    unless (exists $args{'option'}) {
      croak("Missing the required parameter 'option' when calling update_option");
    }

    # parse inputs
    my $_resource_path = '/specs/{specID}/options/{optionID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'spec_id'}) {
        my $_base_variable = "{" . "specID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'spec_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'option_id'}) {
        my $_base_variable = "{" . "optionID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'option_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'option'}) {
        $_body_data = $args{'option'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

1;
