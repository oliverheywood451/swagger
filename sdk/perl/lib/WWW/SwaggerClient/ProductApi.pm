=begin comment

OrderCloud

A full ecommerce backend as a service.

OpenAPI spec version: 0.1
Contact: ordercloud@four51.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::ProductApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create
#
# 
# 
# @param Product $product  (required)
{
    my $params = {
    'product' => {
        data_type => 'Product',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub create {
    my ($self, %args) = @_;

    # verify the required parameter 'product' is set
    unless (exists $args{'product'}) {
      croak("Missing the required parameter 'product' when calling create");
    }

    # parse inputs
    my $_resource_path = '/products';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # body params
    if ( exists $args{'product'}) {
        $_body_data = $args{'product'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# delete
#
# 
# 
# @param string $product_id ID of the product. (required)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling delete");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_assignment
#
# 
# 
# @param string $buyer_id ID of the buyer. (required)
# @param string $product_id ID of the product. (required)
# @param string $user_id ID of the user. (optional)
# @param string $user_group_id ID of the user group. (optional)
{
    my $params = {
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '1',
    },
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'user_id' => {
        data_type => 'string',
        description => 'ID of the user.',
        required => '0',
    },
    'user_group_id' => {
        data_type => 'string',
        description => 'ID of the user group.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_assignment' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_assignment {
    my ($self, %args) = @_;

    # verify the required parameter 'buyer_id' is set
    unless (exists $args{'buyer_id'}) {
      croak("Missing the required parameter 'buyer_id' when calling delete_assignment");
    }

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling delete_assignment");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}/assignments/{buyerID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'user_id'}) {
        $query_params->{'userID'} = $self->{api_client}->to_query_value($args{'user_id'});
    }

    # query params
    if ( exists $args{'user_group_id'}) {
        $query_params->{'userGroupID'} = $self->{api_client}->to_query_value($args{'user_group_id'});
    }

    # path params
    if ( exists $args{'buyer_id'}) {
        my $_base_variable = "{" . "buyerID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'buyer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# generate_variants
#
# 
# 
# @param string $product_id ID of the product. (required)
# @param boolean $overwrite_existing Overwrite existing of the product. (optional)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'overwrite_existing' => {
        data_type => 'boolean',
        description => 'Overwrite existing of the product.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_variants' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub generate_variants {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling generate_variants");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}/variants/generate';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'overwrite_existing'}) {
        $query_params->{'overwriteExisting'} = $self->{api_client}->to_query_value($args{'overwrite_existing'});
    }

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get
#
# 
# 
# @param string $product_id ID of the product. (required)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling get");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_inventory
#
# 
# 
# @param string $product_id ID of the product. (required)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inventory' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_inventory {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling get_inventory");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}/inventory';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_variant
#
# 
# 
# @param string $product_id ID of the product. (required)
# @param string $variant_id ID of the variant. (required)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'variant_id' => {
        data_type => 'string',
        description => 'ID of the variant.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_variant' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_variant {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling get_variant");
    }

    # verify the required parameter 'variant_id' is set
    unless (exists $args{'variant_id'}) {
      croak("Missing the required parameter 'variant_id' when calling get_variant");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}/variants/{variantID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'variant_id'}) {
        my $_base_variable = "{" . "variantID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'variant_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_variant_inventory
#
# 
# 
# @param string $product_id ID of the product. (required)
# @param string $variant_id ID of the variant. (required)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'variant_id' => {
        data_type => 'string',
        description => 'ID of the variant.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_variant_inventory' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_variant_inventory {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling get_variant_inventory");
    }

    # verify the required parameter 'variant_id' is set
    unless (exists $args{'variant_id'}) {
      croak("Missing the required parameter 'variant_id' when calling get_variant_inventory");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}/variants/inventory/{variantID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'variant_id'}) {
        my $_base_variable = "{" . "variantID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'variant_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list
#
# 
# 
# @param string $search Word or phrase to search for. (optional)
# @param string $search_on Comma-delimited list of fields to search on. (optional)
# @param string $sort_by Comma-delimited list of fields to sort by. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'search' => {
        data_type => 'string',
        description => 'Word or phrase to search for.',
        required => '0',
    },
    'search_on' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to search on.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to sort by.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/products';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'search_on'}) {
        $query_params->{'searchOn'} = $self->{api_client}->to_query_value($args{'search_on'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list_assignments
#
# 
# 
# @param string $product_id ID of the product. (optional)
# @param string $buyer_id ID of the buyer. (optional)
# @param string $user_id ID of the user. (optional)
# @param string $user_group_id ID of the user group. (optional)
# @param string $level Level of the product. (optional)
# @param string $price_schedule_id ID of the price schedule. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '0',
    },
    'buyer_id' => {
        data_type => 'string',
        description => 'ID of the buyer.',
        required => '0',
    },
    'user_id' => {
        data_type => 'string',
        description => 'ID of the user.',
        required => '0',
    },
    'user_group_id' => {
        data_type => 'string',
        description => 'ID of the user group.',
        required => '0',
    },
    'level' => {
        data_type => 'string',
        description => 'Level of the product.',
        required => '0',
    },
    'price_schedule_id' => {
        data_type => 'string',
        description => 'ID of the price schedule.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_assignments' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list_assignments {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/products/assignments';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'product_id'}) {
        $query_params->{'productID'} = $self->{api_client}->to_query_value($args{'product_id'});
    }

    # query params
    if ( exists $args{'buyer_id'}) {
        $query_params->{'buyerID'} = $self->{api_client}->to_query_value($args{'buyer_id'});
    }

    # query params
    if ( exists $args{'user_id'}) {
        $query_params->{'userID'} = $self->{api_client}->to_query_value($args{'user_id'});
    }

    # query params
    if ( exists $args{'user_group_id'}) {
        $query_params->{'userGroupID'} = $self->{api_client}->to_query_value($args{'user_group_id'});
    }

    # query params
    if ( exists $args{'level'}) {
        $query_params->{'level'} = $self->{api_client}->to_query_value($args{'level'});
    }

    # query params
    if ( exists $args{'price_schedule_id'}) {
        $query_params->{'priceScheduleID'} = $self->{api_client}->to_query_value($args{'price_schedule_id'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list_inventory
#
# 
# 
# @param string $search Word or phrase to search for. (optional)
# @param string $search_on Comma-delimited list of fields to search on. (optional)
# @param string $sort_by Comma-delimited list of fields to sort by. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'search' => {
        data_type => 'string',
        description => 'Word or phrase to search for.',
        required => '0',
    },
    'search_on' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to search on.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to sort by.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_inventory' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list_inventory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/products/inventory';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'search_on'}) {
        $query_params->{'searchOn'} = $self->{api_client}->to_query_value($args{'search_on'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list_variant_inventory
#
# 
# 
# @param string $product_id ID of the product. (required)
# @param string $search Word or phrase to search for. (optional)
# @param string $search_on Comma-delimited list of fields to search on. (optional)
# @param string $sort_by Comma-delimited list of fields to sort by. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'search' => {
        data_type => 'string',
        description => 'Word or phrase to search for.',
        required => '0',
    },
    'search_on' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to search on.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to sort by.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_variant_inventory' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list_variant_inventory {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling list_variant_inventory");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}/variants/inventory';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'search_on'}) {
        $query_params->{'searchOn'} = $self->{api_client}->to_query_value($args{'search_on'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# list_variants
#
# 
# 
# @param string $product_id ID of the product. (required)
# @param string $search Word or phrase to search for. (optional)
# @param string $search_on Comma-delimited list of fields to search on. (optional)
# @param string $sort_by Comma-delimited list of fields to sort by. (optional)
# @param int $page Page of results to return. Default: 1 (optional)
# @param int $page_size Number of results to return per page. Default: 20, max: 100. (optional)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'search' => {
        data_type => 'string',
        description => 'Word or phrase to search for.',
        required => '0',
    },
    'search_on' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to search on.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Comma-delimited list of fields to sort by.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Page of results to return. Default: 1',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results to return per page. Default: 20, max: 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_variants' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub list_variants {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling list_variants");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}/variants';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'search_on'}) {
        $query_params->{'searchOn'} = $self->{api_client}->to_query_value($args{'search_on'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sortBy'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# patch
#
# 
# 
# @param string $product_id ID of the product. (required)
# @param Product $product  (required)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'product' => {
        data_type => 'Product',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub patch {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling patch");
    }

    # verify the required parameter 'product' is set
    unless (exists $args{'product'}) {
      croak("Missing the required parameter 'product' when calling patch");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'product'}) {
        $_body_data = $args{'product'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# patch_variant
#
# 
# 
# @param string $product_id ID of the product. (required)
# @param string $variant_id ID of the variant. (required)
# @param Variant $variant  (required)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'variant_id' => {
        data_type => 'string',
        description => 'ID of the variant.',
        required => '1',
    },
    'variant' => {
        data_type => 'Variant',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_variant' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub patch_variant {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling patch_variant");
    }

    # verify the required parameter 'variant_id' is set
    unless (exists $args{'variant_id'}) {
      croak("Missing the required parameter 'variant_id' when calling patch_variant");
    }

    # verify the required parameter 'variant' is set
    unless (exists $args{'variant'}) {
      croak("Missing the required parameter 'variant' when calling patch_variant");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}/variants/{variantID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'variant_id'}) {
        my $_base_variable = "{" . "variantID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'variant_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'variant'}) {
        $_body_data = $args{'variant'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# save_assignment
#
# 
# 
# @param ProductAssignment $product_assignment  (required)
{
    my $params = {
    'product_assignment' => {
        data_type => 'ProductAssignment',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'save_assignment' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub save_assignment {
    my ($self, %args) = @_;

    # verify the required parameter 'product_assignment' is set
    unless (exists $args{'product_assignment'}) {
      croak("Missing the required parameter 'product_assignment' when calling save_assignment");
    }

    # parse inputs
    my $_resource_path = '/products/assignments';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # body params
    if ( exists $args{'product_assignment'}) {
        $_body_data = $args{'product_assignment'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update
#
# 
# 
# @param string $product_id ID of the product. (required)
# @param Product $product  (required)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'product' => {
        data_type => 'Product',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub update {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling update");
    }

    # verify the required parameter 'product' is set
    unless (exists $args{'product'}) {
      croak("Missing the required parameter 'product' when calling update");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'product'}) {
        $_body_data = $args{'product'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# update_inventory
#
# 
# 
# @param string $product_id ID of the product. (required)
# @param int $inventory Inventory of the product. (required)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'inventory' => {
        data_type => 'int',
        description => 'Inventory of the product.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_inventory' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub update_inventory {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling update_inventory");
    }

    # verify the required parameter 'inventory' is set
    unless (exists $args{'inventory'}) {
      croak("Missing the required parameter 'inventory' when calling update_inventory");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}/inventory/{inventory}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'inventory'}) {
        my $_base_variable = "{" . "inventory" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inventory'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# update_variant
#
# 
# 
# @param string $product_id ID of the product. (required)
# @param string $variant_id ID of the variant. (required)
# @param Variant $variant  (required)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'variant_id' => {
        data_type => 'string',
        description => 'ID of the variant.',
        required => '1',
    },
    'variant' => {
        data_type => 'Variant',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_variant' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub update_variant {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling update_variant");
    }

    # verify the required parameter 'variant_id' is set
    unless (exists $args{'variant_id'}) {
      croak("Missing the required parameter 'variant_id' when calling update_variant");
    }

    # verify the required parameter 'variant' is set
    unless (exists $args{'variant'}) {
      croak("Missing the required parameter 'variant' when calling update_variant");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}/variants/{variantID}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'variant_id'}) {
        my $_base_variable = "{" . "variantID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'variant_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'variant'}) {
        $_body_data = $args{'variant'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# update_variant_inventory
#
# 
# 
# @param string $product_id ID of the product. (required)
# @param string $variant_id ID of the variant. (required)
# @param int $inventory Inventory of the product. (required)
{
    my $params = {
    'product_id' => {
        data_type => 'string',
        description => 'ID of the product.',
        required => '1',
    },
    'variant_id' => {
        data_type => 'string',
        description => 'ID of the variant.',
        required => '1',
    },
    'inventory' => {
        data_type => 'int',
        description => 'Inventory of the product.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_variant_inventory' } = { 
    	summary => '',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub update_variant_inventory {
    my ($self, %args) = @_;

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling update_variant_inventory");
    }

    # verify the required parameter 'variant_id' is set
    unless (exists $args{'variant_id'}) {
      croak("Missing the required parameter 'variant_id' when calling update_variant_inventory");
    }

    # verify the required parameter 'inventory' is set
    unless (exists $args{'inventory'}) {
      croak("Missing the required parameter 'inventory' when calling update_variant_inventory");
    }

    # parse inputs
    my $_resource_path = '/products/{productID}/variants/inventory/{variantID}/{inventory}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_id'}) {
        my $_base_variable = "{" . "productID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'variant_id'}) {
        my $_base_variable = "{" . "variantID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'variant_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'inventory'}) {
        my $_base_variable = "{" . "inventory" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inventory'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

1;
