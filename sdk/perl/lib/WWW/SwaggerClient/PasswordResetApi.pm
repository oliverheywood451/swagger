=begin comment

OrderCloud

A full ecommerce backend as a service.

OpenAPI spec version: 0.1
Contact: ordercloud@four51.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::PasswordResetApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# reset_password
#
# 
# 
# @param string $verification_code Verification code of the forgotten password. (required)
# @param PasswordReset $password_reset  (required)
{
    my $params = {
    'verification_code' => {
        data_type => 'string',
        description => 'Verification code of the forgotten password.',
        required => '1',
    },
    'password_reset' => {
        data_type => 'PasswordReset',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reset_password' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reset_password {
    my ($self, %args) = @_;

    # verify the required parameter 'verification_code' is set
    unless (exists $args{'verification_code'}) {
      croak("Missing the required parameter 'verification_code' when calling reset_password");
    }

    # verify the required parameter 'password_reset' is set
    unless (exists $args{'password_reset'}) {
      croak("Missing the required parameter 'password_reset' when calling reset_password");
    }

    # parse inputs
    my $_resource_path = '/password/reset/{verificationCode}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'verification_code'}) {
        my $_base_variable = "{" . "verificationCode" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'verification_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'password_reset'}) {
        $_body_data = $args{'password_reset'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# send_verification_code
#
# 
# 
# @param PasswordResetRequest $password_reset_request  (required)
{
    my $params = {
    'password_reset_request' => {
        data_type => 'PasswordResetRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_verification_code' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub send_verification_code {
    my ($self, %args) = @_;

    # verify the required parameter 'password_reset_request' is set
    unless (exists $args{'password_reset_request'}) {
      croak("Missing the required parameter 'password_reset_request' when calling send_verification_code");
    }

    # parse inputs
    my $_resource_path = '/password/reset';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # body params
    if ( exists $args{'password_reset_request'}) {
        $_body_data = $args{'password_reset_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
