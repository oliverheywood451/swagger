/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * OrderApi.h
 * 
 * 
 */
 
#ifndef OrderApi_H_
#define OrderApi_H_


#include "ApiClient.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"
#include "Order.h"
#include "Address.h"
#include "Shipment.h"

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  OrderApi
{
public:
    OrderApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~OrderApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="promoCode">Promo code of the order.</param>
    pplx::task<std::shared_ptr<Object>> addPromotion(utility::string_t buyerID, utility::string_t orderID, utility::string_t promoCode);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="comments">Comments to be saved with the order approval. (optional)</param>
    pplx::task<std::shared_ptr<Object>> approve(utility::string_t buyerID, utility::string_t orderID, utility::string_t comments);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>
    pplx::task<std::shared_ptr<Object>> cancel(utility::string_t buyerID, utility::string_t orderID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="order"></param>
    pplx::task<std::shared_ptr<Object>> create(utility::string_t buyerID, std::shared_ptr<Order> order);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="comments">Comments to be saved with the order denial. (optional)</param>
    pplx::task<std::shared_ptr<Object>> decline(utility::string_t buyerID, utility::string_t orderID, utility::string_t comments);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>
    pplx::task<void> delete(utility::string_t buyerID, utility::string_t orderID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>
    pplx::task<std::shared_ptr<Object>> get(utility::string_t buyerID, utility::string_t orderID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listApprovals(utility::string_t buyerID, utility::string_t orderID, utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listEligibleApprovers(utility::string_t buyerID, utility::string_t orderID, utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer. (optional)</param>/// <param name="from">Lower bound of date range that the order was submitted. (optional)</param>/// <param name="to">Upper bound of date range that the order was submitted. (optional)</param>/// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listIncoming(utility::string_t buyerID, utility::string_t from, utility::string_t to, utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer. (optional)</param>/// <param name="from">Lower bound of date range that the order was created. (optional)</param>/// <param name="to">Upper bound of date range that the order was created. (optional)</param>/// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listOutgoing(utility::string_t buyerID, utility::string_t from, utility::string_t to, utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listPromotions(utility::string_t buyerID, utility::string_t orderID, utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="partialOrder"></param>
    pplx::task<std::shared_ptr<Object>> patch(utility::string_t buyerID, utility::string_t orderID, std::shared_ptr<Order> partialOrder);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="address"></param>
    pplx::task<std::shared_ptr<Object>> patchBillingAddress(utility::string_t buyerID, utility::string_t orderID, std::shared_ptr<Address> address);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="address"></param>
    pplx::task<std::shared_ptr<Object>> patchShippingAddress(utility::string_t buyerID, utility::string_t orderID, std::shared_ptr<Address> address);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="promoCode">Promo code of the order.</param>
    pplx::task<std::shared_ptr<Object>> removePromotion(utility::string_t buyerID, utility::string_t orderID, utility::string_t promoCode);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="address"></param>
    pplx::task<std::shared_ptr<Object>> setBillingAddress(utility::string_t buyerID, utility::string_t orderID, std::shared_ptr<Address> address);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="address"></param>
    pplx::task<std::shared_ptr<Object>> setShippingAddress(utility::string_t buyerID, utility::string_t orderID, std::shared_ptr<Address> address);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="shipment"></param>
    pplx::task<std::shared_ptr<Object>> ship(utility::string_t buyerID, utility::string_t orderID, std::shared_ptr<Shipment> shipment);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>
    pplx::task<std::shared_ptr<Object>> submit(utility::string_t buyerID, utility::string_t orderID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="tempUserToken">Temp user token of the order.</param>
    pplx::task<void> transferTempUserOrder(utility::string_t buyerID, utility::string_t tempUserToken);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="buyerID">ID of the buyer.</param>/// <param name="orderID">ID of the order.</param>/// <param name="order"></param>
    pplx::task<std::shared_ptr<Object>> update(utility::string_t buyerID, utility::string_t orderID, std::shared_ptr<Order> order);
    
protected:
    std::shared_ptr<ApiClient> m_ApiClient;    
};
    
}
}
}
}

#endif /* OrderApi_H_ */

