/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * MeApi.h
 * 
 * 
 */
 
#ifndef MeApi_H_
#define MeApi_H_


#include "ApiClient.h"

#include "BuyerAddress.h"
#include "Object.h"
#include "BuyerCreditCard.h"
#include <cpprest/details/basic_types.h>
#include "User.h"

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  MeApi
{
public:
    MeApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~MeApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="address"></param>
    pplx::task<std::shared_ptr<Object>> createAddress(std::shared_ptr<BuyerAddress> address);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="creditCard"></param>
    pplx::task<std::shared_ptr<Object>> createCreditCard(std::shared_ptr<BuyerCreditCard> creditCard);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="addressID">ID of the address.</param>
    pplx::task<void> deleteAddress(utility::string_t addressID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="creditcardID">ID of the creditcard.</param>
    pplx::task<void> deleteCreditCard(utility::string_t creditcardID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    
    pplx::task<std::shared_ptr<Object>> get();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="addressID">ID of the address.</param>
    pplx::task<std::shared_ptr<Object>> getAddress(utility::string_t addressID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="creditcardID">ID of the creditcard.</param>
    pplx::task<std::shared_ptr<Object>> getCreditCard(utility::string_t creditcardID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="orderID">ID of the order.</param>
    pplx::task<std::shared_ptr<Object>> getOrder(utility::string_t orderID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="productID">ID of the product.</param>
    pplx::task<std::shared_ptr<Object>> getProduct(utility::string_t productID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="promotionID">ID of the promotion.</param>
    pplx::task<std::shared_ptr<Object>> getPromotion(utility::string_t promotionID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="productID">ID of the product.</param>/// <param name="specID">ID of the spec.</param>
    pplx::task<std::shared_ptr<Object>> getSpec(utility::string_t productID, utility::string_t specID);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listAddresses(utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="depth">Depth of the category. (optional)</param>/// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listCategories(utility::string_t depth, utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listCostCenters(utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listCreditCards(utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="from">Lower bound of date range that the order was created (if outgoing) or submitted (if incoming). (optional)</param>/// <param name="to">Upper bound of date range that the order was created (if outgoing) or submitted (if incoming). (optional)</param>/// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listIncomingOrders(utility::string_t from, utility::string_t to, utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="from">Lower bound of date range that the order was created (if outgoing) or submitted (if incoming). (optional)</param>/// <param name="to">Upper bound of date range that the order was created (if outgoing) or submitted (if incoming). (optional)</param>/// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listOutgoingOrders(utility::string_t from, utility::string_t to, utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="categoryID">ID of the category. (optional)</param>/// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listProducts(utility::string_t categoryID, utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listPromotions(utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="productID">ID of the product.</param>/// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listSpecs(utility::string_t productID, utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="parentID">ID of the parent.</param>/// <param name="depth">Depth of the category. (optional)</param>/// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listSubcategories(utility::string_t parentID, utility::string_t depth, utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="search">Word or phrase to search for. (optional)</param>/// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>/// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>/// <param name="page">Page of results to return. Default: 1 (optional)</param>/// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
    pplx::task<std::shared_ptr<Object>> listUserGroups(utility::string_t search, utility::string_t searchOn, utility::string_t sortBy, int32_t page, int32_t pageSize);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="user"></param>
    pplx::task<std::shared_ptr<Object>> patch(std::shared_ptr<User> user);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="addressID">ID of the address.</param>/// <param name="address"></param>
    pplx::task<void> patchAddress(utility::string_t addressID, std::shared_ptr<BuyerAddress> address);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="creditcardID">ID of the creditcard.</param>/// <param name="creditCard"></param>
    pplx::task<void> patchCreditCard(utility::string_t creditcardID, std::shared_ptr<BuyerCreditCard> creditCard);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="user"></param>
    pplx::task<std::shared_ptr<Object>> update(std::shared_ptr<User> user);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="addressID">ID of the address.</param>/// <param name="address"></param>
    pplx::task<std::shared_ptr<Object>> updateAddress(utility::string_t addressID, std::shared_ptr<BuyerAddress> address);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="creditcardID">ID of the creditcard.</param>/// <param name="creditCard"></param>
    pplx::task<std::shared_ptr<Object>> updateCreditCard(utility::string_t creditcardID, std::shared_ptr<BuyerCreditCard> creditCard);
    
protected:
    std::shared_ptr<ApiClient> m_ApiClient;    
};
    
}
}
}
}

#endif /* MeApi_H_ */

