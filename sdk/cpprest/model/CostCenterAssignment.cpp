/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "CostCenterAssignment.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CostCenterAssignment::CostCenterAssignment()
{
    m_CostCenterID = U("");
    m_CostCenterIDIsSet = false;
    m_UserID = U("");
    m_UserIDIsSet = false;
    m_UserGroupID = U("");
    m_UserGroupIDIsSet = false;
    
}

CostCenterAssignment::~CostCenterAssignment()
{
}

void CostCenterAssignment::validate() 
{
    // TODO: implement validation
}

web::json::value CostCenterAssignment::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_CostCenterIDIsSet)
    {
        val[U("CostCenterID")] = ModelBase::toJson(m_CostCenterID);
    }
    if(m_UserIDIsSet)
    {
        val[U("UserID")] = ModelBase::toJson(m_UserID);
    }
    if(m_UserGroupIDIsSet)
    {
        val[U("UserGroupID")] = ModelBase::toJson(m_UserGroupID);
    }
    

    return val;
}

void CostCenterAssignment::fromJson(web::json::value& val)
{
    if(val.has_field(U("CostCenterID")))
    {
        setCostCenterID(ModelBase::stringFromJson(val[U("CostCenterID")]));
                
    }
    if(val.has_field(U("UserID")))
    {
        setUserID(ModelBase::stringFromJson(val[U("UserID")]));
                
    }
    if(val.has_field(U("UserGroupID")))
    {
        setUserGroupID(ModelBase::stringFromJson(val[U("UserGroupID")]));
                
    }
    
}

void CostCenterAssignment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_CostCenterIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("CostCenterID"), m_CostCenterID));
                
    }
    if(m_UserIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("UserID"), m_UserID));
                
    }
    if(m_UserGroupIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("UserGroupID"), m_UserGroupID));
                
    }
    
}

void CostCenterAssignment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("CostCenterID")))
    {
        setCostCenterID(ModelBase::stringFromHttpContent(multipart->getContent(U("CostCenterID"))));
                
    }
    if(multipart->hasContent(U("UserID")))
    {
        setUserID(ModelBase::stringFromHttpContent(multipart->getContent(U("UserID"))));
                
    }
    if(multipart->hasContent(U("UserGroupID")))
    {
        setUserGroupID(ModelBase::stringFromHttpContent(multipart->getContent(U("UserGroupID"))));
                
    }
    
}
    
   
utility::string_t CostCenterAssignment::getCostCenterID() const
{
	return m_CostCenterID;
}
void CostCenterAssignment::setCostCenterID(utility::string_t value)
{
	m_CostCenterID = value;
    m_CostCenterIDIsSet = true;
}
bool CostCenterAssignment::CostCenterIDIsSet() const
{
    return m_CostCenterIDIsSet;
}
void CostCenterAssignment::unsetCostCenterID() 
{
    m_CostCenterIDIsSet = false;
}
utility::string_t CostCenterAssignment::getUserID() const
{
	return m_UserID;
}
void CostCenterAssignment::setUserID(utility::string_t value)
{
	m_UserID = value;
    m_UserIDIsSet = true;
}
bool CostCenterAssignment::UserIDIsSet() const
{
    return m_UserIDIsSet;
}
void CostCenterAssignment::unsetUserID() 
{
    m_UserIDIsSet = false;
}
utility::string_t CostCenterAssignment::getUserGroupID() const
{
	return m_UserGroupID;
}
void CostCenterAssignment::setUserGroupID(utility::string_t value)
{
	m_UserGroupID = value;
    m_UserGroupIDIsSet = true;
}
bool CostCenterAssignment::UserGroupIDIsSet() const
{
    return m_UserGroupIDIsSet;
}
void CostCenterAssignment::unsetUserGroupID() 
{
    m_UserGroupIDIsSet = false;
}

}
}
}
}

