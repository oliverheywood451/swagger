/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "CreditCard.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CreditCard::CreditCard()
{
    m_ID = U("");
    m_IDIsSet = false;
    m_Token = U("");
    m_TokenIsSet = false;
    m_CardType = U("");
    m_CardTypeIsSet = false;
    m_PartialAccountNumber = U("");
    m_PartialAccountNumberIsSet = false;
    m_CardholderName = U("");
    m_CardholderNameIsSet = false;
    m_ExpirationDateIsSet = false;
    m_XpIsSet = false;
    
}

CreditCard::~CreditCard()
{
}

void CreditCard::validate() 
{
    // TODO: implement validation
}

web::json::value CreditCard::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_IDIsSet)
    {
        val[U("ID")] = ModelBase::toJson(m_ID);
    }
    if(m_TokenIsSet)
    {
        val[U("Token")] = ModelBase::toJson(m_Token);
    }
    if(m_CardTypeIsSet)
    {
        val[U("CardType")] = ModelBase::toJson(m_CardType);
    }
    if(m_PartialAccountNumberIsSet)
    {
        val[U("PartialAccountNumber")] = ModelBase::toJson(m_PartialAccountNumber);
    }
    if(m_CardholderNameIsSet)
    {
        val[U("CardholderName")] = ModelBase::toJson(m_CardholderName);
    }
    if(m_ExpirationDateIsSet)
    {
        val[U("ExpirationDate")] = ModelBase::toJson(m_ExpirationDate);
    }
    if(m_XpIsSet)
    {
        val[U("xp")] = ModelBase::toJson(m_Xp);
    }
    

    return val;
}

void CreditCard::fromJson(web::json::value& val)
{
    if(val.has_field(U("ID")))
    {
        setID(ModelBase::stringFromJson(val[U("ID")]));
                
    }
    if(val.has_field(U("Token")))
    {
        setToken(ModelBase::stringFromJson(val[U("Token")]));
                
    }
    if(val.has_field(U("CardType")))
    {
        setCardType(ModelBase::stringFromJson(val[U("CardType")]));
                
    }
    if(val.has_field(U("PartialAccountNumber")))
    {
        setPartialAccountNumber(ModelBase::stringFromJson(val[U("PartialAccountNumber")]));
                
    }
    if(val.has_field(U("CardholderName")))
    {
        setCardholderName(ModelBase::stringFromJson(val[U("CardholderName")]));
                
    }
    if(val.has_field(U("ExpirationDate")))
    {
        if(!val[U("ExpirationDate")].is_null()) 
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromJson(val[U("ExpirationDate")]);
            setExpirationDate( newItem );
        }
                
    }
    if(val.has_field(U("xp")))
    {
        if(!val[U("xp")].is_null()) 
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("xp")]);
            setXp( newItem );
        }
                
    }
    
}

void CreditCard::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ID"), m_ID));
                
    }
    if(m_TokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Token"), m_Token));
                
    }
    if(m_CardTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("CardType"), m_CardType));
                
    }
    if(m_PartialAccountNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("PartialAccountNumber"), m_PartialAccountNumber));
                
    }
    if(m_CardholderNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("CardholderName"), m_CardholderName));
                
    }
    if(m_ExpirationDateIsSet)
    {
        if (m_ExpirationDate.get())
        {
            m_ExpirationDate->toMultipart(multipart, U("ExpirationDate."));
        }
                
    }
    if(m_XpIsSet)
    {
        if (m_Xp.get())
        {
            m_Xp->toMultipart(multipart, U("xp."));
        }
                
    }
    
}

void CreditCard::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("ID")))
    {
        setID(ModelBase::stringFromHttpContent(multipart->getContent(U("ID"))));
                
    }
    if(multipart->hasContent(U("Token")))
    {
        setToken(ModelBase::stringFromHttpContent(multipart->getContent(U("Token"))));
                
    }
    if(multipart->hasContent(U("CardType")))
    {
        setCardType(ModelBase::stringFromHttpContent(multipart->getContent(U("CardType"))));
                
    }
    if(multipart->hasContent(U("PartialAccountNumber")))
    {
        setPartialAccountNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("PartialAccountNumber"))));
                
    }
    if(multipart->hasContent(U("CardholderName")))
    {
        setCardholderName(ModelBase::stringFromHttpContent(multipart->getContent(U("CardholderName"))));
                
    }
    if(multipart->hasContent(U("ExpirationDate")))
    {
        if(multipart->hasContent(U("ExpirationDate")))
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromMultiPart(multipart, U("ExpirationDate."));
            setExpirationDate( newItem );
        }
                
    }
    if(multipart->hasContent(U("xp")))
    {
        if(multipart->hasContent(U("xp")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("xp."));
            setXp( newItem );
        }
                
    }
    
}
    
   
utility::string_t CreditCard::getID() const
{
	return m_ID;
}
void CreditCard::setID(utility::string_t value)
{
	m_ID = value;
    m_IDIsSet = true;
}
bool CreditCard::IDIsSet() const
{
    return m_IDIsSet;
}
void CreditCard::unsetID() 
{
    m_IDIsSet = false;
}
utility::string_t CreditCard::getToken() const
{
	return m_Token;
}
void CreditCard::setToken(utility::string_t value)
{
	m_Token = value;
    m_TokenIsSet = true;
}
bool CreditCard::TokenIsSet() const
{
    return m_TokenIsSet;
}
void CreditCard::unsetToken() 
{
    m_TokenIsSet = false;
}
utility::string_t CreditCard::getCardType() const
{
	return m_CardType;
}
void CreditCard::setCardType(utility::string_t value)
{
	m_CardType = value;
    m_CardTypeIsSet = true;
}
bool CreditCard::CardTypeIsSet() const
{
    return m_CardTypeIsSet;
}
void CreditCard::unsetCardType() 
{
    m_CardTypeIsSet = false;
}
utility::string_t CreditCard::getPartialAccountNumber() const
{
	return m_PartialAccountNumber;
}
void CreditCard::setPartialAccountNumber(utility::string_t value)
{
	m_PartialAccountNumber = value;
    m_PartialAccountNumberIsSet = true;
}
bool CreditCard::PartialAccountNumberIsSet() const
{
    return m_PartialAccountNumberIsSet;
}
void CreditCard::unsetPartialAccountNumber() 
{
    m_PartialAccountNumberIsSet = false;
}
utility::string_t CreditCard::getCardholderName() const
{
	return m_CardholderName;
}
void CreditCard::setCardholderName(utility::string_t value)
{
	m_CardholderName = value;
    m_CardholderNameIsSet = true;
}
bool CreditCard::CardholderNameIsSet() const
{
    return m_CardholderNameIsSet;
}
void CreditCard::unsetCardholderName() 
{
    m_CardholderNameIsSet = false;
}
utility::datetime CreditCard::getExpirationDate() const
{
	return m_ExpirationDate;
}
void CreditCard::setExpirationDate(utility::datetime value)
{
	m_ExpirationDate = value;
    m_ExpirationDateIsSet = true;
}
bool CreditCard::ExpirationDateIsSet() const
{
    return m_ExpirationDateIsSet;
}
void CreditCard::unsetExpirationDate() 
{
    m_ExpirationDateIsSet = false;
}
std::shared_ptr<Object> CreditCard::getXp() const
{
	return m_Xp;
}
void CreditCard::setXp(std::shared_ptr<Object> value)
{
	m_Xp = value;
    m_XpIsSet = true;
}
bool CreditCard::xpIsSet() const
{
    return m_XpIsSet;
}
void CreditCard::unsetXp() 
{
    m_XpIsSet = false;
}

}
}
}
}

