/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "PriceBreak.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PriceBreak::PriceBreak()
{
    m_Quantity = nullptr;
    m_QuantityIsSet = false;
    m_PriceIsSet = false;
    
}

PriceBreak::~PriceBreak()
{
}

void PriceBreak::validate() 
{
    // TODO: implement validation
}

web::json::value PriceBreak::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_QuantityIsSet)
    {
        val[U("Quantity")] = ModelBase::toJson(m_Quantity);
    }
    if(m_PriceIsSet)
    {
        val[U("Price")] = ModelBase::toJson(m_Price);
    }
    

    return val;
}

void PriceBreak::fromJson(web::json::value& val)
{
    if(val.has_field(U("Quantity")))
    {
        setQuantity(ModelBase::int32_tFromJson(val[U("Quantity")]));
    }
    if(val.has_field(U("Price")))
    {
        if(!val[U("Price")].is_null()) 
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("Price")]);
            setPrice( newItem );
        }
                
    }
    
}

void PriceBreak::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_QuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Quantity"), m_Quantity));
    }
    if(m_PriceIsSet)
    {
        if (m_Price.get())
        {
            m_Price->toMultipart(multipart, U("Price."));
        }
                
    }
    
}

void PriceBreak::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("Quantity")))
    {
        setQuantity(ModelBase::int32_tFromHttpContent(multipart->getContent(U("Quantity"))));
    }
    if(multipart->hasContent(U("Price")))
    {
        if(multipart->hasContent(U("Price")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("Price."));
            setPrice( newItem );
        }
                
    }
    
}
    
   
int32_t PriceBreak::getQuantity() const
{
	return m_Quantity;
}
void PriceBreak::setQuantity(int32_t value)
{
	m_Quantity = value;
    m_QuantityIsSet = true;
}
bool PriceBreak::QuantityIsSet() const
{
    return m_QuantityIsSet;
}
void PriceBreak::unsetQuantity() 
{
    m_QuantityIsSet = false;
}
std::shared_ptr<Number> PriceBreak::getPrice() const
{
	return m_Price;
}
void PriceBreak::setPrice(std::shared_ptr<Number> value)
{
	m_Price = value;
    m_PriceIsSet = true;
}
bool PriceBreak::PriceIsSet() const
{
    return m_PriceIsSet;
}
void PriceBreak::unsetPrice() 
{
    m_PriceIsSet = false;
}

}
}
}
}

