/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "User.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

User::User()
{
    m_ID = U("");
    m_IDIsSet = false;
    m_Username = U("");
    m_UsernameIsSet = false;
    m_Password = U("");
    m_PasswordIsSet = false;
    m_FirstName = U("");
    m_FirstNameIsSet = false;
    m_LastName = U("");
    m_LastNameIsSet = false;
    m_Email = U("");
    m_EmailIsSet = false;
    m_Phone = U("");
    m_PhoneIsSet = false;
    m_TermsAcceptedIsSet = false;
    m_Active = false;
    m_ActiveIsSet = false;
    m_XpIsSet = false;
    m_SecurityProfileID = U("");
    m_SecurityProfileIDIsSet = false;
    
}

User::~User()
{
}

void User::validate() 
{
    // TODO: implement validation
}

web::json::value User::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_IDIsSet)
    {
        val[U("ID")] = ModelBase::toJson(m_ID);
    }
    if(m_UsernameIsSet)
    {
        val[U("Username")] = ModelBase::toJson(m_Username);
    }
    if(m_PasswordIsSet)
    {
        val[U("Password")] = ModelBase::toJson(m_Password);
    }
    if(m_FirstNameIsSet)
    {
        val[U("FirstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_LastNameIsSet)
    {
        val[U("LastName")] = ModelBase::toJson(m_LastName);
    }
    if(m_EmailIsSet)
    {
        val[U("Email")] = ModelBase::toJson(m_Email);
    }
    if(m_PhoneIsSet)
    {
        val[U("Phone")] = ModelBase::toJson(m_Phone);
    }
    if(m_TermsAcceptedIsSet)
    {
        val[U("TermsAccepted")] = ModelBase::toJson(m_TermsAccepted);
    }
    if(m_ActiveIsSet)
    {
        val[U("Active")] = ModelBase::toJson(m_Active);
    }
    if(m_XpIsSet)
    {
        val[U("xp")] = ModelBase::toJson(m_Xp);
    }
    if(m_SecurityProfileIDIsSet)
    {
        val[U("SecurityProfileID")] = ModelBase::toJson(m_SecurityProfileID);
    }
    

    return val;
}

void User::fromJson(web::json::value& val)
{
    if(val.has_field(U("ID")))
    {
        setID(ModelBase::stringFromJson(val[U("ID")]));
                
    }
    if(val.has_field(U("Username")))
    {
        setUsername(ModelBase::stringFromJson(val[U("Username")]));
                
    }
    if(val.has_field(U("Password")))
    {
        setPassword(ModelBase::stringFromJson(val[U("Password")]));
                
    }
    if(val.has_field(U("FirstName")))
    {
        setFirstName(ModelBase::stringFromJson(val[U("FirstName")]));
                
    }
    if(val.has_field(U("LastName")))
    {
        setLastName(ModelBase::stringFromJson(val[U("LastName")]));
                
    }
    if(val.has_field(U("Email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("Email")]));
                
    }
    if(val.has_field(U("Phone")))
    {
        setPhone(ModelBase::stringFromJson(val[U("Phone")]));
                
    }
    if(val.has_field(U("TermsAccepted")))
    {
        if(!val[U("TermsAccepted")].is_null()) 
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromJson(val[U("TermsAccepted")]);
            setTermsAccepted( newItem );
        }
                
    }
    if(val.has_field(U("Active")))
    {
        setActive(ModelBase::boolFromJson(val[U("Active")]));
    }
    if(val.has_field(U("xp")))
    {
        if(!val[U("xp")].is_null()) 
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("xp")]);
            setXp( newItem );
        }
                
    }
    if(val.has_field(U("SecurityProfileID")))
    {
        setSecurityProfileID(ModelBase::stringFromJson(val[U("SecurityProfileID")]));
                
    }
    
}

void User::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ID"), m_ID));
                
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Username"), m_Username));
                
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Password"), m_Password));
                
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("FirstName"), m_FirstName));
                
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("LastName"), m_LastName));
                
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Email"), m_Email));
                
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Phone"), m_Phone));
                
    }
    if(m_TermsAcceptedIsSet)
    {
        if (m_TermsAccepted.get())
        {
            m_TermsAccepted->toMultipart(multipart, U("TermsAccepted."));
        }
                
    }
    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Active"), m_Active));
    }
    if(m_XpIsSet)
    {
        if (m_Xp.get())
        {
            m_Xp->toMultipart(multipart, U("xp."));
        }
                
    }
    if(m_SecurityProfileIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("SecurityProfileID"), m_SecurityProfileID));
                
    }
    
}

void User::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("ID")))
    {
        setID(ModelBase::stringFromHttpContent(multipart->getContent(U("ID"))));
                
    }
    if(multipart->hasContent(U("Username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("Username"))));
                
    }
    if(multipart->hasContent(U("Password")))
    {
        setPassword(ModelBase::stringFromHttpContent(multipart->getContent(U("Password"))));
                
    }
    if(multipart->hasContent(U("FirstName")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(U("FirstName"))));
                
    }
    if(multipart->hasContent(U("LastName")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(U("LastName"))));
                
    }
    if(multipart->hasContent(U("Email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("Email"))));
                
    }
    if(multipart->hasContent(U("Phone")))
    {
        setPhone(ModelBase::stringFromHttpContent(multipart->getContent(U("Phone"))));
                
    }
    if(multipart->hasContent(U("TermsAccepted")))
    {
        if(multipart->hasContent(U("TermsAccepted")))
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromMultiPart(multipart, U("TermsAccepted."));
            setTermsAccepted( newItem );
        }
                
    }
    if(multipart->hasContent(U("Active")))
    {
        setActive(ModelBase::boolFromHttpContent(multipart->getContent(U("Active"))));
    }
    if(multipart->hasContent(U("xp")))
    {
        if(multipart->hasContent(U("xp")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("xp."));
            setXp( newItem );
        }
                
    }
    if(multipart->hasContent(U("SecurityProfileID")))
    {
        setSecurityProfileID(ModelBase::stringFromHttpContent(multipart->getContent(U("SecurityProfileID"))));
                
    }
    
}
    
   
utility::string_t User::getID() const
{
	return m_ID;
}
void User::setID(utility::string_t value)
{
	m_ID = value;
    m_IDIsSet = true;
}
bool User::IDIsSet() const
{
    return m_IDIsSet;
}
void User::unsetID() 
{
    m_IDIsSet = false;
}
utility::string_t User::getUsername() const
{
	return m_Username;
}
void User::setUsername(utility::string_t value)
{
	m_Username = value;
    m_UsernameIsSet = true;
}
bool User::UsernameIsSet() const
{
    return m_UsernameIsSet;
}
void User::unsetUsername() 
{
    m_UsernameIsSet = false;
}
utility::string_t User::getPassword() const
{
	return m_Password;
}
void User::setPassword(utility::string_t value)
{
	m_Password = value;
    m_PasswordIsSet = true;
}
bool User::PasswordIsSet() const
{
    return m_PasswordIsSet;
}
void User::unsetPassword() 
{
    m_PasswordIsSet = false;
}
utility::string_t User::getFirstName() const
{
	return m_FirstName;
}
void User::setFirstName(utility::string_t value)
{
	m_FirstName = value;
    m_FirstNameIsSet = true;
}
bool User::FirstNameIsSet() const
{
    return m_FirstNameIsSet;
}
void User::unsetFirstName() 
{
    m_FirstNameIsSet = false;
}
utility::string_t User::getLastName() const
{
	return m_LastName;
}
void User::setLastName(utility::string_t value)
{
	m_LastName = value;
    m_LastNameIsSet = true;
}
bool User::LastNameIsSet() const
{
    return m_LastNameIsSet;
}
void User::unsetLastName() 
{
    m_LastNameIsSet = false;
}
utility::string_t User::getEmail() const
{
	return m_Email;
}
void User::setEmail(utility::string_t value)
{
	m_Email = value;
    m_EmailIsSet = true;
}
bool User::EmailIsSet() const
{
    return m_EmailIsSet;
}
void User::unsetEmail() 
{
    m_EmailIsSet = false;
}
utility::string_t User::getPhone() const
{
	return m_Phone;
}
void User::setPhone(utility::string_t value)
{
	m_Phone = value;
    m_PhoneIsSet = true;
}
bool User::PhoneIsSet() const
{
    return m_PhoneIsSet;
}
void User::unsetPhone() 
{
    m_PhoneIsSet = false;
}
utility::datetime User::getTermsAccepted() const
{
	return m_TermsAccepted;
}
void User::setTermsAccepted(utility::datetime value)
{
	m_TermsAccepted = value;
    m_TermsAcceptedIsSet = true;
}
bool User::TermsAcceptedIsSet() const
{
    return m_TermsAcceptedIsSet;
}
void User::unsetTermsAccepted() 
{
    m_TermsAcceptedIsSet = false;
}
bool User::getActive() const
{
	return m_Active;
}
void User::setActive(bool value)
{
	m_Active = value;
    m_ActiveIsSet = true;
}
bool User::ActiveIsSet() const
{
    return m_ActiveIsSet;
}
void User::unsetActive() 
{
    m_ActiveIsSet = false;
}
std::shared_ptr<Object> User::getXp() const
{
	return m_Xp;
}
void User::setXp(std::shared_ptr<Object> value)
{
	m_Xp = value;
    m_XpIsSet = true;
}
bool User::xpIsSet() const
{
    return m_XpIsSet;
}
void User::unsetXp() 
{
    m_XpIsSet = false;
}
utility::string_t User::getSecurityProfileID() const
{
	return m_SecurityProfileID;
}
void User::setSecurityProfileID(utility::string_t value)
{
	m_SecurityProfileID = value;
    m_SecurityProfileIDIsSet = true;
}
bool User::SecurityProfileIDIsSet() const
{
    return m_SecurityProfileIDIsSet;
}
void User::unsetSecurityProfileID() 
{
    m_SecurityProfileIDIsSet = false;
}

}
}
}
}

