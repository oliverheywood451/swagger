/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "PasswordResetRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PasswordResetRequest::PasswordResetRequest()
{
    m_ClientID = U("");
    m_ClientIDIsSet = false;
    m_Email = U("");
    m_EmailIsSet = false;
    m_Username = U("");
    m_UsernameIsSet = false;
    m_URL = U("");
    m_URLIsSet = false;
    
}

PasswordResetRequest::~PasswordResetRequest()
{
}

void PasswordResetRequest::validate() 
{
    // TODO: implement validation
}

web::json::value PasswordResetRequest::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_ClientIDIsSet)
    {
        val[U("ClientID")] = ModelBase::toJson(m_ClientID);
    }
    if(m_EmailIsSet)
    {
        val[U("Email")] = ModelBase::toJson(m_Email);
    }
    if(m_UsernameIsSet)
    {
        val[U("Username")] = ModelBase::toJson(m_Username);
    }
    if(m_URLIsSet)
    {
        val[U("URL")] = ModelBase::toJson(m_URL);
    }
    

    return val;
}

void PasswordResetRequest::fromJson(web::json::value& val)
{
    if(val.has_field(U("ClientID")))
    {
        setClientID(ModelBase::stringFromJson(val[U("ClientID")]));
                
    }
    if(val.has_field(U("Email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("Email")]));
                
    }
    if(val.has_field(U("Username")))
    {
        setUsername(ModelBase::stringFromJson(val[U("Username")]));
                
    }
    if(val.has_field(U("URL")))
    {
        setURL(ModelBase::stringFromJson(val[U("URL")]));
                
    }
    
}

void PasswordResetRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_ClientIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ClientID"), m_ClientID));
                
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Email"), m_Email));
                
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Username"), m_Username));
                
    }
    if(m_URLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("URL"), m_URL));
                
    }
    
}

void PasswordResetRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("ClientID")))
    {
        setClientID(ModelBase::stringFromHttpContent(multipart->getContent(U("ClientID"))));
                
    }
    if(multipart->hasContent(U("Email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("Email"))));
                
    }
    if(multipart->hasContent(U("Username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("Username"))));
                
    }
    if(multipart->hasContent(U("URL")))
    {
        setURL(ModelBase::stringFromHttpContent(multipart->getContent(U("URL"))));
                
    }
    
}
    
   
utility::string_t PasswordResetRequest::getClientID() const
{
	return m_ClientID;
}
void PasswordResetRequest::setClientID(utility::string_t value)
{
	m_ClientID = value;
    m_ClientIDIsSet = true;
}
bool PasswordResetRequest::ClientIDIsSet() const
{
    return m_ClientIDIsSet;
}
void PasswordResetRequest::unsetClientID() 
{
    m_ClientIDIsSet = false;
}
utility::string_t PasswordResetRequest::getEmail() const
{
	return m_Email;
}
void PasswordResetRequest::setEmail(utility::string_t value)
{
	m_Email = value;
    m_EmailIsSet = true;
}
bool PasswordResetRequest::EmailIsSet() const
{
    return m_EmailIsSet;
}
void PasswordResetRequest::unsetEmail() 
{
    m_EmailIsSet = false;
}
utility::string_t PasswordResetRequest::getUsername() const
{
	return m_Username;
}
void PasswordResetRequest::setUsername(utility::string_t value)
{
	m_Username = value;
    m_UsernameIsSet = true;
}
bool PasswordResetRequest::UsernameIsSet() const
{
    return m_UsernameIsSet;
}
void PasswordResetRequest::unsetUsername() 
{
    m_UsernameIsSet = false;
}
utility::string_t PasswordResetRequest::getURL() const
{
	return m_URL;
}
void PasswordResetRequest::setURL(utility::string_t value)
{
	m_URL = value;
    m_URLIsSet = true;
}
bool PasswordResetRequest::URLIsSet() const
{
    return m_URLIsSet;
}
void PasswordResetRequest::unsetURL() 
{
    m_URLIsSet = false;
}

}
}
}
}

