/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "Category.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Category::Category()
{
    m_ID = U("");
    m_IDIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_XpIsSet = false;
    m_ListOrder = nullptr;
    m_ListOrderIsSet = false;
    m_Active = false;
    m_ActiveIsSet = false;
    m_ParentID = U("");
    m_ParentIDIsSet = false;
    
}

Category::~Category()
{
}

void Category::validate() 
{
    // TODO: implement validation
}

web::json::value Category::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_IDIsSet)
    {
        val[U("ID")] = ModelBase::toJson(m_ID);
    }
    if(m_NameIsSet)
    {
        val[U("Name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[U("Description")] = ModelBase::toJson(m_Description);
    }
    if(m_XpIsSet)
    {
        val[U("xp")] = ModelBase::toJson(m_Xp);
    }
    if(m_ListOrderIsSet)
    {
        val[U("ListOrder")] = ModelBase::toJson(m_ListOrder);
    }
    if(m_ActiveIsSet)
    {
        val[U("Active")] = ModelBase::toJson(m_Active);
    }
    if(m_ParentIDIsSet)
    {
        val[U("ParentID")] = ModelBase::toJson(m_ParentID);
    }
    

    return val;
}

void Category::fromJson(web::json::value& val)
{
    if(val.has_field(U("ID")))
    {
        setID(ModelBase::stringFromJson(val[U("ID")]));
                
    }
    if(val.has_field(U("Name")))
    {
        setName(ModelBase::stringFromJson(val[U("Name")]));
                
    }
    if(val.has_field(U("Description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("Description")]));
                
    }
    if(val.has_field(U("xp")))
    {
        if(!val[U("xp")].is_null()) 
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("xp")]);
            setXp( newItem );
        }
                
    }
    if(val.has_field(U("ListOrder")))
    {
        setListOrder(ModelBase::int32_tFromJson(val[U("ListOrder")]));
    }
    if(val.has_field(U("Active")))
    {
        setActive(ModelBase::boolFromJson(val[U("Active")]));
    }
    if(val.has_field(U("ParentID")))
    {
        setParentID(ModelBase::stringFromJson(val[U("ParentID")]));
                
    }
    
}

void Category::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ID"), m_ID));
                
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Name"), m_Name));
                
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Description"), m_Description));
                
    }
    if(m_XpIsSet)
    {
        if (m_Xp.get())
        {
            m_Xp->toMultipart(multipart, U("xp."));
        }
                
    }
    if(m_ListOrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ListOrder"), m_ListOrder));
    }
    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Active"), m_Active));
    }
    if(m_ParentIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ParentID"), m_ParentID));
                
    }
    
}

void Category::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("ID")))
    {
        setID(ModelBase::stringFromHttpContent(multipart->getContent(U("ID"))));
                
    }
    if(multipart->hasContent(U("Name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("Name"))));
                
    }
    if(multipart->hasContent(U("Description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("Description"))));
                
    }
    if(multipart->hasContent(U("xp")))
    {
        if(multipart->hasContent(U("xp")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("xp."));
            setXp( newItem );
        }
                
    }
    if(multipart->hasContent(U("ListOrder")))
    {
        setListOrder(ModelBase::int32_tFromHttpContent(multipart->getContent(U("ListOrder"))));
    }
    if(multipart->hasContent(U("Active")))
    {
        setActive(ModelBase::boolFromHttpContent(multipart->getContent(U("Active"))));
    }
    if(multipart->hasContent(U("ParentID")))
    {
        setParentID(ModelBase::stringFromHttpContent(multipart->getContent(U("ParentID"))));
                
    }
    
}
    
   
utility::string_t Category::getID() const
{
	return m_ID;
}
void Category::setID(utility::string_t value)
{
	m_ID = value;
    m_IDIsSet = true;
}
bool Category::IDIsSet() const
{
    return m_IDIsSet;
}
void Category::unsetID() 
{
    m_IDIsSet = false;
}
utility::string_t Category::getName() const
{
	return m_Name;
}
void Category::setName(utility::string_t value)
{
	m_Name = value;
    m_NameIsSet = true;
}
bool Category::NameIsSet() const
{
    return m_NameIsSet;
}
void Category::unsetName() 
{
    m_NameIsSet = false;
}
utility::string_t Category::getDescription() const
{
	return m_Description;
}
void Category::setDescription(utility::string_t value)
{
	m_Description = value;
    m_DescriptionIsSet = true;
}
bool Category::DescriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Category::unsetDescription() 
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<Object> Category::getXp() const
{
	return m_Xp;
}
void Category::setXp(std::shared_ptr<Object> value)
{
	m_Xp = value;
    m_XpIsSet = true;
}
bool Category::xpIsSet() const
{
    return m_XpIsSet;
}
void Category::unsetXp() 
{
    m_XpIsSet = false;
}
int32_t Category::getListOrder() const
{
	return m_ListOrder;
}
void Category::setListOrder(int32_t value)
{
	m_ListOrder = value;
    m_ListOrderIsSet = true;
}
bool Category::ListOrderIsSet() const
{
    return m_ListOrderIsSet;
}
void Category::unsetListOrder() 
{
    m_ListOrderIsSet = false;
}
bool Category::getActive() const
{
	return m_Active;
}
void Category::setActive(bool value)
{
	m_Active = value;
    m_ActiveIsSet = true;
}
bool Category::ActiveIsSet() const
{
    return m_ActiveIsSet;
}
void Category::unsetActive() 
{
    m_ActiveIsSet = false;
}
utility::string_t Category::getParentID() const
{
	return m_ParentID;
}
void Category::setParentID(utility::string_t value)
{
	m_ParentID = value;
    m_ParentIDIsSet = true;
}
bool Category::ParentIDIsSet() const
{
    return m_ParentIDIsSet;
}
void Category::unsetParentID() 
{
    m_ParentIDIsSet = false;
}

}
}
}
}

