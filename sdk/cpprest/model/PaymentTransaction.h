/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * PaymentTransaction.h
 * 
 * 
 */

#ifndef PaymentTransaction_H_
#define PaymentTransaction_H_


#include "ModelBase.h"

#include "Number.h"
#include "Object.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  PaymentTransaction
	: public ModelBase
{
public:
    PaymentTransaction();
    virtual ~PaymentTransaction();

	/////////////////////////////////////////////
	/// ModelBase overrides
	
    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;
    
 	/////////////////////////////////////////////
	/// PaymentTransaction members
	   
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getID() const;
    void setID(utility::string_t value);
    bool IDIsSet() const;
    void unsetID();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
    bool TypeIsSet() const;
    void unsetType();
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDateExecuted() const;
    void setDateExecuted(utility::datetime value);
    bool DateExecutedIsSet() const;
    void unsetDateExecuted();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Number> getAmount() const;
    void setAmount(std::shared_ptr<Number> value);
    bool AmountIsSet() const;
    void unsetAmount();
    /// <summary>
    /// 
    /// </summary>
    bool getSucceeded() const;
    void setSucceeded(bool value);
    bool SucceededIsSet() const;
    void unsetSucceeded();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getResultCode() const;
    void setResultCode(utility::string_t value);
    bool ResultCodeIsSet() const;
    void unsetResultCode();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getResultMessage() const;
    void setResultMessage(utility::string_t value);
    bool ResultMessageIsSet() const;
    void unsetResultMessage();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getXp() const;
    void setXp(std::shared_ptr<Object> value);
    bool xpIsSet() const;
    void unsetXp();
    
protected:
    utility::string_t m_ID;
    bool m_IDIsSet;
utility::string_t m_Type;
    bool m_TypeIsSet;
utility::datetime m_DateExecuted;
    bool m_DateExecutedIsSet;
std::shared_ptr<Number> m_Amount;
    bool m_AmountIsSet;
bool m_Succeeded;
    bool m_SucceededIsSet;
utility::string_t m_ResultCode;
    bool m_ResultCodeIsSet;
utility::string_t m_ResultMessage;
    bool m_ResultMessageIsSet;
std::shared_ptr<Object> m_Xp;
    bool m_XpIsSet;
};

}
}
}
}

#endif /* PaymentTransaction_H_ */
