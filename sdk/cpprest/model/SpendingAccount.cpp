/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "SpendingAccount.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SpendingAccount::SpendingAccount()
{
    m_ID = U("");
    m_IDIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_BalanceIsSet = false;
    m_AllowAsPaymentMethod = false;
    m_AllowAsPaymentMethodIsSet = false;
    m_RedemptionCode = U("");
    m_RedemptionCodeIsSet = false;
    m_StartDateIsSet = false;
    m_EndDateIsSet = false;
    m_XpIsSet = false;
    
}

SpendingAccount::~SpendingAccount()
{
}

void SpendingAccount::validate() 
{
    // TODO: implement validation
}

web::json::value SpendingAccount::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_IDIsSet)
    {
        val[U("ID")] = ModelBase::toJson(m_ID);
    }
    if(m_NameIsSet)
    {
        val[U("Name")] = ModelBase::toJson(m_Name);
    }
    if(m_BalanceIsSet)
    {
        val[U("Balance")] = ModelBase::toJson(m_Balance);
    }
    if(m_AllowAsPaymentMethodIsSet)
    {
        val[U("AllowAsPaymentMethod")] = ModelBase::toJson(m_AllowAsPaymentMethod);
    }
    if(m_RedemptionCodeIsSet)
    {
        val[U("RedemptionCode")] = ModelBase::toJson(m_RedemptionCode);
    }
    if(m_StartDateIsSet)
    {
        val[U("StartDate")] = ModelBase::toJson(m_StartDate);
    }
    if(m_EndDateIsSet)
    {
        val[U("EndDate")] = ModelBase::toJson(m_EndDate);
    }
    if(m_XpIsSet)
    {
        val[U("xp")] = ModelBase::toJson(m_Xp);
    }
    

    return val;
}

void SpendingAccount::fromJson(web::json::value& val)
{
    if(val.has_field(U("ID")))
    {
        setID(ModelBase::stringFromJson(val[U("ID")]));
                
    }
    if(val.has_field(U("Name")))
    {
        setName(ModelBase::stringFromJson(val[U("Name")]));
                
    }
    if(val.has_field(U("Balance")))
    {
        if(!val[U("Balance")].is_null()) 
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("Balance")]);
            setBalance( newItem );
        }
                
    }
    if(val.has_field(U("AllowAsPaymentMethod")))
    {
        setAllowAsPaymentMethod(ModelBase::boolFromJson(val[U("AllowAsPaymentMethod")]));
    }
    if(val.has_field(U("RedemptionCode")))
    {
        setRedemptionCode(ModelBase::stringFromJson(val[U("RedemptionCode")]));
                
    }
    if(val.has_field(U("StartDate")))
    {
        if(!val[U("StartDate")].is_null()) 
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromJson(val[U("StartDate")]);
            setStartDate( newItem );
        }
                
    }
    if(val.has_field(U("EndDate")))
    {
        if(!val[U("EndDate")].is_null()) 
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromJson(val[U("EndDate")]);
            setEndDate( newItem );
        }
                
    }
    if(val.has_field(U("xp")))
    {
        if(!val[U("xp")].is_null()) 
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("xp")]);
            setXp( newItem );
        }
                
    }
    
}

void SpendingAccount::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ID"), m_ID));
                
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Name"), m_Name));
                
    }
    if(m_BalanceIsSet)
    {
        if (m_Balance.get())
        {
            m_Balance->toMultipart(multipart, U("Balance."));
        }
                
    }
    if(m_AllowAsPaymentMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("AllowAsPaymentMethod"), m_AllowAsPaymentMethod));
    }
    if(m_RedemptionCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("RedemptionCode"), m_RedemptionCode));
                
    }
    if(m_StartDateIsSet)
    {
        if (m_StartDate.get())
        {
            m_StartDate->toMultipart(multipart, U("StartDate."));
        }
                
    }
    if(m_EndDateIsSet)
    {
        if (m_EndDate.get())
        {
            m_EndDate->toMultipart(multipart, U("EndDate."));
        }
                
    }
    if(m_XpIsSet)
    {
        if (m_Xp.get())
        {
            m_Xp->toMultipart(multipart, U("xp."));
        }
                
    }
    
}

void SpendingAccount::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("ID")))
    {
        setID(ModelBase::stringFromHttpContent(multipart->getContent(U("ID"))));
                
    }
    if(multipart->hasContent(U("Name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("Name"))));
                
    }
    if(multipart->hasContent(U("Balance")))
    {
        if(multipart->hasContent(U("Balance")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("Balance."));
            setBalance( newItem );
        }
                
    }
    if(multipart->hasContent(U("AllowAsPaymentMethod")))
    {
        setAllowAsPaymentMethod(ModelBase::boolFromHttpContent(multipart->getContent(U("AllowAsPaymentMethod"))));
    }
    if(multipart->hasContent(U("RedemptionCode")))
    {
        setRedemptionCode(ModelBase::stringFromHttpContent(multipart->getContent(U("RedemptionCode"))));
                
    }
    if(multipart->hasContent(U("StartDate")))
    {
        if(multipart->hasContent(U("StartDate")))
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromMultiPart(multipart, U("StartDate."));
            setStartDate( newItem );
        }
                
    }
    if(multipart->hasContent(U("EndDate")))
    {
        if(multipart->hasContent(U("EndDate")))
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromMultiPart(multipart, U("EndDate."));
            setEndDate( newItem );
        }
                
    }
    if(multipart->hasContent(U("xp")))
    {
        if(multipart->hasContent(U("xp")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("xp."));
            setXp( newItem );
        }
                
    }
    
}
    
   
utility::string_t SpendingAccount::getID() const
{
	return m_ID;
}
void SpendingAccount::setID(utility::string_t value)
{
	m_ID = value;
    m_IDIsSet = true;
}
bool SpendingAccount::IDIsSet() const
{
    return m_IDIsSet;
}
void SpendingAccount::unsetID() 
{
    m_IDIsSet = false;
}
utility::string_t SpendingAccount::getName() const
{
	return m_Name;
}
void SpendingAccount::setName(utility::string_t value)
{
	m_Name = value;
    m_NameIsSet = true;
}
bool SpendingAccount::NameIsSet() const
{
    return m_NameIsSet;
}
void SpendingAccount::unsetName() 
{
    m_NameIsSet = false;
}
std::shared_ptr<Number> SpendingAccount::getBalance() const
{
	return m_Balance;
}
void SpendingAccount::setBalance(std::shared_ptr<Number> value)
{
	m_Balance = value;
    m_BalanceIsSet = true;
}
bool SpendingAccount::BalanceIsSet() const
{
    return m_BalanceIsSet;
}
void SpendingAccount::unsetBalance() 
{
    m_BalanceIsSet = false;
}
bool SpendingAccount::getAllowAsPaymentMethod() const
{
	return m_AllowAsPaymentMethod;
}
void SpendingAccount::setAllowAsPaymentMethod(bool value)
{
	m_AllowAsPaymentMethod = value;
    m_AllowAsPaymentMethodIsSet = true;
}
bool SpendingAccount::AllowAsPaymentMethodIsSet() const
{
    return m_AllowAsPaymentMethodIsSet;
}
void SpendingAccount::unsetAllowAsPaymentMethod() 
{
    m_AllowAsPaymentMethodIsSet = false;
}
utility::string_t SpendingAccount::getRedemptionCode() const
{
	return m_RedemptionCode;
}
void SpendingAccount::setRedemptionCode(utility::string_t value)
{
	m_RedemptionCode = value;
    m_RedemptionCodeIsSet = true;
}
bool SpendingAccount::RedemptionCodeIsSet() const
{
    return m_RedemptionCodeIsSet;
}
void SpendingAccount::unsetRedemptionCode() 
{
    m_RedemptionCodeIsSet = false;
}
utility::datetime SpendingAccount::getStartDate() const
{
	return m_StartDate;
}
void SpendingAccount::setStartDate(utility::datetime value)
{
	m_StartDate = value;
    m_StartDateIsSet = true;
}
bool SpendingAccount::StartDateIsSet() const
{
    return m_StartDateIsSet;
}
void SpendingAccount::unsetStartDate() 
{
    m_StartDateIsSet = false;
}
utility::datetime SpendingAccount::getEndDate() const
{
	return m_EndDate;
}
void SpendingAccount::setEndDate(utility::datetime value)
{
	m_EndDate = value;
    m_EndDateIsSet = true;
}
bool SpendingAccount::EndDateIsSet() const
{
    return m_EndDateIsSet;
}
void SpendingAccount::unsetEndDate() 
{
    m_EndDateIsSet = false;
}
std::shared_ptr<Object> SpendingAccount::getXp() const
{
	return m_Xp;
}
void SpendingAccount::setXp(std::shared_ptr<Object> value)
{
	m_Xp = value;
    m_XpIsSet = true;
}
bool SpendingAccount::xpIsSet() const
{
    return m_XpIsSet;
}
void SpendingAccount::unsetXp() 
{
    m_XpIsSet = false;
}

}
}
}
}

