/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "ApprovalRule.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ApprovalRule::ApprovalRule()
{
    m_ID = U("");
    m_IDIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_ApprovingGroupID = U("");
    m_ApprovingGroupIDIsSet = false;
    m_RuleExpression = U("");
    m_RuleExpressionIsSet = false;
    m_Scope = U("");
    m_ScopeIsSet = false;
    m_ScopeTimeUnit = U("");
    m_ScopeTimeUnitIsSet = false;
    m_ScopeTimeNumber = nullptr;
    m_ScopeTimeNumberIsSet = false;
    m_ScopeStartDateIsSet = false;
    m_ExpireAfterTimeUnit = U("");
    m_ExpireAfterTimeUnitIsSet = false;
    m_ExpireAfterNumber = nullptr;
    m_ExpireAfterNumberIsSet = false;
    m_ApproveOnExpire = false;
    m_ApproveOnExpireIsSet = false;
    m_XpIsSet = false;
    
}

ApprovalRule::~ApprovalRule()
{
}

void ApprovalRule::validate() 
{
    // TODO: implement validation
}

web::json::value ApprovalRule::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_IDIsSet)
    {
        val[U("ID")] = ModelBase::toJson(m_ID);
    }
    if(m_NameIsSet)
    {
        val[U("Name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[U("Description")] = ModelBase::toJson(m_Description);
    }
    if(m_ApprovingGroupIDIsSet)
    {
        val[U("ApprovingGroupID")] = ModelBase::toJson(m_ApprovingGroupID);
    }
    if(m_RuleExpressionIsSet)
    {
        val[U("RuleExpression")] = ModelBase::toJson(m_RuleExpression);
    }
    if(m_ScopeIsSet)
    {
        val[U("Scope")] = ModelBase::toJson(m_Scope);
    }
    if(m_ScopeTimeUnitIsSet)
    {
        val[U("ScopeTimeUnit")] = ModelBase::toJson(m_ScopeTimeUnit);
    }
    if(m_ScopeTimeNumberIsSet)
    {
        val[U("ScopeTimeNumber")] = ModelBase::toJson(m_ScopeTimeNumber);
    }
    if(m_ScopeStartDateIsSet)
    {
        val[U("ScopeStartDate")] = ModelBase::toJson(m_ScopeStartDate);
    }
    if(m_ExpireAfterTimeUnitIsSet)
    {
        val[U("ExpireAfterTimeUnit")] = ModelBase::toJson(m_ExpireAfterTimeUnit);
    }
    if(m_ExpireAfterNumberIsSet)
    {
        val[U("ExpireAfterNumber")] = ModelBase::toJson(m_ExpireAfterNumber);
    }
    if(m_ApproveOnExpireIsSet)
    {
        val[U("ApproveOnExpire")] = ModelBase::toJson(m_ApproveOnExpire);
    }
    if(m_XpIsSet)
    {
        val[U("xp")] = ModelBase::toJson(m_Xp);
    }
    

    return val;
}

void ApprovalRule::fromJson(web::json::value& val)
{
    if(val.has_field(U("ID")))
    {
        setID(ModelBase::stringFromJson(val[U("ID")]));
                
    }
    if(val.has_field(U("Name")))
    {
        setName(ModelBase::stringFromJson(val[U("Name")]));
                
    }
    if(val.has_field(U("Description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("Description")]));
                
    }
    if(val.has_field(U("ApprovingGroupID")))
    {
        setApprovingGroupID(ModelBase::stringFromJson(val[U("ApprovingGroupID")]));
                
    }
    if(val.has_field(U("RuleExpression")))
    {
        setRuleExpression(ModelBase::stringFromJson(val[U("RuleExpression")]));
                
    }
    if(val.has_field(U("Scope")))
    {
        setScope(ModelBase::stringFromJson(val[U("Scope")]));
                
    }
    if(val.has_field(U("ScopeTimeUnit")))
    {
        setScopeTimeUnit(ModelBase::stringFromJson(val[U("ScopeTimeUnit")]));
                
    }
    if(val.has_field(U("ScopeTimeNumber")))
    {
        setScopeTimeNumber(ModelBase::int32_tFromJson(val[U("ScopeTimeNumber")]));
    }
    if(val.has_field(U("ScopeStartDate")))
    {
        if(!val[U("ScopeStartDate")].is_null()) 
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromJson(val[U("ScopeStartDate")]);
            setScopeStartDate( newItem );
        }
                
    }
    if(val.has_field(U("ExpireAfterTimeUnit")))
    {
        setExpireAfterTimeUnit(ModelBase::stringFromJson(val[U("ExpireAfterTimeUnit")]));
                
    }
    if(val.has_field(U("ExpireAfterNumber")))
    {
        setExpireAfterNumber(ModelBase::int32_tFromJson(val[U("ExpireAfterNumber")]));
    }
    if(val.has_field(U("ApproveOnExpire")))
    {
        setApproveOnExpire(ModelBase::boolFromJson(val[U("ApproveOnExpire")]));
    }
    if(val.has_field(U("xp")))
    {
        if(!val[U("xp")].is_null()) 
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("xp")]);
            setXp( newItem );
        }
                
    }
    
}

void ApprovalRule::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ID"), m_ID));
                
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Name"), m_Name));
                
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Description"), m_Description));
                
    }
    if(m_ApprovingGroupIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ApprovingGroupID"), m_ApprovingGroupID));
                
    }
    if(m_RuleExpressionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("RuleExpression"), m_RuleExpression));
                
    }
    if(m_ScopeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Scope"), m_Scope));
                
    }
    if(m_ScopeTimeUnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ScopeTimeUnit"), m_ScopeTimeUnit));
                
    }
    if(m_ScopeTimeNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ScopeTimeNumber"), m_ScopeTimeNumber));
    }
    if(m_ScopeStartDateIsSet)
    {
        if (m_ScopeStartDate.get())
        {
            m_ScopeStartDate->toMultipart(multipart, U("ScopeStartDate."));
        }
                
    }
    if(m_ExpireAfterTimeUnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ExpireAfterTimeUnit"), m_ExpireAfterTimeUnit));
                
    }
    if(m_ExpireAfterNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ExpireAfterNumber"), m_ExpireAfterNumber));
    }
    if(m_ApproveOnExpireIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ApproveOnExpire"), m_ApproveOnExpire));
    }
    if(m_XpIsSet)
    {
        if (m_Xp.get())
        {
            m_Xp->toMultipart(multipart, U("xp."));
        }
                
    }
    
}

void ApprovalRule::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("ID")))
    {
        setID(ModelBase::stringFromHttpContent(multipart->getContent(U("ID"))));
                
    }
    if(multipart->hasContent(U("Name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("Name"))));
                
    }
    if(multipart->hasContent(U("Description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("Description"))));
                
    }
    if(multipart->hasContent(U("ApprovingGroupID")))
    {
        setApprovingGroupID(ModelBase::stringFromHttpContent(multipart->getContent(U("ApprovingGroupID"))));
                
    }
    if(multipart->hasContent(U("RuleExpression")))
    {
        setRuleExpression(ModelBase::stringFromHttpContent(multipart->getContent(U("RuleExpression"))));
                
    }
    if(multipart->hasContent(U("Scope")))
    {
        setScope(ModelBase::stringFromHttpContent(multipart->getContent(U("Scope"))));
                
    }
    if(multipart->hasContent(U("ScopeTimeUnit")))
    {
        setScopeTimeUnit(ModelBase::stringFromHttpContent(multipart->getContent(U("ScopeTimeUnit"))));
                
    }
    if(multipart->hasContent(U("ScopeTimeNumber")))
    {
        setScopeTimeNumber(ModelBase::int32_tFromHttpContent(multipart->getContent(U("ScopeTimeNumber"))));
    }
    if(multipart->hasContent(U("ScopeStartDate")))
    {
        if(multipart->hasContent(U("ScopeStartDate")))
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromMultiPart(multipart, U("ScopeStartDate."));
            setScopeStartDate( newItem );
        }
                
    }
    if(multipart->hasContent(U("ExpireAfterTimeUnit")))
    {
        setExpireAfterTimeUnit(ModelBase::stringFromHttpContent(multipart->getContent(U("ExpireAfterTimeUnit"))));
                
    }
    if(multipart->hasContent(U("ExpireAfterNumber")))
    {
        setExpireAfterNumber(ModelBase::int32_tFromHttpContent(multipart->getContent(U("ExpireAfterNumber"))));
    }
    if(multipart->hasContent(U("ApproveOnExpire")))
    {
        setApproveOnExpire(ModelBase::boolFromHttpContent(multipart->getContent(U("ApproveOnExpire"))));
    }
    if(multipart->hasContent(U("xp")))
    {
        if(multipart->hasContent(U("xp")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("xp."));
            setXp( newItem );
        }
                
    }
    
}
    
   
utility::string_t ApprovalRule::getID() const
{
	return m_ID;
}
void ApprovalRule::setID(utility::string_t value)
{
	m_ID = value;
    m_IDIsSet = true;
}
bool ApprovalRule::IDIsSet() const
{
    return m_IDIsSet;
}
void ApprovalRule::unsetID() 
{
    m_IDIsSet = false;
}
utility::string_t ApprovalRule::getName() const
{
	return m_Name;
}
void ApprovalRule::setName(utility::string_t value)
{
	m_Name = value;
    m_NameIsSet = true;
}
bool ApprovalRule::NameIsSet() const
{
    return m_NameIsSet;
}
void ApprovalRule::unsetName() 
{
    m_NameIsSet = false;
}
utility::string_t ApprovalRule::getDescription() const
{
	return m_Description;
}
void ApprovalRule::setDescription(utility::string_t value)
{
	m_Description = value;
    m_DescriptionIsSet = true;
}
bool ApprovalRule::DescriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void ApprovalRule::unsetDescription() 
{
    m_DescriptionIsSet = false;
}
utility::string_t ApprovalRule::getApprovingGroupID() const
{
	return m_ApprovingGroupID;
}
void ApprovalRule::setApprovingGroupID(utility::string_t value)
{
	m_ApprovingGroupID = value;
    m_ApprovingGroupIDIsSet = true;
}
bool ApprovalRule::ApprovingGroupIDIsSet() const
{
    return m_ApprovingGroupIDIsSet;
}
void ApprovalRule::unsetApprovingGroupID() 
{
    m_ApprovingGroupIDIsSet = false;
}
utility::string_t ApprovalRule::getRuleExpression() const
{
	return m_RuleExpression;
}
void ApprovalRule::setRuleExpression(utility::string_t value)
{
	m_RuleExpression = value;
    m_RuleExpressionIsSet = true;
}
bool ApprovalRule::RuleExpressionIsSet() const
{
    return m_RuleExpressionIsSet;
}
void ApprovalRule::unsetRuleExpression() 
{
    m_RuleExpressionIsSet = false;
}
utility::string_t ApprovalRule::getScope() const
{
	return m_Scope;
}
void ApprovalRule::setScope(utility::string_t value)
{
	m_Scope = value;
    m_ScopeIsSet = true;
}
bool ApprovalRule::ScopeIsSet() const
{
    return m_ScopeIsSet;
}
void ApprovalRule::unsetScope() 
{
    m_ScopeIsSet = false;
}
utility::string_t ApprovalRule::getScopeTimeUnit() const
{
	return m_ScopeTimeUnit;
}
void ApprovalRule::setScopeTimeUnit(utility::string_t value)
{
	m_ScopeTimeUnit = value;
    m_ScopeTimeUnitIsSet = true;
}
bool ApprovalRule::ScopeTimeUnitIsSet() const
{
    return m_ScopeTimeUnitIsSet;
}
void ApprovalRule::unsetScopeTimeUnit() 
{
    m_ScopeTimeUnitIsSet = false;
}
int32_t ApprovalRule::getScopeTimeNumber() const
{
	return m_ScopeTimeNumber;
}
void ApprovalRule::setScopeTimeNumber(int32_t value)
{
	m_ScopeTimeNumber = value;
    m_ScopeTimeNumberIsSet = true;
}
bool ApprovalRule::ScopeTimeNumberIsSet() const
{
    return m_ScopeTimeNumberIsSet;
}
void ApprovalRule::unsetScopeTimeNumber() 
{
    m_ScopeTimeNumberIsSet = false;
}
utility::datetime ApprovalRule::getScopeStartDate() const
{
	return m_ScopeStartDate;
}
void ApprovalRule::setScopeStartDate(utility::datetime value)
{
	m_ScopeStartDate = value;
    m_ScopeStartDateIsSet = true;
}
bool ApprovalRule::ScopeStartDateIsSet() const
{
    return m_ScopeStartDateIsSet;
}
void ApprovalRule::unsetScopeStartDate() 
{
    m_ScopeStartDateIsSet = false;
}
utility::string_t ApprovalRule::getExpireAfterTimeUnit() const
{
	return m_ExpireAfterTimeUnit;
}
void ApprovalRule::setExpireAfterTimeUnit(utility::string_t value)
{
	m_ExpireAfterTimeUnit = value;
    m_ExpireAfterTimeUnitIsSet = true;
}
bool ApprovalRule::ExpireAfterTimeUnitIsSet() const
{
    return m_ExpireAfterTimeUnitIsSet;
}
void ApprovalRule::unsetExpireAfterTimeUnit() 
{
    m_ExpireAfterTimeUnitIsSet = false;
}
int32_t ApprovalRule::getExpireAfterNumber() const
{
	return m_ExpireAfterNumber;
}
void ApprovalRule::setExpireAfterNumber(int32_t value)
{
	m_ExpireAfterNumber = value;
    m_ExpireAfterNumberIsSet = true;
}
bool ApprovalRule::ExpireAfterNumberIsSet() const
{
    return m_ExpireAfterNumberIsSet;
}
void ApprovalRule::unsetExpireAfterNumber() 
{
    m_ExpireAfterNumberIsSet = false;
}
bool ApprovalRule::getApproveOnExpire() const
{
	return m_ApproveOnExpire;
}
void ApprovalRule::setApproveOnExpire(bool value)
{
	m_ApproveOnExpire = value;
    m_ApproveOnExpireIsSet = true;
}
bool ApprovalRule::ApproveOnExpireIsSet() const
{
    return m_ApproveOnExpireIsSet;
}
void ApprovalRule::unsetApproveOnExpire() 
{
    m_ApproveOnExpireIsSet = false;
}
std::shared_ptr<Object> ApprovalRule::getXp() const
{
	return m_Xp;
}
void ApprovalRule::setXp(std::shared_ptr<Object> value)
{
	m_Xp = value;
    m_XpIsSet = true;
}
bool ApprovalRule::xpIsSet() const
{
    return m_XpIsSet;
}
void ApprovalRule::unsetXp() 
{
    m_XpIsSet = false;
}

}
}
}
}

