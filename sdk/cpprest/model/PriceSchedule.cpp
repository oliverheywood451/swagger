/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "PriceSchedule.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PriceSchedule::PriceSchedule()
{
    m_ID = U("");
    m_IDIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_ApplyTax = false;
    m_ApplyTaxIsSet = false;
    m_ApplyShipping = false;
    m_ApplyShippingIsSet = false;
    m_MaxQuantity = nullptr;
    m_MaxQuantityIsSet = false;
    m_UseCumulativeQuantity = false;
    m_UseCumulativeQuantityIsSet = false;
    m_RestrictedQuantity = false;
    m_RestrictedQuantityIsSet = false;
    m_OrderType = U("");
    m_OrderTypeIsSet = false;
    m_PriceBreaksIsSet = false;
    m_XpIsSet = false;
    
}

PriceSchedule::~PriceSchedule()
{
}

void PriceSchedule::validate() 
{
    // TODO: implement validation
}

web::json::value PriceSchedule::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_IDIsSet)
    {
        val[U("ID")] = ModelBase::toJson(m_ID);
    }
    if(m_NameIsSet)
    {
        val[U("Name")] = ModelBase::toJson(m_Name);
    }
    if(m_ApplyTaxIsSet)
    {
        val[U("ApplyTax")] = ModelBase::toJson(m_ApplyTax);
    }
    if(m_ApplyShippingIsSet)
    {
        val[U("ApplyShipping")] = ModelBase::toJson(m_ApplyShipping);
    }
    if(m_MaxQuantityIsSet)
    {
        val[U("MaxQuantity")] = ModelBase::toJson(m_MaxQuantity);
    }
    if(m_UseCumulativeQuantityIsSet)
    {
        val[U("UseCumulativeQuantity")] = ModelBase::toJson(m_UseCumulativeQuantity);
    }
    if(m_RestrictedQuantityIsSet)
    {
        val[U("RestrictedQuantity")] = ModelBase::toJson(m_RestrictedQuantity);
    }
    if(m_OrderTypeIsSet)
    {
        val[U("OrderType")] = ModelBase::toJson(m_OrderType);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_PriceBreaks )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            val[U("PriceBreaks")] = web::json::value::array(jsonArray);
        }
    }
    if(m_XpIsSet)
    {
        val[U("xp")] = ModelBase::toJson(m_Xp);
    }
    

    return val;
}

void PriceSchedule::fromJson(web::json::value& val)
{
    if(val.has_field(U("ID")))
    {
        setID(ModelBase::stringFromJson(val[U("ID")]));
                
    }
    if(val.has_field(U("Name")))
    {
        setName(ModelBase::stringFromJson(val[U("Name")]));
                
    }
    if(val.has_field(U("ApplyTax")))
    {
        setApplyTax(ModelBase::boolFromJson(val[U("ApplyTax")]));
    }
    if(val.has_field(U("ApplyShipping")))
    {
        setApplyShipping(ModelBase::boolFromJson(val[U("ApplyShipping")]));
    }
    if(val.has_field(U("MaxQuantity")))
    {
        setMaxQuantity(ModelBase::int32_tFromJson(val[U("MaxQuantity")]));
    }
    if(val.has_field(U("UseCumulativeQuantity")))
    {
        setUseCumulativeQuantity(ModelBase::boolFromJson(val[U("UseCumulativeQuantity")]));
    }
    if(val.has_field(U("RestrictedQuantity")))
    {
        setRestrictedQuantity(ModelBase::boolFromJson(val[U("RestrictedQuantity")]));
    }
    if(val.has_field(U("OrderType")))
    {
        setOrderType(ModelBase::stringFromJson(val[U("OrderType")]));
                
    }
    {
        m_PriceBreaks.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("PriceBreaks")))
        {
        for( auto& item : val[U("PriceBreaks")].as_array() )
        {
            
            if(item.is_null()) 
            {
                m_PriceBreaks.push_back( std::shared_ptr<ShipmentItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<ShipmentItem> newItem(new ShipmentItem());
                newItem->fromJson(item);
                m_PriceBreaks.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("xp")))
    {
        if(!val[U("xp")].is_null()) 
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("xp")]);
            setXp( newItem );
        }
                
    }
    
}

void PriceSchedule::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ID"), m_ID));
                
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Name"), m_Name));
                
    }
    if(m_ApplyTaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ApplyTax"), m_ApplyTax));
    }
    if(m_ApplyShippingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ApplyShipping"), m_ApplyShipping));
    }
    if(m_MaxQuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("MaxQuantity"), m_MaxQuantity));
    }
    if(m_UseCumulativeQuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("UseCumulativeQuantity"), m_UseCumulativeQuantity));
    }
    if(m_RestrictedQuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("RestrictedQuantity"), m_RestrictedQuantity));
    }
    if(m_OrderTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("OrderType"), m_OrderType));
                
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_PriceBreaks )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("PriceBreaks"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_XpIsSet)
    {
        if (m_Xp.get())
        {
            m_Xp->toMultipart(multipart, U("xp."));
        }
                
    }
    
}

void PriceSchedule::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("ID")))
    {
        setID(ModelBase::stringFromHttpContent(multipart->getContent(U("ID"))));
                
    }
    if(multipart->hasContent(U("Name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("Name"))));
                
    }
    if(multipart->hasContent(U("ApplyTax")))
    {
        setApplyTax(ModelBase::boolFromHttpContent(multipart->getContent(U("ApplyTax"))));
    }
    if(multipart->hasContent(U("ApplyShipping")))
    {
        setApplyShipping(ModelBase::boolFromHttpContent(multipart->getContent(U("ApplyShipping"))));
    }
    if(multipart->hasContent(U("MaxQuantity")))
    {
        setMaxQuantity(ModelBase::int32_tFromHttpContent(multipart->getContent(U("MaxQuantity"))));
    }
    if(multipart->hasContent(U("UseCumulativeQuantity")))
    {
        setUseCumulativeQuantity(ModelBase::boolFromHttpContent(multipart->getContent(U("UseCumulativeQuantity"))));
    }
    if(multipart->hasContent(U("RestrictedQuantity")))
    {
        setRestrictedQuantity(ModelBase::boolFromHttpContent(multipart->getContent(U("RestrictedQuantity"))));
    }
    if(multipart->hasContent(U("OrderType")))
    {
        setOrderType(ModelBase::stringFromHttpContent(multipart->getContent(U("OrderType"))));
                
    }
    {
        m_PriceBreaks.clear();
        if(multipart->hasContent(U("PriceBreaks")))
        {            
        
        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("PriceBreaks"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null()) 
            {
                m_PriceBreaks.push_back( std::shared_ptr<ShipmentItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<ShipmentItem> newItem(new ShipmentItem());
                newItem->fromJson(item);
                m_PriceBreaks.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("xp")))
    {
        if(multipart->hasContent(U("xp")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("xp."));
            setXp( newItem );
        }
                
    }
    
}
    
   
utility::string_t PriceSchedule::getID() const
{
	return m_ID;
}
void PriceSchedule::setID(utility::string_t value)
{
	m_ID = value;
    m_IDIsSet = true;
}
bool PriceSchedule::IDIsSet() const
{
    return m_IDIsSet;
}
void PriceSchedule::unsetID() 
{
    m_IDIsSet = false;
}
utility::string_t PriceSchedule::getName() const
{
	return m_Name;
}
void PriceSchedule::setName(utility::string_t value)
{
	m_Name = value;
    m_NameIsSet = true;
}
bool PriceSchedule::NameIsSet() const
{
    return m_NameIsSet;
}
void PriceSchedule::unsetName() 
{
    m_NameIsSet = false;
}
bool PriceSchedule::getApplyTax() const
{
	return m_ApplyTax;
}
void PriceSchedule::setApplyTax(bool value)
{
	m_ApplyTax = value;
    m_ApplyTaxIsSet = true;
}
bool PriceSchedule::ApplyTaxIsSet() const
{
    return m_ApplyTaxIsSet;
}
void PriceSchedule::unsetApplyTax() 
{
    m_ApplyTaxIsSet = false;
}
bool PriceSchedule::getApplyShipping() const
{
	return m_ApplyShipping;
}
void PriceSchedule::setApplyShipping(bool value)
{
	m_ApplyShipping = value;
    m_ApplyShippingIsSet = true;
}
bool PriceSchedule::ApplyShippingIsSet() const
{
    return m_ApplyShippingIsSet;
}
void PriceSchedule::unsetApplyShipping() 
{
    m_ApplyShippingIsSet = false;
}
int32_t PriceSchedule::getMaxQuantity() const
{
	return m_MaxQuantity;
}
void PriceSchedule::setMaxQuantity(int32_t value)
{
	m_MaxQuantity = value;
    m_MaxQuantityIsSet = true;
}
bool PriceSchedule::MaxQuantityIsSet() const
{
    return m_MaxQuantityIsSet;
}
void PriceSchedule::unsetMaxQuantity() 
{
    m_MaxQuantityIsSet = false;
}
bool PriceSchedule::getUseCumulativeQuantity() const
{
	return m_UseCumulativeQuantity;
}
void PriceSchedule::setUseCumulativeQuantity(bool value)
{
	m_UseCumulativeQuantity = value;
    m_UseCumulativeQuantityIsSet = true;
}
bool PriceSchedule::UseCumulativeQuantityIsSet() const
{
    return m_UseCumulativeQuantityIsSet;
}
void PriceSchedule::unsetUseCumulativeQuantity() 
{
    m_UseCumulativeQuantityIsSet = false;
}
bool PriceSchedule::getRestrictedQuantity() const
{
	return m_RestrictedQuantity;
}
void PriceSchedule::setRestrictedQuantity(bool value)
{
	m_RestrictedQuantity = value;
    m_RestrictedQuantityIsSet = true;
}
bool PriceSchedule::RestrictedQuantityIsSet() const
{
    return m_RestrictedQuantityIsSet;
}
void PriceSchedule::unsetRestrictedQuantity() 
{
    m_RestrictedQuantityIsSet = false;
}
utility::string_t PriceSchedule::getOrderType() const
{
	return m_OrderType;
}
void PriceSchedule::setOrderType(utility::string_t value)
{
	m_OrderType = value;
    m_OrderTypeIsSet = true;
}
bool PriceSchedule::OrderTypeIsSet() const
{
    return m_OrderTypeIsSet;
}
void PriceSchedule::unsetOrderType() 
{
    m_OrderTypeIsSet = false;
}
std::vector<std::shared_ptr<ShipmentItem>>& PriceSchedule::getPriceBreaks()
{
	return m_PriceBreaks;
}
bool PriceSchedule::PriceBreaksIsSet() const
{
    return m_PriceBreaksIsSet;
}
void PriceSchedule::unsetPriceBreaks() 
{
    m_PriceBreaksIsSet = false;
}
std::shared_ptr<Object> PriceSchedule::getXp() const
{
	return m_Xp;
}
void PriceSchedule::setXp(std::shared_ptr<Object> value)
{
	m_Xp = value;
    m_XpIsSet = true;
}
bool PriceSchedule::xpIsSet() const
{
    return m_XpIsSet;
}
void PriceSchedule::unsetXp() 
{
    m_XpIsSet = false;
}

}
}
}
}

