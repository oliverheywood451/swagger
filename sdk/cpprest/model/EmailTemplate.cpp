/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "EmailTemplate.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

EmailTemplate::EmailTemplate()
{
    m_Subject = U("");
    m_SubjectIsSet = false;
    m_Body = U("");
    m_BodyIsSet = false;
    m_ReplyEmail = U("");
    m_ReplyEmailIsSet = false;
    m_SendMessageType = false;
    m_SendMessageTypeIsSet = false;
    m_EmailFormatType = U("");
    m_EmailFormatTypeIsSet = false;
    
}

EmailTemplate::~EmailTemplate()
{
}

void EmailTemplate::validate() 
{
    // TODO: implement validation
}

web::json::value EmailTemplate::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_SubjectIsSet)
    {
        val[U("Subject")] = ModelBase::toJson(m_Subject);
    }
    if(m_BodyIsSet)
    {
        val[U("Body")] = ModelBase::toJson(m_Body);
    }
    if(m_ReplyEmailIsSet)
    {
        val[U("ReplyEmail")] = ModelBase::toJson(m_ReplyEmail);
    }
    if(m_SendMessageTypeIsSet)
    {
        val[U("SendMessageType")] = ModelBase::toJson(m_SendMessageType);
    }
    if(m_EmailFormatTypeIsSet)
    {
        val[U("EmailFormatType")] = ModelBase::toJson(m_EmailFormatType);
    }
    

    return val;
}

void EmailTemplate::fromJson(web::json::value& val)
{
    if(val.has_field(U("Subject")))
    {
        setSubject(ModelBase::stringFromJson(val[U("Subject")]));
                
    }
    if(val.has_field(U("Body")))
    {
        setBody(ModelBase::stringFromJson(val[U("Body")]));
                
    }
    if(val.has_field(U("ReplyEmail")))
    {
        setReplyEmail(ModelBase::stringFromJson(val[U("ReplyEmail")]));
                
    }
    if(val.has_field(U("SendMessageType")))
    {
        setSendMessageType(ModelBase::boolFromJson(val[U("SendMessageType")]));
    }
    if(val.has_field(U("EmailFormatType")))
    {
        setEmailFormatType(ModelBase::stringFromJson(val[U("EmailFormatType")]));
                
    }
    
}

void EmailTemplate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Subject"), m_Subject));
                
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Body"), m_Body));
                
    }
    if(m_ReplyEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ReplyEmail"), m_ReplyEmail));
                
    }
    if(m_SendMessageTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("SendMessageType"), m_SendMessageType));
    }
    if(m_EmailFormatTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("EmailFormatType"), m_EmailFormatType));
                
    }
    
}

void EmailTemplate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("Subject")))
    {
        setSubject(ModelBase::stringFromHttpContent(multipart->getContent(U("Subject"))));
                
    }
    if(multipart->hasContent(U("Body")))
    {
        setBody(ModelBase::stringFromHttpContent(multipart->getContent(U("Body"))));
                
    }
    if(multipart->hasContent(U("ReplyEmail")))
    {
        setReplyEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("ReplyEmail"))));
                
    }
    if(multipart->hasContent(U("SendMessageType")))
    {
        setSendMessageType(ModelBase::boolFromHttpContent(multipart->getContent(U("SendMessageType"))));
    }
    if(multipart->hasContent(U("EmailFormatType")))
    {
        setEmailFormatType(ModelBase::stringFromHttpContent(multipart->getContent(U("EmailFormatType"))));
                
    }
    
}
    
   
utility::string_t EmailTemplate::getSubject() const
{
	return m_Subject;
}
void EmailTemplate::setSubject(utility::string_t value)
{
	m_Subject = value;
    m_SubjectIsSet = true;
}
bool EmailTemplate::SubjectIsSet() const
{
    return m_SubjectIsSet;
}
void EmailTemplate::unsetSubject() 
{
    m_SubjectIsSet = false;
}
utility::string_t EmailTemplate::getBody() const
{
	return m_Body;
}
void EmailTemplate::setBody(utility::string_t value)
{
	m_Body = value;
    m_BodyIsSet = true;
}
bool EmailTemplate::BodyIsSet() const
{
    return m_BodyIsSet;
}
void EmailTemplate::unsetBody() 
{
    m_BodyIsSet = false;
}
utility::string_t EmailTemplate::getReplyEmail() const
{
	return m_ReplyEmail;
}
void EmailTemplate::setReplyEmail(utility::string_t value)
{
	m_ReplyEmail = value;
    m_ReplyEmailIsSet = true;
}
bool EmailTemplate::ReplyEmailIsSet() const
{
    return m_ReplyEmailIsSet;
}
void EmailTemplate::unsetReplyEmail() 
{
    m_ReplyEmailIsSet = false;
}
bool EmailTemplate::getSendMessageType() const
{
	return m_SendMessageType;
}
void EmailTemplate::setSendMessageType(bool value)
{
	m_SendMessageType = value;
    m_SendMessageTypeIsSet = true;
}
bool EmailTemplate::SendMessageTypeIsSet() const
{
    return m_SendMessageTypeIsSet;
}
void EmailTemplate::unsetSendMessageType() 
{
    m_SendMessageTypeIsSet = false;
}
utility::string_t EmailTemplate::getEmailFormatType() const
{
	return m_EmailFormatType;
}
void EmailTemplate::setEmailFormatType(utility::string_t value)
{
	m_EmailFormatType = value;
    m_EmailFormatTypeIsSet = true;
}
bool EmailTemplate::EmailFormatTypeIsSet() const
{
    return m_EmailFormatTypeIsSet;
}
void EmailTemplate::unsetEmailFormatType() 
{
    m_EmailFormatTypeIsSet = false;
}

}
}
}
}

