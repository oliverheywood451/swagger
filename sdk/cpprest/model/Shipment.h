/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Shipment.h
 * 
 * 
 */

#ifndef Shipment_H_
#define Shipment_H_


#include "ModelBase.h"

#include "Number.h"
#include "ShipmentItem.h"
#include "Object.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Shipment
	: public ModelBase
{
public:
    Shipment();
    virtual ~Shipment();

	/////////////////////////////////////////////
	/// ModelBase overrides
	
    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;
    
 	/////////////////////////////////////////////
	/// Shipment members
	   
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getID() const;
    void setID(utility::string_t value);
    bool IDIsSet() const;
    void unsetID();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getShipper() const;
    void setShipper(utility::string_t value);
    bool ShipperIsSet() const;
    void unsetShipper();
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getDateShipped() const;
    void setDateShipped(utility::datetime value);
    bool DateShippedIsSet() const;
    void unsetDateShipped();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTrackingNumber() const;
    void setTrackingNumber(utility::string_t value);
    bool TrackingNumberIsSet() const;
    void unsetTrackingNumber();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Number> getCost() const;
    void setCost(std::shared_ptr<Number> value);
    bool CostIsSet() const;
    void unsetCost();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ShipmentItem>>& getItems();
    bool ItemsIsSet() const;
    void unsetItems();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getXp() const;
    void setXp(std::shared_ptr<Object> value);
    bool xpIsSet() const;
    void unsetXp();
    
protected:
    utility::string_t m_ID;
    bool m_IDIsSet;
utility::string_t m_Shipper;
    bool m_ShipperIsSet;
utility::datetime m_DateShipped;
    bool m_DateShippedIsSet;
utility::string_t m_TrackingNumber;
    bool m_TrackingNumberIsSet;
std::shared_ptr<Number> m_Cost;
    bool m_CostIsSet;
std::vector<std::shared_ptr<ShipmentItem>> m_Items;
    bool m_ItemsIsSet;
std::shared_ptr<Object> m_Xp;
    bool m_XpIsSet;
};

}
}
}
}

#endif /* Shipment_H_ */
