/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "CategoryProductAssignment.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CategoryProductAssignment::CategoryProductAssignment()
{
    m_CategoryID = U("");
    m_CategoryIDIsSet = false;
    m_ProductID = U("");
    m_ProductIDIsSet = false;
    m_ListOrder = nullptr;
    m_ListOrderIsSet = false;
    
}

CategoryProductAssignment::~CategoryProductAssignment()
{
}

void CategoryProductAssignment::validate() 
{
    // TODO: implement validation
}

web::json::value CategoryProductAssignment::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_CategoryIDIsSet)
    {
        val[U("CategoryID")] = ModelBase::toJson(m_CategoryID);
    }
    if(m_ProductIDIsSet)
    {
        val[U("ProductID")] = ModelBase::toJson(m_ProductID);
    }
    if(m_ListOrderIsSet)
    {
        val[U("ListOrder")] = ModelBase::toJson(m_ListOrder);
    }
    

    return val;
}

void CategoryProductAssignment::fromJson(web::json::value& val)
{
    if(val.has_field(U("CategoryID")))
    {
        setCategoryID(ModelBase::stringFromJson(val[U("CategoryID")]));
                
    }
    if(val.has_field(U("ProductID")))
    {
        setProductID(ModelBase::stringFromJson(val[U("ProductID")]));
                
    }
    if(val.has_field(U("ListOrder")))
    {
        setListOrder(ModelBase::int32_tFromJson(val[U("ListOrder")]));
    }
    
}

void CategoryProductAssignment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_CategoryIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("CategoryID"), m_CategoryID));
                
    }
    if(m_ProductIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ProductID"), m_ProductID));
                
    }
    if(m_ListOrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ListOrder"), m_ListOrder));
    }
    
}

void CategoryProductAssignment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("CategoryID")))
    {
        setCategoryID(ModelBase::stringFromHttpContent(multipart->getContent(U("CategoryID"))));
                
    }
    if(multipart->hasContent(U("ProductID")))
    {
        setProductID(ModelBase::stringFromHttpContent(multipart->getContent(U("ProductID"))));
                
    }
    if(multipart->hasContent(U("ListOrder")))
    {
        setListOrder(ModelBase::int32_tFromHttpContent(multipart->getContent(U("ListOrder"))));
    }
    
}
    
   
utility::string_t CategoryProductAssignment::getCategoryID() const
{
	return m_CategoryID;
}
void CategoryProductAssignment::setCategoryID(utility::string_t value)
{
	m_CategoryID = value;
    m_CategoryIDIsSet = true;
}
bool CategoryProductAssignment::CategoryIDIsSet() const
{
    return m_CategoryIDIsSet;
}
void CategoryProductAssignment::unsetCategoryID() 
{
    m_CategoryIDIsSet = false;
}
utility::string_t CategoryProductAssignment::getProductID() const
{
	return m_ProductID;
}
void CategoryProductAssignment::setProductID(utility::string_t value)
{
	m_ProductID = value;
    m_ProductIDIsSet = true;
}
bool CategoryProductAssignment::ProductIDIsSet() const
{
    return m_ProductIDIsSet;
}
void CategoryProductAssignment::unsetProductID() 
{
    m_ProductIDIsSet = false;
}
int32_t CategoryProductAssignment::getListOrder() const
{
	return m_ListOrder;
}
void CategoryProductAssignment::setListOrder(int32_t value)
{
	m_ListOrder = value;
    m_ListOrderIsSet = true;
}
bool CategoryProductAssignment::ListOrderIsSet() const
{
    return m_ListOrderIsSet;
}
void CategoryProductAssignment::unsetListOrder() 
{
    m_ListOrderIsSet = false;
}

}
}
}
}

