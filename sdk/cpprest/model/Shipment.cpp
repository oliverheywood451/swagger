/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "Shipment.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Shipment::Shipment()
{
    m_ID = U("");
    m_IDIsSet = false;
    m_Shipper = U("");
    m_ShipperIsSet = false;
    m_DateShippedIsSet = false;
    m_TrackingNumber = U("");
    m_TrackingNumberIsSet = false;
    m_CostIsSet = false;
    m_ItemsIsSet = false;
    m_XpIsSet = false;
    
}

Shipment::~Shipment()
{
}

void Shipment::validate() 
{
    // TODO: implement validation
}

web::json::value Shipment::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_IDIsSet)
    {
        val[U("ID")] = ModelBase::toJson(m_ID);
    }
    if(m_ShipperIsSet)
    {
        val[U("Shipper")] = ModelBase::toJson(m_Shipper);
    }
    if(m_DateShippedIsSet)
    {
        val[U("DateShipped")] = ModelBase::toJson(m_DateShipped);
    }
    if(m_TrackingNumberIsSet)
    {
        val[U("TrackingNumber")] = ModelBase::toJson(m_TrackingNumber);
    }
    if(m_CostIsSet)
    {
        val[U("Cost")] = ModelBase::toJson(m_Cost);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Items )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            val[U("Items")] = web::json::value::array(jsonArray);
        }
    }
    if(m_XpIsSet)
    {
        val[U("xp")] = ModelBase::toJson(m_Xp);
    }
    

    return val;
}

void Shipment::fromJson(web::json::value& val)
{
    if(val.has_field(U("ID")))
    {
        setID(ModelBase::stringFromJson(val[U("ID")]));
                
    }
    if(val.has_field(U("Shipper")))
    {
        setShipper(ModelBase::stringFromJson(val[U("Shipper")]));
                
    }
    if(val.has_field(U("DateShipped")))
    {
        if(!val[U("DateShipped")].is_null()) 
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromJson(val[U("DateShipped")]);
            setDateShipped( newItem );
        }
                
    }
    if(val.has_field(U("TrackingNumber")))
    {
        setTrackingNumber(ModelBase::stringFromJson(val[U("TrackingNumber")]));
                
    }
    if(val.has_field(U("Cost")))
    {
        if(!val[U("Cost")].is_null()) 
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("Cost")]);
            setCost( newItem );
        }
                
    }
    {
        m_Items.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("Items")))
        {
        for( auto& item : val[U("Items")].as_array() )
        {
            
            if(item.is_null()) 
            {
                m_Items.push_back( std::shared_ptr<ShipmentItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<ShipmentItem> newItem(new ShipmentItem());
                newItem->fromJson(item);
                m_Items.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("xp")))
    {
        if(!val[U("xp")].is_null()) 
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("xp")]);
            setXp( newItem );
        }
                
    }
    
}

void Shipment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ID"), m_ID));
                
    }
    if(m_ShipperIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Shipper"), m_Shipper));
                
    }
    if(m_DateShippedIsSet)
    {
        if (m_DateShipped.get())
        {
            m_DateShipped->toMultipart(multipart, U("DateShipped."));
        }
                
    }
    if(m_TrackingNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("TrackingNumber"), m_TrackingNumber));
                
    }
    if(m_CostIsSet)
    {
        if (m_Cost.get())
        {
            m_Cost->toMultipart(multipart, U("Cost."));
        }
                
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Items )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("Items"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_XpIsSet)
    {
        if (m_Xp.get())
        {
            m_Xp->toMultipart(multipart, U("xp."));
        }
                
    }
    
}

void Shipment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("ID")))
    {
        setID(ModelBase::stringFromHttpContent(multipart->getContent(U("ID"))));
                
    }
    if(multipart->hasContent(U("Shipper")))
    {
        setShipper(ModelBase::stringFromHttpContent(multipart->getContent(U("Shipper"))));
                
    }
    if(multipart->hasContent(U("DateShipped")))
    {
        if(multipart->hasContent(U("DateShipped")))
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromMultiPart(multipart, U("DateShipped."));
            setDateShipped( newItem );
        }
                
    }
    if(multipart->hasContent(U("TrackingNumber")))
    {
        setTrackingNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("TrackingNumber"))));
                
    }
    if(multipart->hasContent(U("Cost")))
    {
        if(multipart->hasContent(U("Cost")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("Cost."));
            setCost( newItem );
        }
                
    }
    {
        m_Items.clear();
        if(multipart->hasContent(U("Items")))
        {            
        
        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("Items"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null()) 
            {
                m_Items.push_back( std::shared_ptr<ShipmentItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<ShipmentItem> newItem(new ShipmentItem());
                newItem->fromJson(item);
                m_Items.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("xp")))
    {
        if(multipart->hasContent(U("xp")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("xp."));
            setXp( newItem );
        }
                
    }
    
}
    
   
utility::string_t Shipment::getID() const
{
	return m_ID;
}
void Shipment::setID(utility::string_t value)
{
	m_ID = value;
    m_IDIsSet = true;
}
bool Shipment::IDIsSet() const
{
    return m_IDIsSet;
}
void Shipment::unsetID() 
{
    m_IDIsSet = false;
}
utility::string_t Shipment::getShipper() const
{
	return m_Shipper;
}
void Shipment::setShipper(utility::string_t value)
{
	m_Shipper = value;
    m_ShipperIsSet = true;
}
bool Shipment::ShipperIsSet() const
{
    return m_ShipperIsSet;
}
void Shipment::unsetShipper() 
{
    m_ShipperIsSet = false;
}
utility::datetime Shipment::getDateShipped() const
{
	return m_DateShipped;
}
void Shipment::setDateShipped(utility::datetime value)
{
	m_DateShipped = value;
    m_DateShippedIsSet = true;
}
bool Shipment::DateShippedIsSet() const
{
    return m_DateShippedIsSet;
}
void Shipment::unsetDateShipped() 
{
    m_DateShippedIsSet = false;
}
utility::string_t Shipment::getTrackingNumber() const
{
	return m_TrackingNumber;
}
void Shipment::setTrackingNumber(utility::string_t value)
{
	m_TrackingNumber = value;
    m_TrackingNumberIsSet = true;
}
bool Shipment::TrackingNumberIsSet() const
{
    return m_TrackingNumberIsSet;
}
void Shipment::unsetTrackingNumber() 
{
    m_TrackingNumberIsSet = false;
}
std::shared_ptr<Number> Shipment::getCost() const
{
	return m_Cost;
}
void Shipment::setCost(std::shared_ptr<Number> value)
{
	m_Cost = value;
    m_CostIsSet = true;
}
bool Shipment::CostIsSet() const
{
    return m_CostIsSet;
}
void Shipment::unsetCost() 
{
    m_CostIsSet = false;
}
std::vector<std::shared_ptr<ShipmentItem>>& Shipment::getItems()
{
	return m_Items;
}
bool Shipment::ItemsIsSet() const
{
    return m_ItemsIsSet;
}
void Shipment::unsetItems() 
{
    m_ItemsIsSet = false;
}
std::shared_ptr<Object> Shipment::getXp() const
{
	return m_Xp;
}
void Shipment::setXp(std::shared_ptr<Object> value)
{
	m_Xp = value;
    m_XpIsSet = true;
}
bool Shipment::xpIsSet() const
{
    return m_XpIsSet;
}
void Shipment::unsetXp() 
{
    m_XpIsSet = false;
}

}
}
}
}

