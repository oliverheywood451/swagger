/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "Product.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Product::Product()
{
    m_ID = U("");
    m_IDIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_QuantityMultiplier = nullptr;
    m_QuantityMultiplierIsSet = false;
    m_ShipWeightIsSet = false;
    m_Active = false;
    m_ActiveIsSet = false;
    m_Type = U("");
    m_TypeIsSet = false;
    m_InventoryEnabled = false;
    m_InventoryEnabledIsSet = false;
    m_InventoryNotificationPoint = nullptr;
    m_InventoryNotificationPointIsSet = false;
    m_VariantLevelInventory = false;
    m_VariantLevelInventoryIsSet = false;
    m_XpIsSet = false;
    m_AllowOrderExceedInventory = false;
    m_AllowOrderExceedInventoryIsSet = false;
    m_InventoryVisible = false;
    m_InventoryVisibleIsSet = false;
    
}

Product::~Product()
{
}

void Product::validate() 
{
    // TODO: implement validation
}

web::json::value Product::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_IDIsSet)
    {
        val[U("ID")] = ModelBase::toJson(m_ID);
    }
    if(m_NameIsSet)
    {
        val[U("Name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[U("Description")] = ModelBase::toJson(m_Description);
    }
    if(m_QuantityMultiplierIsSet)
    {
        val[U("QuantityMultiplier")] = ModelBase::toJson(m_QuantityMultiplier);
    }
    if(m_ShipWeightIsSet)
    {
        val[U("ShipWeight")] = ModelBase::toJson(m_ShipWeight);
    }
    if(m_ActiveIsSet)
    {
        val[U("Active")] = ModelBase::toJson(m_Active);
    }
    if(m_TypeIsSet)
    {
        val[U("Type")] = ModelBase::toJson(m_Type);
    }
    if(m_InventoryEnabledIsSet)
    {
        val[U("InventoryEnabled")] = ModelBase::toJson(m_InventoryEnabled);
    }
    if(m_InventoryNotificationPointIsSet)
    {
        val[U("InventoryNotificationPoint")] = ModelBase::toJson(m_InventoryNotificationPoint);
    }
    if(m_VariantLevelInventoryIsSet)
    {
        val[U("VariantLevelInventory")] = ModelBase::toJson(m_VariantLevelInventory);
    }
    if(m_XpIsSet)
    {
        val[U("xp")] = ModelBase::toJson(m_Xp);
    }
    if(m_AllowOrderExceedInventoryIsSet)
    {
        val[U("AllowOrderExceedInventory")] = ModelBase::toJson(m_AllowOrderExceedInventory);
    }
    if(m_InventoryVisibleIsSet)
    {
        val[U("InventoryVisible")] = ModelBase::toJson(m_InventoryVisible);
    }
    

    return val;
}

void Product::fromJson(web::json::value& val)
{
    if(val.has_field(U("ID")))
    {
        setID(ModelBase::stringFromJson(val[U("ID")]));
                
    }
    if(val.has_field(U("Name")))
    {
        setName(ModelBase::stringFromJson(val[U("Name")]));
                
    }
    if(val.has_field(U("Description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("Description")]));
                
    }
    if(val.has_field(U("QuantityMultiplier")))
    {
        setQuantityMultiplier(ModelBase::int32_tFromJson(val[U("QuantityMultiplier")]));
    }
    if(val.has_field(U("ShipWeight")))
    {
        if(!val[U("ShipWeight")].is_null()) 
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("ShipWeight")]);
            setShipWeight( newItem );
        }
                
    }
    if(val.has_field(U("Active")))
    {
        setActive(ModelBase::boolFromJson(val[U("Active")]));
    }
    if(val.has_field(U("Type")))
    {
        setType(ModelBase::stringFromJson(val[U("Type")]));
                
    }
    if(val.has_field(U("InventoryEnabled")))
    {
        setInventoryEnabled(ModelBase::boolFromJson(val[U("InventoryEnabled")]));
    }
    if(val.has_field(U("InventoryNotificationPoint")))
    {
        setInventoryNotificationPoint(ModelBase::int32_tFromJson(val[U("InventoryNotificationPoint")]));
    }
    if(val.has_field(U("VariantLevelInventory")))
    {
        setVariantLevelInventory(ModelBase::boolFromJson(val[U("VariantLevelInventory")]));
    }
    if(val.has_field(U("xp")))
    {
        if(!val[U("xp")].is_null()) 
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("xp")]);
            setXp( newItem );
        }
                
    }
    if(val.has_field(U("AllowOrderExceedInventory")))
    {
        setAllowOrderExceedInventory(ModelBase::boolFromJson(val[U("AllowOrderExceedInventory")]));
    }
    if(val.has_field(U("InventoryVisible")))
    {
        setInventoryVisible(ModelBase::boolFromJson(val[U("InventoryVisible")]));
    }
    
}

void Product::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ID"), m_ID));
                
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Name"), m_Name));
                
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Description"), m_Description));
                
    }
    if(m_QuantityMultiplierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("QuantityMultiplier"), m_QuantityMultiplier));
    }
    if(m_ShipWeightIsSet)
    {
        if (m_ShipWeight.get())
        {
            m_ShipWeight->toMultipart(multipart, U("ShipWeight."));
        }
                
    }
    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Active"), m_Active));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Type"), m_Type));
                
    }
    if(m_InventoryEnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("InventoryEnabled"), m_InventoryEnabled));
    }
    if(m_InventoryNotificationPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("InventoryNotificationPoint"), m_InventoryNotificationPoint));
    }
    if(m_VariantLevelInventoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("VariantLevelInventory"), m_VariantLevelInventory));
    }
    if(m_XpIsSet)
    {
        if (m_Xp.get())
        {
            m_Xp->toMultipart(multipart, U("xp."));
        }
                
    }
    if(m_AllowOrderExceedInventoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("AllowOrderExceedInventory"), m_AllowOrderExceedInventory));
    }
    if(m_InventoryVisibleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("InventoryVisible"), m_InventoryVisible));
    }
    
}

void Product::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("ID")))
    {
        setID(ModelBase::stringFromHttpContent(multipart->getContent(U("ID"))));
                
    }
    if(multipart->hasContent(U("Name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("Name"))));
                
    }
    if(multipart->hasContent(U("Description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("Description"))));
                
    }
    if(multipart->hasContent(U("QuantityMultiplier")))
    {
        setQuantityMultiplier(ModelBase::int32_tFromHttpContent(multipart->getContent(U("QuantityMultiplier"))));
    }
    if(multipart->hasContent(U("ShipWeight")))
    {
        if(multipart->hasContent(U("ShipWeight")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("ShipWeight."));
            setShipWeight( newItem );
        }
                
    }
    if(multipart->hasContent(U("Active")))
    {
        setActive(ModelBase::boolFromHttpContent(multipart->getContent(U("Active"))));
    }
    if(multipart->hasContent(U("Type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("Type"))));
                
    }
    if(multipart->hasContent(U("InventoryEnabled")))
    {
        setInventoryEnabled(ModelBase::boolFromHttpContent(multipart->getContent(U("InventoryEnabled"))));
    }
    if(multipart->hasContent(U("InventoryNotificationPoint")))
    {
        setInventoryNotificationPoint(ModelBase::int32_tFromHttpContent(multipart->getContent(U("InventoryNotificationPoint"))));
    }
    if(multipart->hasContent(U("VariantLevelInventory")))
    {
        setVariantLevelInventory(ModelBase::boolFromHttpContent(multipart->getContent(U("VariantLevelInventory"))));
    }
    if(multipart->hasContent(U("xp")))
    {
        if(multipart->hasContent(U("xp")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("xp."));
            setXp( newItem );
        }
                
    }
    if(multipart->hasContent(U("AllowOrderExceedInventory")))
    {
        setAllowOrderExceedInventory(ModelBase::boolFromHttpContent(multipart->getContent(U("AllowOrderExceedInventory"))));
    }
    if(multipart->hasContent(U("InventoryVisible")))
    {
        setInventoryVisible(ModelBase::boolFromHttpContent(multipart->getContent(U("InventoryVisible"))));
    }
    
}
    
   
utility::string_t Product::getID() const
{
	return m_ID;
}
void Product::setID(utility::string_t value)
{
	m_ID = value;
    m_IDIsSet = true;
}
bool Product::IDIsSet() const
{
    return m_IDIsSet;
}
void Product::unsetID() 
{
    m_IDIsSet = false;
}
utility::string_t Product::getName() const
{
	return m_Name;
}
void Product::setName(utility::string_t value)
{
	m_Name = value;
    m_NameIsSet = true;
}
bool Product::NameIsSet() const
{
    return m_NameIsSet;
}
void Product::unsetName() 
{
    m_NameIsSet = false;
}
utility::string_t Product::getDescription() const
{
	return m_Description;
}
void Product::setDescription(utility::string_t value)
{
	m_Description = value;
    m_DescriptionIsSet = true;
}
bool Product::DescriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Product::unsetDescription() 
{
    m_DescriptionIsSet = false;
}
int32_t Product::getQuantityMultiplier() const
{
	return m_QuantityMultiplier;
}
void Product::setQuantityMultiplier(int32_t value)
{
	m_QuantityMultiplier = value;
    m_QuantityMultiplierIsSet = true;
}
bool Product::QuantityMultiplierIsSet() const
{
    return m_QuantityMultiplierIsSet;
}
void Product::unsetQuantityMultiplier() 
{
    m_QuantityMultiplierIsSet = false;
}
std::shared_ptr<Number> Product::getShipWeight() const
{
	return m_ShipWeight;
}
void Product::setShipWeight(std::shared_ptr<Number> value)
{
	m_ShipWeight = value;
    m_ShipWeightIsSet = true;
}
bool Product::ShipWeightIsSet() const
{
    return m_ShipWeightIsSet;
}
void Product::unsetShipWeight() 
{
    m_ShipWeightIsSet = false;
}
bool Product::getActive() const
{
	return m_Active;
}
void Product::setActive(bool value)
{
	m_Active = value;
    m_ActiveIsSet = true;
}
bool Product::ActiveIsSet() const
{
    return m_ActiveIsSet;
}
void Product::unsetActive() 
{
    m_ActiveIsSet = false;
}
utility::string_t Product::getType() const
{
	return m_Type;
}
void Product::setType(utility::string_t value)
{
	m_Type = value;
    m_TypeIsSet = true;
}
bool Product::TypeIsSet() const
{
    return m_TypeIsSet;
}
void Product::unsetType() 
{
    m_TypeIsSet = false;
}
bool Product::getInventoryEnabled() const
{
	return m_InventoryEnabled;
}
void Product::setInventoryEnabled(bool value)
{
	m_InventoryEnabled = value;
    m_InventoryEnabledIsSet = true;
}
bool Product::InventoryEnabledIsSet() const
{
    return m_InventoryEnabledIsSet;
}
void Product::unsetInventoryEnabled() 
{
    m_InventoryEnabledIsSet = false;
}
int32_t Product::getInventoryNotificationPoint() const
{
	return m_InventoryNotificationPoint;
}
void Product::setInventoryNotificationPoint(int32_t value)
{
	m_InventoryNotificationPoint = value;
    m_InventoryNotificationPointIsSet = true;
}
bool Product::InventoryNotificationPointIsSet() const
{
    return m_InventoryNotificationPointIsSet;
}
void Product::unsetInventoryNotificationPoint() 
{
    m_InventoryNotificationPointIsSet = false;
}
bool Product::getVariantLevelInventory() const
{
	return m_VariantLevelInventory;
}
void Product::setVariantLevelInventory(bool value)
{
	m_VariantLevelInventory = value;
    m_VariantLevelInventoryIsSet = true;
}
bool Product::VariantLevelInventoryIsSet() const
{
    return m_VariantLevelInventoryIsSet;
}
void Product::unsetVariantLevelInventory() 
{
    m_VariantLevelInventoryIsSet = false;
}
std::shared_ptr<Object> Product::getXp() const
{
	return m_Xp;
}
void Product::setXp(std::shared_ptr<Object> value)
{
	m_Xp = value;
    m_XpIsSet = true;
}
bool Product::xpIsSet() const
{
    return m_XpIsSet;
}
void Product::unsetXp() 
{
    m_XpIsSet = false;
}
bool Product::getAllowOrderExceedInventory() const
{
	return m_AllowOrderExceedInventory;
}
void Product::setAllowOrderExceedInventory(bool value)
{
	m_AllowOrderExceedInventory = value;
    m_AllowOrderExceedInventoryIsSet = true;
}
bool Product::AllowOrderExceedInventoryIsSet() const
{
    return m_AllowOrderExceedInventoryIsSet;
}
void Product::unsetAllowOrderExceedInventory() 
{
    m_AllowOrderExceedInventoryIsSet = false;
}
bool Product::getInventoryVisible() const
{
	return m_InventoryVisible;
}
void Product::setInventoryVisible(bool value)
{
	m_InventoryVisible = value;
    m_InventoryVisibleIsSet = true;
}
bool Product::InventoryVisibleIsSet() const
{
    return m_InventoryVisibleIsSet;
}
void Product::unsetInventoryVisible() 
{
    m_InventoryVisibleIsSet = false;
}

}
}
}
}

