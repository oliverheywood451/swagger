/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * PriceSchedule.h
 * 
 * 
 */

#ifndef PriceSchedule_H_
#define PriceSchedule_H_


#include "ModelBase.h"

#include "ShipmentItem.h"
#include "Object.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  PriceSchedule
	: public ModelBase
{
public:
    PriceSchedule();
    virtual ~PriceSchedule();

	/////////////////////////////////////////////
	/// ModelBase overrides
	
    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;
    
 	/////////////////////////////////////////////
	/// PriceSchedule members
	   
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getID() const;
    void setID(utility::string_t value);
    bool IDIsSet() const;
    void unsetID();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
    bool NameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    bool getApplyTax() const;
    void setApplyTax(bool value);
    bool ApplyTaxIsSet() const;
    void unsetApplyTax();
    /// <summary>
    /// 
    /// </summary>
    bool getApplyShipping() const;
    void setApplyShipping(bool value);
    bool ApplyShippingIsSet() const;
    void unsetApplyShipping();
    /// <summary>
    /// 
    /// </summary>
    int32_t getMaxQuantity() const;
    void setMaxQuantity(int32_t value);
    bool MaxQuantityIsSet() const;
    void unsetMaxQuantity();
    /// <summary>
    /// 
    /// </summary>
    bool getUseCumulativeQuantity() const;
    void setUseCumulativeQuantity(bool value);
    bool UseCumulativeQuantityIsSet() const;
    void unsetUseCumulativeQuantity();
    /// <summary>
    /// 
    /// </summary>
    bool getRestrictedQuantity() const;
    void setRestrictedQuantity(bool value);
    bool RestrictedQuantityIsSet() const;
    void unsetRestrictedQuantity();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrderType() const;
    void setOrderType(utility::string_t value);
    bool OrderTypeIsSet() const;
    void unsetOrderType();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ShipmentItem>>& getPriceBreaks();
    bool PriceBreaksIsSet() const;
    void unsetPriceBreaks();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getXp() const;
    void setXp(std::shared_ptr<Object> value);
    bool xpIsSet() const;
    void unsetXp();
    
protected:
    utility::string_t m_ID;
    bool m_IDIsSet;
utility::string_t m_Name;
    bool m_NameIsSet;
bool m_ApplyTax;
    bool m_ApplyTaxIsSet;
bool m_ApplyShipping;
    bool m_ApplyShippingIsSet;
int32_t m_MaxQuantity;
    bool m_MaxQuantityIsSet;
bool m_UseCumulativeQuantity;
    bool m_UseCumulativeQuantityIsSet;
bool m_RestrictedQuantity;
    bool m_RestrictedQuantityIsSet;
utility::string_t m_OrderType;
    bool m_OrderTypeIsSet;
std::vector<std::shared_ptr<ShipmentItem>> m_PriceBreaks;
    bool m_PriceBreaksIsSet;
std::shared_ptr<Object> m_Xp;
    bool m_XpIsSet;
};

}
}
}
}

#endif /* PriceSchedule_H_ */
