/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "Address.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Address::Address()
{
    m_ID = U("");
    m_IDIsSet = false;
    m_CompanyName = U("");
    m_CompanyNameIsSet = false;
    m_FirstName = U("");
    m_FirstNameIsSet = false;
    m_LastName = U("");
    m_LastNameIsSet = false;
    m_Street1 = U("");
    m_Street1IsSet = false;
    m_Street2 = U("");
    m_Street2IsSet = false;
    m_City = U("");
    m_CityIsSet = false;
    m_State = U("");
    m_StateIsSet = false;
    m_Zip = U("");
    m_ZipIsSet = false;
    m_Country = U("");
    m_CountryIsSet = false;
    m_Phone = U("");
    m_PhoneIsSet = false;
    m_AddressName = U("");
    m_AddressNameIsSet = false;
    m_XpIsSet = false;
    
}

Address::~Address()
{
}

void Address::validate() 
{
    // TODO: implement validation
}

web::json::value Address::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_IDIsSet)
    {
        val[U("ID")] = ModelBase::toJson(m_ID);
    }
    if(m_CompanyNameIsSet)
    {
        val[U("CompanyName")] = ModelBase::toJson(m_CompanyName);
    }
    if(m_FirstNameIsSet)
    {
        val[U("FirstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_LastNameIsSet)
    {
        val[U("LastName")] = ModelBase::toJson(m_LastName);
    }
    if(m_Street1IsSet)
    {
        val[U("Street1")] = ModelBase::toJson(m_Street1);
    }
    if(m_Street2IsSet)
    {
        val[U("Street2")] = ModelBase::toJson(m_Street2);
    }
    if(m_CityIsSet)
    {
        val[U("City")] = ModelBase::toJson(m_City);
    }
    if(m_StateIsSet)
    {
        val[U("State")] = ModelBase::toJson(m_State);
    }
    if(m_ZipIsSet)
    {
        val[U("Zip")] = ModelBase::toJson(m_Zip);
    }
    if(m_CountryIsSet)
    {
        val[U("Country")] = ModelBase::toJson(m_Country);
    }
    if(m_PhoneIsSet)
    {
        val[U("Phone")] = ModelBase::toJson(m_Phone);
    }
    if(m_AddressNameIsSet)
    {
        val[U("AddressName")] = ModelBase::toJson(m_AddressName);
    }
    if(m_XpIsSet)
    {
        val[U("xp")] = ModelBase::toJson(m_Xp);
    }
    

    return val;
}

void Address::fromJson(web::json::value& val)
{
    if(val.has_field(U("ID")))
    {
        setID(ModelBase::stringFromJson(val[U("ID")]));
                
    }
    if(val.has_field(U("CompanyName")))
    {
        setCompanyName(ModelBase::stringFromJson(val[U("CompanyName")]));
                
    }
    if(val.has_field(U("FirstName")))
    {
        setFirstName(ModelBase::stringFromJson(val[U("FirstName")]));
                
    }
    if(val.has_field(U("LastName")))
    {
        setLastName(ModelBase::stringFromJson(val[U("LastName")]));
                
    }
    if(val.has_field(U("Street1")))
    {
        setStreet1(ModelBase::stringFromJson(val[U("Street1")]));
                
    }
    if(val.has_field(U("Street2")))
    {
        setStreet2(ModelBase::stringFromJson(val[U("Street2")]));
                
    }
    if(val.has_field(U("City")))
    {
        setCity(ModelBase::stringFromJson(val[U("City")]));
                
    }
    if(val.has_field(U("State")))
    {
        setState(ModelBase::stringFromJson(val[U("State")]));
                
    }
    if(val.has_field(U("Zip")))
    {
        setZip(ModelBase::stringFromJson(val[U("Zip")]));
                
    }
    if(val.has_field(U("Country")))
    {
        setCountry(ModelBase::stringFromJson(val[U("Country")]));
                
    }
    if(val.has_field(U("Phone")))
    {
        setPhone(ModelBase::stringFromJson(val[U("Phone")]));
                
    }
    if(val.has_field(U("AddressName")))
    {
        setAddressName(ModelBase::stringFromJson(val[U("AddressName")]));
                
    }
    if(val.has_field(U("xp")))
    {
        if(!val[U("xp")].is_null()) 
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("xp")]);
            setXp( newItem );
        }
                
    }
    
}

void Address::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ID"), m_ID));
                
    }
    if(m_CompanyNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("CompanyName"), m_CompanyName));
                
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("FirstName"), m_FirstName));
                
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("LastName"), m_LastName));
                
    }
    if(m_Street1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Street1"), m_Street1));
                
    }
    if(m_Street2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Street2"), m_Street2));
                
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("City"), m_City));
                
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("State"), m_State));
                
    }
    if(m_ZipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Zip"), m_Zip));
                
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Country"), m_Country));
                
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Phone"), m_Phone));
                
    }
    if(m_AddressNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("AddressName"), m_AddressName));
                
    }
    if(m_XpIsSet)
    {
        if (m_Xp.get())
        {
            m_Xp->toMultipart(multipart, U("xp."));
        }
                
    }
    
}

void Address::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("ID")))
    {
        setID(ModelBase::stringFromHttpContent(multipart->getContent(U("ID"))));
                
    }
    if(multipart->hasContent(U("CompanyName")))
    {
        setCompanyName(ModelBase::stringFromHttpContent(multipart->getContent(U("CompanyName"))));
                
    }
    if(multipart->hasContent(U("FirstName")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(U("FirstName"))));
                
    }
    if(multipart->hasContent(U("LastName")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(U("LastName"))));
                
    }
    if(multipart->hasContent(U("Street1")))
    {
        setStreet1(ModelBase::stringFromHttpContent(multipart->getContent(U("Street1"))));
                
    }
    if(multipart->hasContent(U("Street2")))
    {
        setStreet2(ModelBase::stringFromHttpContent(multipart->getContent(U("Street2"))));
                
    }
    if(multipart->hasContent(U("City")))
    {
        setCity(ModelBase::stringFromHttpContent(multipart->getContent(U("City"))));
                
    }
    if(multipart->hasContent(U("State")))
    {
        setState(ModelBase::stringFromHttpContent(multipart->getContent(U("State"))));
                
    }
    if(multipart->hasContent(U("Zip")))
    {
        setZip(ModelBase::stringFromHttpContent(multipart->getContent(U("Zip"))));
                
    }
    if(multipart->hasContent(U("Country")))
    {
        setCountry(ModelBase::stringFromHttpContent(multipart->getContent(U("Country"))));
                
    }
    if(multipart->hasContent(U("Phone")))
    {
        setPhone(ModelBase::stringFromHttpContent(multipart->getContent(U("Phone"))));
                
    }
    if(multipart->hasContent(U("AddressName")))
    {
        setAddressName(ModelBase::stringFromHttpContent(multipart->getContent(U("AddressName"))));
                
    }
    if(multipart->hasContent(U("xp")))
    {
        if(multipart->hasContent(U("xp")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("xp."));
            setXp( newItem );
        }
                
    }
    
}
    
   
utility::string_t Address::getID() const
{
	return m_ID;
}
void Address::setID(utility::string_t value)
{
	m_ID = value;
    m_IDIsSet = true;
}
bool Address::IDIsSet() const
{
    return m_IDIsSet;
}
void Address::unsetID() 
{
    m_IDIsSet = false;
}
utility::string_t Address::getCompanyName() const
{
	return m_CompanyName;
}
void Address::setCompanyName(utility::string_t value)
{
	m_CompanyName = value;
    m_CompanyNameIsSet = true;
}
bool Address::CompanyNameIsSet() const
{
    return m_CompanyNameIsSet;
}
void Address::unsetCompanyName() 
{
    m_CompanyNameIsSet = false;
}
utility::string_t Address::getFirstName() const
{
	return m_FirstName;
}
void Address::setFirstName(utility::string_t value)
{
	m_FirstName = value;
    m_FirstNameIsSet = true;
}
bool Address::FirstNameIsSet() const
{
    return m_FirstNameIsSet;
}
void Address::unsetFirstName() 
{
    m_FirstNameIsSet = false;
}
utility::string_t Address::getLastName() const
{
	return m_LastName;
}
void Address::setLastName(utility::string_t value)
{
	m_LastName = value;
    m_LastNameIsSet = true;
}
bool Address::LastNameIsSet() const
{
    return m_LastNameIsSet;
}
void Address::unsetLastName() 
{
    m_LastNameIsSet = false;
}
utility::string_t Address::getStreet1() const
{
	return m_Street1;
}
void Address::setStreet1(utility::string_t value)
{
	m_Street1 = value;
    m_Street1IsSet = true;
}
bool Address::Street1IsSet() const
{
    return m_Street1IsSet;
}
void Address::unsetStreet1() 
{
    m_Street1IsSet = false;
}
utility::string_t Address::getStreet2() const
{
	return m_Street2;
}
void Address::setStreet2(utility::string_t value)
{
	m_Street2 = value;
    m_Street2IsSet = true;
}
bool Address::Street2IsSet() const
{
    return m_Street2IsSet;
}
void Address::unsetStreet2() 
{
    m_Street2IsSet = false;
}
utility::string_t Address::getCity() const
{
	return m_City;
}
void Address::setCity(utility::string_t value)
{
	m_City = value;
    m_CityIsSet = true;
}
bool Address::CityIsSet() const
{
    return m_CityIsSet;
}
void Address::unsetCity() 
{
    m_CityIsSet = false;
}
utility::string_t Address::getState() const
{
	return m_State;
}
void Address::setState(utility::string_t value)
{
	m_State = value;
    m_StateIsSet = true;
}
bool Address::StateIsSet() const
{
    return m_StateIsSet;
}
void Address::unsetState() 
{
    m_StateIsSet = false;
}
utility::string_t Address::getZip() const
{
	return m_Zip;
}
void Address::setZip(utility::string_t value)
{
	m_Zip = value;
    m_ZipIsSet = true;
}
bool Address::ZipIsSet() const
{
    return m_ZipIsSet;
}
void Address::unsetZip() 
{
    m_ZipIsSet = false;
}
utility::string_t Address::getCountry() const
{
	return m_Country;
}
void Address::setCountry(utility::string_t value)
{
	m_Country = value;
    m_CountryIsSet = true;
}
bool Address::CountryIsSet() const
{
    return m_CountryIsSet;
}
void Address::unsetCountry() 
{
    m_CountryIsSet = false;
}
utility::string_t Address::getPhone() const
{
	return m_Phone;
}
void Address::setPhone(utility::string_t value)
{
	m_Phone = value;
    m_PhoneIsSet = true;
}
bool Address::PhoneIsSet() const
{
    return m_PhoneIsSet;
}
void Address::unsetPhone() 
{
    m_PhoneIsSet = false;
}
utility::string_t Address::getAddressName() const
{
	return m_AddressName;
}
void Address::setAddressName(utility::string_t value)
{
	m_AddressName = value;
    m_AddressNameIsSet = true;
}
bool Address::AddressNameIsSet() const
{
    return m_AddressNameIsSet;
}
void Address::unsetAddressName() 
{
    m_AddressNameIsSet = false;
}
std::shared_ptr<Object> Address::getXp() const
{
	return m_Xp;
}
void Address::setXp(std::shared_ptr<Object> value)
{
	m_Xp = value;
    m_XpIsSet = true;
}
bool Address::xpIsSet() const
{
    return m_XpIsSet;
}
void Address::unsetXp() 
{
    m_XpIsSet = false;
}

}
}
}
}

