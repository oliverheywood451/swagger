/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "SpecOption.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SpecOption::SpecOption()
{
    m_ID = U("");
    m_IDIsSet = false;
    m_Value = U("");
    m_ValueIsSet = false;
    m_ListOrder = nullptr;
    m_ListOrderIsSet = false;
    m_IsOpenText = false;
    m_IsOpenTextIsSet = false;
    m_PriceMarkupType = U("");
    m_PriceMarkupTypeIsSet = false;
    m_PriceMarkupIsSet = false;
    m_XpIsSet = false;
    
}

SpecOption::~SpecOption()
{
}

void SpecOption::validate() 
{
    // TODO: implement validation
}

web::json::value SpecOption::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_IDIsSet)
    {
        val[U("ID")] = ModelBase::toJson(m_ID);
    }
    if(m_ValueIsSet)
    {
        val[U("Value")] = ModelBase::toJson(m_Value);
    }
    if(m_ListOrderIsSet)
    {
        val[U("ListOrder")] = ModelBase::toJson(m_ListOrder);
    }
    if(m_IsOpenTextIsSet)
    {
        val[U("IsOpenText")] = ModelBase::toJson(m_IsOpenText);
    }
    if(m_PriceMarkupTypeIsSet)
    {
        val[U("PriceMarkupType")] = ModelBase::toJson(m_PriceMarkupType);
    }
    if(m_PriceMarkupIsSet)
    {
        val[U("PriceMarkup")] = ModelBase::toJson(m_PriceMarkup);
    }
    if(m_XpIsSet)
    {
        val[U("xp")] = ModelBase::toJson(m_Xp);
    }
    

    return val;
}

void SpecOption::fromJson(web::json::value& val)
{
    if(val.has_field(U("ID")))
    {
        setID(ModelBase::stringFromJson(val[U("ID")]));
                
    }
    if(val.has_field(U("Value")))
    {
        setValue(ModelBase::stringFromJson(val[U("Value")]));
                
    }
    if(val.has_field(U("ListOrder")))
    {
        setListOrder(ModelBase::int32_tFromJson(val[U("ListOrder")]));
    }
    if(val.has_field(U("IsOpenText")))
    {
        setIsOpenText(ModelBase::boolFromJson(val[U("IsOpenText")]));
    }
    if(val.has_field(U("PriceMarkupType")))
    {
        setPriceMarkupType(ModelBase::stringFromJson(val[U("PriceMarkupType")]));
                
    }
    if(val.has_field(U("PriceMarkup")))
    {
        if(!val[U("PriceMarkup")].is_null()) 
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("PriceMarkup")]);
            setPriceMarkup( newItem );
        }
                
    }
    if(val.has_field(U("xp")))
    {
        if(!val[U("xp")].is_null()) 
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("xp")]);
            setXp( newItem );
        }
                
    }
    
}

void SpecOption::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ID"), m_ID));
                
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Value"), m_Value));
                
    }
    if(m_ListOrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ListOrder"), m_ListOrder));
    }
    if(m_IsOpenTextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("IsOpenText"), m_IsOpenText));
    }
    if(m_PriceMarkupTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("PriceMarkupType"), m_PriceMarkupType));
                
    }
    if(m_PriceMarkupIsSet)
    {
        if (m_PriceMarkup.get())
        {
            m_PriceMarkup->toMultipart(multipart, U("PriceMarkup."));
        }
                
    }
    if(m_XpIsSet)
    {
        if (m_Xp.get())
        {
            m_Xp->toMultipart(multipart, U("xp."));
        }
                
    }
    
}

void SpecOption::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("ID")))
    {
        setID(ModelBase::stringFromHttpContent(multipart->getContent(U("ID"))));
                
    }
    if(multipart->hasContent(U("Value")))
    {
        setValue(ModelBase::stringFromHttpContent(multipart->getContent(U("Value"))));
                
    }
    if(multipart->hasContent(U("ListOrder")))
    {
        setListOrder(ModelBase::int32_tFromHttpContent(multipart->getContent(U("ListOrder"))));
    }
    if(multipart->hasContent(U("IsOpenText")))
    {
        setIsOpenText(ModelBase::boolFromHttpContent(multipart->getContent(U("IsOpenText"))));
    }
    if(multipart->hasContent(U("PriceMarkupType")))
    {
        setPriceMarkupType(ModelBase::stringFromHttpContent(multipart->getContent(U("PriceMarkupType"))));
                
    }
    if(multipart->hasContent(U("PriceMarkup")))
    {
        if(multipart->hasContent(U("PriceMarkup")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("PriceMarkup."));
            setPriceMarkup( newItem );
        }
                
    }
    if(multipart->hasContent(U("xp")))
    {
        if(multipart->hasContent(U("xp")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("xp."));
            setXp( newItem );
        }
                
    }
    
}
    
   
utility::string_t SpecOption::getID() const
{
	return m_ID;
}
void SpecOption::setID(utility::string_t value)
{
	m_ID = value;
    m_IDIsSet = true;
}
bool SpecOption::IDIsSet() const
{
    return m_IDIsSet;
}
void SpecOption::unsetID() 
{
    m_IDIsSet = false;
}
utility::string_t SpecOption::getValue() const
{
	return m_Value;
}
void SpecOption::setValue(utility::string_t value)
{
	m_Value = value;
    m_ValueIsSet = true;
}
bool SpecOption::ValueIsSet() const
{
    return m_ValueIsSet;
}
void SpecOption::unsetValue() 
{
    m_ValueIsSet = false;
}
int32_t SpecOption::getListOrder() const
{
	return m_ListOrder;
}
void SpecOption::setListOrder(int32_t value)
{
	m_ListOrder = value;
    m_ListOrderIsSet = true;
}
bool SpecOption::ListOrderIsSet() const
{
    return m_ListOrderIsSet;
}
void SpecOption::unsetListOrder() 
{
    m_ListOrderIsSet = false;
}
bool SpecOption::getIsOpenText() const
{
	return m_IsOpenText;
}
void SpecOption::setIsOpenText(bool value)
{
	m_IsOpenText = value;
    m_IsOpenTextIsSet = true;
}
bool SpecOption::IsOpenTextIsSet() const
{
    return m_IsOpenTextIsSet;
}
void SpecOption::unsetIsOpenText() 
{
    m_IsOpenTextIsSet = false;
}
utility::string_t SpecOption::getPriceMarkupType() const
{
	return m_PriceMarkupType;
}
void SpecOption::setPriceMarkupType(utility::string_t value)
{
	m_PriceMarkupType = value;
    m_PriceMarkupTypeIsSet = true;
}
bool SpecOption::PriceMarkupTypeIsSet() const
{
    return m_PriceMarkupTypeIsSet;
}
void SpecOption::unsetPriceMarkupType() 
{
    m_PriceMarkupTypeIsSet = false;
}
std::shared_ptr<Number> SpecOption::getPriceMarkup() const
{
	return m_PriceMarkup;
}
void SpecOption::setPriceMarkup(std::shared_ptr<Number> value)
{
	m_PriceMarkup = value;
    m_PriceMarkupIsSet = true;
}
bool SpecOption::PriceMarkupIsSet() const
{
    return m_PriceMarkupIsSet;
}
void SpecOption::unsetPriceMarkup() 
{
    m_PriceMarkupIsSet = false;
}
std::shared_ptr<Object> SpecOption::getXp() const
{
	return m_Xp;
}
void SpecOption::setXp(std::shared_ptr<Object> value)
{
	m_Xp = value;
    m_XpIsSet = true;
}
bool SpecOption::xpIsSet() const
{
    return m_XpIsSet;
}
void SpecOption::unsetXp() 
{
    m_XpIsSet = false;
}

}
}
}
}

