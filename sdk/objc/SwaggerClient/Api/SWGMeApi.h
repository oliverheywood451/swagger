#import <Foundation/Foundation.h>
#import "SWGBuyerAddress.h"
#import "SWGBuyerCreditCard.h"
#import "SWGUser.h"
#import "SWGApi.h"

/**
* OrderCloud
* A full ecommerce backend as a service.
*
* OpenAPI spec version: 0.1
* Contact: ordercloud@four51.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface SWGMeApi: NSObject <SWGApi>

extern NSString* kSWGMeApiErrorDomain;
extern NSInteger kSWGMeApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// 
/// 
///
/// @param address 
/// 
///  code:201 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) createAddressWithAddress: (SWGBuyerAddress*) address
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param creditCard 
/// 
///  code:201 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) createCreditCardWithCreditCard: (SWGBuyerCreditCard*) creditCard
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param addressID ID of the address.
/// 
///  code:204 message:"Only available to Buyer Users."
///
/// @return 
-(NSNumber*) deleteAddressWithAddressID: (NSString*) addressID
    completionHandler: (void (^)(NSError* error)) handler;


/// 
/// 
///
/// @param creditcardID ID of the creditcard.
/// 
///  code:204 message:"Only available to Buyer Users."
///
/// @return 
-(NSNumber*) deleteCreditCardWithCreditcardID: (NSString*) creditcardID
    completionHandler: (void (^)(NSError* error)) handler;


/// 
/// 
///
/// 
///  code:200 message:""
///
/// @return NSObject*
-(NSNumber*) getWithCompletionHandler: 
    (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param addressID ID of the address.
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) getAddressWithAddressID: (NSString*) addressID
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param creditcardID ID of the creditcard.
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) getCreditCardWithCreditcardID: (NSString*) creditcardID
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param orderID ID of the order.
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) getOrderWithOrderID: (NSString*) orderID
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param productID ID of the product.
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) getProductWithProductID: (NSString*) productID
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param promotionID ID of the promotion.
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) getPromotionWithPromotionID: (NSString*) promotionID
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param productID ID of the product.
/// @param specID ID of the spec.
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) getSpecWithProductID: (NSString*) productID
    specID: (NSString*) specID
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param search Word or phrase to search for. (optional)
/// @param searchOn Comma-delimited list of fields to search on. (optional)
/// @param sortBy Comma-delimited list of fields to sort by. (optional)
/// @param page Page of results to return. Default: 1 (optional)
/// @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) listAddressesWithSearch: (NSString*) search
    searchOn: (NSString*) searchOn
    sortBy: (NSString*) sortBy
    page: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param depth Depth of the category. (optional)
/// @param search Word or phrase to search for. (optional)
/// @param searchOn Comma-delimited list of fields to search on. (optional)
/// @param sortBy Comma-delimited list of fields to sort by. (optional)
/// @param page Page of results to return. Default: 1 (optional)
/// @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) listCategoriesWithDepth: (NSString*) depth
    search: (NSString*) search
    searchOn: (NSString*) searchOn
    sortBy: (NSString*) sortBy
    page: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param search Word or phrase to search for. (optional)
/// @param searchOn Comma-delimited list of fields to search on. (optional)
/// @param sortBy Comma-delimited list of fields to sort by. (optional)
/// @param page Page of results to return. Default: 1 (optional)
/// @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) listCostCentersWithSearch: (NSString*) search
    searchOn: (NSString*) searchOn
    sortBy: (NSString*) sortBy
    page: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param search Word or phrase to search for. (optional)
/// @param searchOn Comma-delimited list of fields to search on. (optional)
/// @param sortBy Comma-delimited list of fields to sort by. (optional)
/// @param page Page of results to return. Default: 1 (optional)
/// @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) listCreditCardsWithSearch: (NSString*) search
    searchOn: (NSString*) searchOn
    sortBy: (NSString*) sortBy
    page: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param from Lower bound of date range that the order was created (if outgoing) or submitted (if incoming). (optional)
/// @param to Upper bound of date range that the order was created (if outgoing) or submitted (if incoming). (optional)
/// @param search Word or phrase to search for. (optional)
/// @param searchOn Comma-delimited list of fields to search on. (optional)
/// @param sortBy Comma-delimited list of fields to sort by. (optional)
/// @param page Page of results to return. Default: 1 (optional)
/// @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) listIncomingOrdersWithFrom: (NSString*) from
    to: (NSString*) to
    search: (NSString*) search
    searchOn: (NSString*) searchOn
    sortBy: (NSString*) sortBy
    page: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param from Lower bound of date range that the order was created (if outgoing) or submitted (if incoming). (optional)
/// @param to Upper bound of date range that the order was created (if outgoing) or submitted (if incoming). (optional)
/// @param search Word or phrase to search for. (optional)
/// @param searchOn Comma-delimited list of fields to search on. (optional)
/// @param sortBy Comma-delimited list of fields to sort by. (optional)
/// @param page Page of results to return. Default: 1 (optional)
/// @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) listOutgoingOrdersWithFrom: (NSString*) from
    to: (NSString*) to
    search: (NSString*) search
    searchOn: (NSString*) searchOn
    sortBy: (NSString*) sortBy
    page: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param categoryID ID of the category. (optional)
/// @param search Word or phrase to search for. (optional)
/// @param searchOn Comma-delimited list of fields to search on. (optional)
/// @param sortBy Comma-delimited list of fields to sort by. (optional)
/// @param page Page of results to return. Default: 1 (optional)
/// @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) listProductsWithCategoryID: (NSString*) categoryID
    search: (NSString*) search
    searchOn: (NSString*) searchOn
    sortBy: (NSString*) sortBy
    page: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param search Word or phrase to search for. (optional)
/// @param searchOn Comma-delimited list of fields to search on. (optional)
/// @param sortBy Comma-delimited list of fields to sort by. (optional)
/// @param page Page of results to return. Default: 1 (optional)
/// @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) listPromotionsWithSearch: (NSString*) search
    searchOn: (NSString*) searchOn
    sortBy: (NSString*) sortBy
    page: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param productID ID of the product.
/// @param search Word or phrase to search for. (optional)
/// @param searchOn Comma-delimited list of fields to search on. (optional)
/// @param sortBy Comma-delimited list of fields to sort by. (optional)
/// @param page Page of results to return. Default: 1 (optional)
/// @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) listSpecsWithProductID: (NSString*) productID
    search: (NSString*) search
    searchOn: (NSString*) searchOn
    sortBy: (NSString*) sortBy
    page: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param parentID ID of the parent.
/// @param depth Depth of the category. (optional)
/// @param search Word or phrase to search for. (optional)
/// @param searchOn Comma-delimited list of fields to search on. (optional)
/// @param sortBy Comma-delimited list of fields to sort by. (optional)
/// @param page Page of results to return. Default: 1 (optional)
/// @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) listSubcategoriesWithParentID: (NSString*) parentID
    depth: (NSString*) depth
    search: (NSString*) search
    searchOn: (NSString*) searchOn
    sortBy: (NSString*) sortBy
    page: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param search Word or phrase to search for. (optional)
/// @param searchOn Comma-delimited list of fields to search on. (optional)
/// @param sortBy Comma-delimited list of fields to sort by. (optional)
/// @param page Page of results to return. Default: 1 (optional)
/// @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) listUserGroupsWithSearch: (NSString*) search
    searchOn: (NSString*) searchOn
    sortBy: (NSString*) sortBy
    page: (NSNumber*) page
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param user 
/// 
///  code:200 message:""
///
/// @return NSObject*
-(NSNumber*) patchWithUser: (SWGUser*) user
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param addressID ID of the address.
/// @param address 
/// 
///  code:204 message:"Only available to Buyer Users."
///
/// @return 
-(NSNumber*) patchAddressWithAddressID: (NSString*) addressID
    address: (SWGBuyerAddress*) address
    completionHandler: (void (^)(NSError* error)) handler;


/// 
/// 
///
/// @param creditcardID ID of the creditcard.
/// @param creditCard 
/// 
///  code:204 message:"Only available to Buyer Users."
///
/// @return 
-(NSNumber*) patchCreditCardWithCreditcardID: (NSString*) creditcardID
    creditCard: (SWGBuyerCreditCard*) creditCard
    completionHandler: (void (^)(NSError* error)) handler;


/// 
/// 
///
/// @param user 
/// 
///  code:200 message:""
///
/// @return NSObject*
-(NSNumber*) updateWithUser: (SWGUser*) user
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param addressID ID of the address.
/// @param address 
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) updateAddressWithAddressID: (NSString*) addressID
    address: (SWGBuyerAddress*) address
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// 
/// 
///
/// @param creditcardID ID of the creditcard.
/// @param creditCard 
/// 
///  code:200 message:"Only available to Buyer Users."
///
/// @return NSObject*
-(NSNumber*) updateCreditCardWithCreditcardID: (NSString*) creditcardID
    creditCard: (SWGBuyerCreditCard*) creditCard
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;



@end
