/*
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using OrderCloud.Models;

namespace OrderCloud.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class OrderApiController : Controller
    { 

        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <response code="201">Add a Promotion to an Order.</response>
        [HttpPost]
        [Route("/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}")]
        [SwaggerOperation("AddPromotion")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult AddPromotion([FromRoute]string buyerID, [FromRoute]string orderID, [FromRoute]string promoCode)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order approval.</param>
        /// <response code="201"></response>
        [HttpPost]
        [Route("/buyers/{buyerID}/orders/{orderID}/approve")]
        [SwaggerOperation("Approve")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Approve([FromRoute]string buyerID, [FromRoute]string orderID, [FromQuery]string comments)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <response code="201"></response>
        [HttpPost]
        [Route("/buyers/{buyerID}/orders/{orderID}/cancel")]
        [SwaggerOperation("Cancel")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Cancel([FromRoute]string buyerID, [FromRoute]string orderID)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="order"></param>
        /// <response code="201"></response>
        [HttpPost]
        [Route("/buyers/{buyerID}/orders")]
        [SwaggerOperation("Create")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Create([FromRoute]string buyerID, [FromBody]Order order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order denial.</param>
        /// <response code="201"></response>
        [HttpPost]
        [Route("/buyers/{buyerID}/orders/{orderID}/decline")]
        [SwaggerOperation("Decline")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Decline([FromRoute]string buyerID, [FromRoute]string orderID, [FromQuery]string comments)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <response code="204"></response>
        [HttpDelete]
        [Route("/buyers/{buyerID}/orders/{orderID}")]
        [SwaggerOperation("Delete")]
        public virtual void Delete([FromRoute]string buyerID, [FromRoute]string orderID)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <response code="200"></response>
        [HttpGet]
        [Route("/buyers/{buyerID}/orders/{orderID}")]
        [SwaggerOperation("Get")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Get([FromRoute]string buyerID, [FromRoute]string orderID)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Returns all Approvals associated with the Order.</response>
        [HttpGet]
        [Route("/buyers/{buyerID}/orders/{orderID}/approvals")]
        [SwaggerOperation("ListApprovals")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListApprovals([FromRoute]string buyerID, [FromRoute]string orderID, [FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Returns all Users who can approve or decline this order (but have not done so).</response>
        [HttpGet]
        [Route("/buyers/{buyerID}/orders/{orderID}/eligibleapprovers")]
        [SwaggerOperation("ListEligibleApprovers")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListEligibleApprovers([FromRoute]string buyerID, [FromRoute]string orderID, [FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="from">Lower bound of date range that the order was submitted.</param>
        /// <param name="to">Upper bound of date range that the order was submitted.</param>
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200"></response>
        [HttpGet]
        [Route("/orders/incoming")]
        [SwaggerOperation("ListIncoming")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListIncoming([FromQuery]string buyerID, [FromQuery]string from, [FromQuery]string to, [FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="from">Lower bound of date range that the order was created.</param>
        /// <param name="to">Upper bound of date range that the order was created.</param>
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200"></response>
        [HttpGet]
        [Route("/orders/outgoing")]
        [SwaggerOperation("ListOutgoing")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListOutgoing([FromQuery]string buyerID, [FromQuery]string from, [FromQuery]string to, [FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200"></response>
        [HttpGet]
        [Route("/buyers/{buyerID}/orders/{orderID}/promotions")]
        [SwaggerOperation("ListPromotions")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListPromotions([FromRoute]string buyerID, [FromRoute]string orderID, [FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="partialOrder"></param>
        /// <response code="200"></response>
        [HttpPatch]
        [Route("/buyers/{buyerID}/orders/{orderID}")]
        [SwaggerOperation("Patch")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Patch([FromRoute]string buyerID, [FromRoute]string orderID, [FromBody]Order partialOrder)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <response code="200">Partially update the Billing Address of the Order. Not allowed on unsubmitted Orders where BillingAddressID has been set. In that case, use the Addresses resource to update the Saved Address.</response>
        [HttpPatch]
        [Route("/buyers/{buyerID}/orders/{orderID}/billto")]
        [SwaggerOperation("PatchBillingAddress")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult PatchBillingAddress([FromRoute]string buyerID, [FromRoute]string orderID, [FromBody]Address address)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <response code="200">Partially update the Shipping Address of all Line Items on the Order. Not allowed on unsubmitted orders where ShippingAddressID has been set on any Line Items. In that case, use the Addresses resource to update the Saved Address.</response>
        [HttpPatch]
        [Route("/buyers/{buyerID}/orders/{orderID}/shipto")]
        [SwaggerOperation("PatchShippingAddress")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult PatchShippingAddress([FromRoute]string buyerID, [FromRoute]string orderID, [FromBody]Address address)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <response code="200">Remove Promotion from Order.</response>
        [HttpDelete]
        [Route("/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}")]
        [SwaggerOperation("RemovePromotion")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult RemovePromotion([FromRoute]string buyerID, [FromRoute]string orderID, [FromRoute]string promoCode)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <response code="200">Set the Billing Address of the Order. Appropriate only when the address is not to be saved/reused. To use a saved Address (i.e. from the Addresses resource), PATCH the Order&#39;s BillingAddressID property instead.</response>
        [HttpPut]
        [Route("/buyers/{buyerID}/orders/{orderID}/billto")]
        [SwaggerOperation("SetBillingAddress")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult SetBillingAddress([FromRoute]string buyerID, [FromRoute]string orderID, [FromBody]Address address)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <response code="200">Set the Shipping Address of all Line Items on the Order. Appropriate only when the address is not to be saved/reused. To use a saved Address (i.e. from the Addresses resource), PATCH the Order&#39;s ShippingAddressID property instead.</response>
        [HttpPut]
        [Route("/buyers/{buyerID}/orders/{orderID}/shipto")]
        [SwaggerOperation("SetShippingAddress")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult SetShippingAddress([FromRoute]string buyerID, [FromRoute]string orderID, [FromBody]Address address)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="shipment"></param>
        /// <response code="201">Create a new Shipment containing all Line Items from this Order.</response>
        [HttpPost]
        [Route("/buyers/{buyerID}/orders/{orderID}/ship")]
        [SwaggerOperation("Ship")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Ship([FromRoute]string buyerID, [FromRoute]string orderID, [FromBody]Shipment shipment)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <response code="201"></response>
        [HttpPost]
        [Route("/buyers/{buyerID}/orders/{orderID}/submit")]
        [SwaggerOperation("Submit")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Submit([FromRoute]string buyerID, [FromRoute]string orderID)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="tempUserToken">Temp user token of the order.</param>
        /// <response code="204"></response>
        [HttpPut]
        [Route("/buyers/{buyerID}/orders")]
        [SwaggerOperation("TransferTempUserOrder")]
        public virtual void TransferTempUserOrder([FromRoute]string buyerID, [FromQuery]string tempUserToken)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="order"></param>
        /// <response code="200"></response>
        [HttpPut]
        [Route("/buyers/{buyerID}/orders/{orderID}")]
        [SwaggerOperation("Update")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Update([FromRoute]string buyerID, [FromRoute]string orderID, [FromBody]Order order)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }
    }
}
