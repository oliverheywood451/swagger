/*
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using OrderCloud.Models;

namespace OrderCloud.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class MeApiController : Controller
    { 

        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="address"></param>
        /// <response code="201">Only available to Buyer Users.</response>
        [HttpPost]
        [Route("/me/addresses")]
        [SwaggerOperation("CreateAddress")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult CreateAddress([FromBody]BuyerAddress address)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="creditCard"></param>
        /// <response code="201">Only available to Buyer Users.</response>
        [HttpPost]
        [Route("/me/creditcards")]
        [SwaggerOperation("CreateCreditCard")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult CreateCreditCard([FromBody]BuyerCreditCard creditCard)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="addressID">ID of the address.</param>
        /// <response code="204">Only available to Buyer Users.</response>
        [HttpDelete]
        [Route("/me/addresses/{addressID}")]
        [SwaggerOperation("DeleteAddress")]
        public virtual void DeleteAddress([FromRoute]string addressID)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="creditcardID">ID of the creditcard.</param>
        /// <response code="204">Only available to Buyer Users.</response>
        [HttpDelete]
        [Route("/me/creditcards/{creditcardID}")]
        [SwaggerOperation("DeleteCreditCard")]
        public virtual void DeleteCreditCard([FromRoute]string creditcardID)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <response code="200"></response>
        [HttpGet]
        [Route("/me")]
        [SwaggerOperation("Get")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Get()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="addressID">ID of the address.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/addresses/{addressID}")]
        [SwaggerOperation("GetAddress")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult GetAddress([FromRoute]string addressID)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="creditcardID">ID of the creditcard.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/creditcards/{creditcardID}")]
        [SwaggerOperation("GetCreditCard")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult GetCreditCard([FromRoute]string creditcardID)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="orderID">ID of the order.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/orders/{orderID}")]
        [SwaggerOperation("GetOrder")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult GetOrder([FromRoute]string orderID)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="productID">ID of the product.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/products/{productID}")]
        [SwaggerOperation("GetProduct")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult GetProduct([FromRoute]string productID)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="promotionID">ID of the promotion.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/promotions/{promotionID}")]
        [SwaggerOperation("GetPromotion")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult GetPromotion([FromRoute]string promotionID)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="productID">ID of the product.</param>
        /// <param name="specID">ID of the spec.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/products/{productID}/specs/{specID}")]
        [SwaggerOperation("GetSpec")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult GetSpec([FromRoute]string productID, [FromRoute]string specID)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/addresses")]
        [SwaggerOperation("ListAddresses")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListAddresses([FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="depth">Depth of the category.</param>
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/categories")]
        [SwaggerOperation("ListCategories")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListCategories([FromQuery]string depth, [FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/costcenters")]
        [SwaggerOperation("ListCostCenters")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListCostCenters([FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/creditcards")]
        [SwaggerOperation("ListCreditCards")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListCreditCards([FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="from">Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).</param>
        /// <param name="to">Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).</param>
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/orders/incoming")]
        [SwaggerOperation("ListIncomingOrders")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListIncomingOrders([FromQuery]string from, [FromQuery]string to, [FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="from">Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).</param>
        /// <param name="to">Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).</param>
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/orders/outgoing")]
        [SwaggerOperation("ListOutgoingOrders")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListOutgoingOrders([FromQuery]string from, [FromQuery]string to, [FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/products")]
        [SwaggerOperation("ListProducts")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListProducts([FromQuery]string categoryID, [FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/promotions")]
        [SwaggerOperation("ListPromotions")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListPromotions([FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="productID">ID of the product.</param>
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/products/{productID}/specs")]
        [SwaggerOperation("ListSpecs")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListSpecs([FromRoute]string productID, [FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="parentID">ID of the parent.</param>
        /// <param name="depth">Depth of the category.</param>
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/categories/{parentID}/categories")]
        [SwaggerOperation("ListSubcategories")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListSubcategories([FromRoute]string parentID, [FromQuery]string depth, [FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpGet]
        [Route("/me/usergroups")]
        [SwaggerOperation("ListUserGroups")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListUserGroups([FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="user"></param>
        /// <response code="200"></response>
        [HttpPatch]
        [Route("/me")]
        [SwaggerOperation("Patch")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Patch([FromBody]User user)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="addressID">ID of the address.</param>
        /// <param name="address"></param>
        /// <response code="204">Only available to Buyer Users.</response>
        [HttpPatch]
        [Route("/me/addresses/{addressID}")]
        [SwaggerOperation("PatchAddress")]
        public virtual void PatchAddress([FromRoute]string addressID, [FromBody]BuyerAddress address)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="creditcardID">ID of the creditcard.</param>
        /// <param name="creditCard"></param>
        /// <response code="204">Only available to Buyer Users.</response>
        [HttpPatch]
        [Route("/me/creditcards/{creditcardID}")]
        [SwaggerOperation("PatchCreditCard")]
        public virtual void PatchCreditCard([FromRoute]string creditcardID, [FromBody]BuyerCreditCard creditCard)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="user"></param>
        /// <response code="200"></response>
        [HttpPut]
        [Route("/me")]
        [SwaggerOperation("Update")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Update([FromBody]User user)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="addressID">ID of the address.</param>
        /// <param name="address"></param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpPut]
        [Route("/me/addresses/{addressID}")]
        [SwaggerOperation("UpdateAddress")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult UpdateAddress([FromRoute]string addressID, [FromBody]BuyerAddress address)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="creditcardID">ID of the creditcard.</param>
        /// <param name="creditCard"></param>
        /// <response code="200">Only available to Buyer Users.</response>
        [HttpPut]
        [Route("/me/creditcards/{creditcardID}")]
        [SwaggerOperation("UpdateCreditCard")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult UpdateCreditCard([FromRoute]string creditcardID, [FromBody]BuyerCreditCard creditCard)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }
    }
}
