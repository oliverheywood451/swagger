/*
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using OrderCloud.Models;

namespace OrderCloud.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class PromotionApiController : Controller
    { 

        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="promo"></param>
        /// <response code="201"></response>
        [HttpPost]
        [Route("/promotions")]
        [SwaggerOperation("Create")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Create([FromBody]Promotion promo)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="promotionID">ID of the promotion.</param>
        /// <response code="204"></response>
        [HttpDelete]
        [Route("/promotions/{promotionID}")]
        [SwaggerOperation("Delete")]
        public virtual void Delete([FromRoute]string promotionID)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="promotionID">ID of the promotion.</param>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="userID">ID of the user.</param>
        /// <param name="userGroupID">ID of the user group.</param>
        /// <response code="204"></response>
        [HttpDelete]
        [Route("/promotions/{promotionID}/assignments")]
        [SwaggerOperation("DeleteAssignment")]
        public virtual void DeleteAssignment([FromRoute]string promotionID, [FromQuery]string buyerID, [FromQuery]string userID, [FromQuery]string userGroupID)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="promotionID">ID of the promotion.</param>
        /// <response code="200"></response>
        [HttpGet]
        [Route("/promotions/{promotionID}")]
        [SwaggerOperation("Get")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Get([FromRoute]string promotionID)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="search">Word or phrase to search for.</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on.</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200"></response>
        [HttpGet]
        [Route("/promotions")]
        [SwaggerOperation("List")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult List([FromQuery]string search, [FromQuery]string searchOn, [FromQuery]string sortBy, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="promotionID">ID of the promotion.</param>
        /// <param name="userID">ID of the user.</param>
        /// <param name="userGroupID">ID of the user group.</param>
        /// <param name="level">Level of the promotion.</param>
        /// <param name="page">Page of results to return. Default: 1</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100.</param>
        /// <response code="200"></response>
        [HttpGet]
        [Route("/promotions/assignments")]
        [SwaggerOperation("ListAssignments")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult ListAssignments([FromQuery]string buyerID, [FromQuery]string promotionID, [FromQuery]string userID, [FromQuery]string userGroupID, [FromQuery]string level, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="promotionID">ID of the promotion.</param>
        /// <param name="partialPromotion"></param>
        /// <response code="200"></response>
        [HttpPatch]
        [Route("/promotions/{promotionID}")]
        [SwaggerOperation("Patch")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Patch([FromRoute]string promotionID, [FromBody]Promotion partialPromotion)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="assignment"></param>
        /// <response code="204"></response>
        [HttpPost]
        [Route("/promotions/assignments")]
        [SwaggerOperation("SaveAssignment")]
        public virtual void SaveAssignment([FromBody]PromotionAssignment assignment)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="promotionID">ID of the promotion.</param>
        /// <param name="promo"></param>
        /// <response code="200"></response>
        [HttpPut]
        [Route("/promotions/{promotionID}")]
        [SwaggerOperation("Update")]
        [SwaggerResponse(200, type: typeof(Object))]
        public virtual IActionResult Update([FromRoute]string promotionID, [FromBody]Promotion promo)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            return new ObjectResult(example);
        }
    }
}
