/*
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OrderCloud.Models
{
    /// <summary>
    /// 
    /// </summary>
    public partial class SpendingAccount :  IEquatable<SpendingAccount>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpendingAccount" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Balance">Balance.</param>
        /// <param name="AllowAsPaymentMethod">AllowAsPaymentMethod.</param>
        /// <param name="RedemptionCode">RedemptionCode.</param>
        /// <param name="StartDate">StartDate.</param>
        /// <param name="EndDate">EndDate.</param>
        /// <param name="Xp">Xp.</param>
        public SpendingAccount(string ID = null, string Name = null, decimal? Balance = null, bool? AllowAsPaymentMethod = null, string RedemptionCode = null, DateTime? StartDate = null, DateTime? EndDate = null, Object Xp = null)
        {
            this.ID = ID;
            this.Name = Name;
            this.Balance = Balance;
            this.AllowAsPaymentMethod = AllowAsPaymentMethod;
            this.RedemptionCode = RedemptionCode;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
            this.Xp = Xp;
            
        }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        public decimal? Balance { get; set; }

        /// <summary>
        /// Gets or Sets AllowAsPaymentMethod
        /// </summary>
        public bool? AllowAsPaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets RedemptionCode
        /// </summary>
        public string RedemptionCode { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Xp
        /// </summary>
        public Object Xp { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpendingAccount {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
sb.Append("  Name: ").Append(Name).Append("\n");
sb.Append("  Balance: ").Append(Balance).Append("\n");
sb.Append("  AllowAsPaymentMethod: ").Append(AllowAsPaymentMethod).Append("\n");
sb.Append("  RedemptionCode: ").Append(RedemptionCode).Append("\n");
sb.Append("  StartDate: ").Append(StartDate).Append("\n");
sb.Append("  EndDate: ").Append(EndDate).Append("\n");
sb.Append("  Xp: ").Append(Xp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((SpendingAccount)obj);
        }

        /// <summary>
        /// Returns true if SpendingAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of SpendingAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpendingAccount other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Balance == other.Balance ||
                    this.Balance != null &&
                    this.Balance.Equals(other.Balance)
                ) && 
                (
                    this.AllowAsPaymentMethod == other.AllowAsPaymentMethod ||
                    this.AllowAsPaymentMethod != null &&
                    this.AllowAsPaymentMethod.Equals(other.AllowAsPaymentMethod)
                ) && 
                (
                    this.RedemptionCode == other.RedemptionCode ||
                    this.RedemptionCode != null &&
                    this.RedemptionCode.Equals(other.RedemptionCode)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.Xp == other.Xp ||
                    this.Xp != null &&
                    this.Xp.Equals(other.Xp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Balance != null)
                    hash = hash * 59 + this.Balance.GetHashCode();
                    if (this.AllowAsPaymentMethod != null)
                    hash = hash * 59 + this.AllowAsPaymentMethod.GetHashCode();
                    if (this.RedemptionCode != null)
                    hash = hash * 59 + this.RedemptionCode.GetHashCode();
                    if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                    if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                    if (this.Xp != null)
                    hash = hash * 59 + this.Xp.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(SpendingAccount left, SpendingAccount right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SpendingAccount left, SpendingAccount right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
