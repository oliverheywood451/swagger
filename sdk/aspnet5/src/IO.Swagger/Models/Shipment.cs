/*
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OrderCloud.Models
{
    /// <summary>
    /// 
    /// </summary>
    public partial class Shipment :  IEquatable<Shipment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="Shipper">Shipper.</param>
        /// <param name="DateShipped">DateShipped.</param>
        /// <param name="TrackingNumber">TrackingNumber.</param>
        /// <param name="Cost">Cost.</param>
        /// <param name="Items">Items.</param>
        /// <param name="Xp">Xp.</param>
        public Shipment(string ID = null, string Shipper = null, DateTime? DateShipped = null, string TrackingNumber = null, decimal? Cost = null, List<ShipmentItem> Items = null, Object Xp = null)
        {
            this.ID = ID;
            this.Shipper = Shipper;
            this.DateShipped = DateShipped;
            this.TrackingNumber = TrackingNumber;
            this.Cost = Cost;
            this.Items = Items;
            this.Xp = Xp;
            
        }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets Shipper
        /// </summary>
        public string Shipper { get; set; }

        /// <summary>
        /// Gets or Sets DateShipped
        /// </summary>
        public DateTime? DateShipped { get; set; }

        /// <summary>
        /// Gets or Sets TrackingNumber
        /// </summary>
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        public decimal? Cost { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        public List<ShipmentItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets Xp
        /// </summary>
        public Object Xp { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Shipment {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
sb.Append("  Shipper: ").Append(Shipper).Append("\n");
sb.Append("  DateShipped: ").Append(DateShipped).Append("\n");
sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
sb.Append("  Cost: ").Append(Cost).Append("\n");
sb.Append("  Items: ").Append(Items).Append("\n");
sb.Append("  Xp: ").Append(Xp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Shipment)obj);
        }

        /// <summary>
        /// Returns true if Shipment instances are equal
        /// </summary>
        /// <param name="other">Instance of Shipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Shipment other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.Shipper == other.Shipper ||
                    this.Shipper != null &&
                    this.Shipper.Equals(other.Shipper)
                ) && 
                (
                    this.DateShipped == other.DateShipped ||
                    this.DateShipped != null &&
                    this.DateShipped.Equals(other.DateShipped)
                ) && 
                (
                    this.TrackingNumber == other.TrackingNumber ||
                    this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(other.TrackingNumber)
                ) && 
                (
                    this.Cost == other.Cost ||
                    this.Cost != null &&
                    this.Cost.Equals(other.Cost)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(other.Items)
                ) && 
                (
                    this.Xp == other.Xp ||
                    this.Xp != null &&
                    this.Xp.Equals(other.Xp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                    if (this.Shipper != null)
                    hash = hash * 59 + this.Shipper.GetHashCode();
                    if (this.DateShipped != null)
                    hash = hash * 59 + this.DateShipped.GetHashCode();
                    if (this.TrackingNumber != null)
                    hash = hash * 59 + this.TrackingNumber.GetHashCode();
                    if (this.Cost != null)
                    hash = hash * 59 + this.Cost.GetHashCode();
                    if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                    if (this.Xp != null)
                    hash = hash * 59 + this.Xp.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Shipment left, Shipment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Shipment left, Shipment right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
