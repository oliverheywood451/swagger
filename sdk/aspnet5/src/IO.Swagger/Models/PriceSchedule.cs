/*
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OrderCloud.Models
{
    /// <summary>
    /// 
    /// </summary>
    public partial class PriceSchedule :  IEquatable<PriceSchedule>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceSchedule" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="Name">Name.</param>
        /// <param name="ApplyTax">ApplyTax.</param>
        /// <param name="ApplyShipping">ApplyShipping.</param>
        /// <param name="MaxQuantity">MaxQuantity.</param>
        /// <param name="UseCumulativeQuantity">UseCumulativeQuantity.</param>
        /// <param name="RestrictedQuantity">RestrictedQuantity.</param>
        /// <param name="OrderType">OrderType.</param>
        /// <param name="PriceBreaks">PriceBreaks.</param>
        /// <param name="Xp">Xp.</param>
        public PriceSchedule(string ID = null, string Name = null, bool? ApplyTax = null, bool? ApplyShipping = null, int? MaxQuantity = null, bool? UseCumulativeQuantity = null, bool? RestrictedQuantity = null, string OrderType = null, List<ShipmentItem> PriceBreaks = null, Object Xp = null)
        {
            this.ID = ID;
            this.Name = Name;
            this.ApplyTax = ApplyTax;
            this.ApplyShipping = ApplyShipping;
            this.MaxQuantity = MaxQuantity;
            this.UseCumulativeQuantity = UseCumulativeQuantity;
            this.RestrictedQuantity = RestrictedQuantity;
            this.OrderType = OrderType;
            this.PriceBreaks = PriceBreaks;
            this.Xp = Xp;
            
        }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ApplyTax
        /// </summary>
        public bool? ApplyTax { get; set; }

        /// <summary>
        /// Gets or Sets ApplyShipping
        /// </summary>
        public bool? ApplyShipping { get; set; }

        /// <summary>
        /// Gets or Sets MaxQuantity
        /// </summary>
        public int? MaxQuantity { get; set; }

        /// <summary>
        /// Gets or Sets UseCumulativeQuantity
        /// </summary>
        public bool? UseCumulativeQuantity { get; set; }

        /// <summary>
        /// Gets or Sets RestrictedQuantity
        /// </summary>
        public bool? RestrictedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        public string OrderType { get; set; }

        /// <summary>
        /// Gets or Sets PriceBreaks
        /// </summary>
        public List<ShipmentItem> PriceBreaks { get; set; }

        /// <summary>
        /// Gets or Sets Xp
        /// </summary>
        public Object Xp { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceSchedule {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
sb.Append("  Name: ").Append(Name).Append("\n");
sb.Append("  ApplyTax: ").Append(ApplyTax).Append("\n");
sb.Append("  ApplyShipping: ").Append(ApplyShipping).Append("\n");
sb.Append("  MaxQuantity: ").Append(MaxQuantity).Append("\n");
sb.Append("  UseCumulativeQuantity: ").Append(UseCumulativeQuantity).Append("\n");
sb.Append("  RestrictedQuantity: ").Append(RestrictedQuantity).Append("\n");
sb.Append("  OrderType: ").Append(OrderType).Append("\n");
sb.Append("  PriceBreaks: ").Append(PriceBreaks).Append("\n");
sb.Append("  Xp: ").Append(Xp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((PriceSchedule)obj);
        }

        /// <summary>
        /// Returns true if PriceSchedule instances are equal
        /// </summary>
        /// <param name="other">Instance of PriceSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceSchedule other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ApplyTax == other.ApplyTax ||
                    this.ApplyTax != null &&
                    this.ApplyTax.Equals(other.ApplyTax)
                ) && 
                (
                    this.ApplyShipping == other.ApplyShipping ||
                    this.ApplyShipping != null &&
                    this.ApplyShipping.Equals(other.ApplyShipping)
                ) && 
                (
                    this.MaxQuantity == other.MaxQuantity ||
                    this.MaxQuantity != null &&
                    this.MaxQuantity.Equals(other.MaxQuantity)
                ) && 
                (
                    this.UseCumulativeQuantity == other.UseCumulativeQuantity ||
                    this.UseCumulativeQuantity != null &&
                    this.UseCumulativeQuantity.Equals(other.UseCumulativeQuantity)
                ) && 
                (
                    this.RestrictedQuantity == other.RestrictedQuantity ||
                    this.RestrictedQuantity != null &&
                    this.RestrictedQuantity.Equals(other.RestrictedQuantity)
                ) && 
                (
                    this.OrderType == other.OrderType ||
                    this.OrderType != null &&
                    this.OrderType.Equals(other.OrderType)
                ) && 
                (
                    this.PriceBreaks == other.PriceBreaks ||
                    this.PriceBreaks != null &&
                    this.PriceBreaks.SequenceEqual(other.PriceBreaks)
                ) && 
                (
                    this.Xp == other.Xp ||
                    this.Xp != null &&
                    this.Xp.Equals(other.Xp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.ApplyTax != null)
                    hash = hash * 59 + this.ApplyTax.GetHashCode();
                    if (this.ApplyShipping != null)
                    hash = hash * 59 + this.ApplyShipping.GetHashCode();
                    if (this.MaxQuantity != null)
                    hash = hash * 59 + this.MaxQuantity.GetHashCode();
                    if (this.UseCumulativeQuantity != null)
                    hash = hash * 59 + this.UseCumulativeQuantity.GetHashCode();
                    if (this.RestrictedQuantity != null)
                    hash = hash * 59 + this.RestrictedQuantity.GetHashCode();
                    if (this.OrderType != null)
                    hash = hash * 59 + this.OrderType.GetHashCode();
                    if (this.PriceBreaks != null)
                    hash = hash * 59 + this.PriceBreaks.GetHashCode();
                    if (this.Xp != null)
                    hash = hash * 59 + this.Xp.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(PriceSchedule left, PriceSchedule right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PriceSchedule left, PriceSchedule right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
