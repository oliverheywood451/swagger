/*
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OrderCloud.Models
{
    /// <summary>
    /// 
    /// </summary>
    public partial class EmailTemplate :  IEquatable<EmailTemplate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailTemplate" /> class.
        /// </summary>
        /// <param name="Subject">Subject.</param>
        /// <param name="Body">Body.</param>
        /// <param name="ReplyEmail">ReplyEmail.</param>
        /// <param name="SendMessageType">SendMessageType.</param>
        /// <param name="EmailFormatType">EmailFormatType.</param>
        public EmailTemplate(string Subject = null, string Body = null, string ReplyEmail = null, bool? SendMessageType = null, string EmailFormatType = null)
        {
            this.Subject = Subject;
            this.Body = Body;
            this.ReplyEmail = ReplyEmail;
            this.SendMessageType = SendMessageType;
            this.EmailFormatType = EmailFormatType;
            
        }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets ReplyEmail
        /// </summary>
        public string ReplyEmail { get; set; }

        /// <summary>
        /// Gets or Sets SendMessageType
        /// </summary>
        public bool? SendMessageType { get; set; }

        /// <summary>
        /// Gets or Sets EmailFormatType
        /// </summary>
        public string EmailFormatType { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailTemplate {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
sb.Append("  Body: ").Append(Body).Append("\n");
sb.Append("  ReplyEmail: ").Append(ReplyEmail).Append("\n");
sb.Append("  SendMessageType: ").Append(SendMessageType).Append("\n");
sb.Append("  EmailFormatType: ").Append(EmailFormatType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((EmailTemplate)obj);
        }

        /// <summary>
        /// Returns true if EmailTemplate instances are equal
        /// </summary>
        /// <param name="other">Instance of EmailTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailTemplate other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.Equals(other.Subject)
                ) && 
                (
                    this.Body == other.Body ||
                    this.Body != null &&
                    this.Body.Equals(other.Body)
                ) && 
                (
                    this.ReplyEmail == other.ReplyEmail ||
                    this.ReplyEmail != null &&
                    this.ReplyEmail.Equals(other.ReplyEmail)
                ) && 
                (
                    this.SendMessageType == other.SendMessageType ||
                    this.SendMessageType != null &&
                    this.SendMessageType.Equals(other.SendMessageType)
                ) && 
                (
                    this.EmailFormatType == other.EmailFormatType ||
                    this.EmailFormatType != null &&
                    this.EmailFormatType.Equals(other.EmailFormatType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                    if (this.Body != null)
                    hash = hash * 59 + this.Body.GetHashCode();
                    if (this.ReplyEmail != null)
                    hash = hash * 59 + this.ReplyEmail.GetHashCode();
                    if (this.SendMessageType != null)
                    hash = hash * 59 + this.SendMessageType.GetHashCode();
                    if (this.EmailFormatType != null)
                    hash = hash * 59 + this.EmailFormatType.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(EmailTemplate left, EmailTemplate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmailTemplate left, EmailTemplate right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
