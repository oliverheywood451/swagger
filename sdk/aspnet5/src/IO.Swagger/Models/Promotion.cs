/*
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OrderCloud.Models
{
    /// <summary>
    /// 
    /// </summary>
    public partial class Promotion :  IEquatable<Promotion>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Promotion" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="Code">Code.</param>
        /// <param name="Name">Name.</param>
        /// <param name="UsagesRemaining">UsagesRemaining.</param>
        /// <param name="Description">Description.</param>
        /// <param name="FinePrint">FinePrint.</param>
        /// <param name="StartDate">StartDate.</param>
        /// <param name="ExpirationDate">ExpirationDate.</param>
        /// <param name="EligibleExpression">EligibleExpression.</param>
        /// <param name="ValueExpression">ValueExpression.</param>
        /// <param name="CanCombine">CanCombine.</param>
        /// <param name="Xp">Xp.</param>
        public Promotion(string ID = null, string Code = null, string Name = null, int? UsagesRemaining = null, string Description = null, string FinePrint = null, DateTime? StartDate = null, DateTime? ExpirationDate = null, string EligibleExpression = null, string ValueExpression = null, bool? CanCombine = null, Object Xp = null)
        {
            this.ID = ID;
            this.Code = Code;
            this.Name = Name;
            this.UsagesRemaining = UsagesRemaining;
            this.Description = Description;
            this.FinePrint = FinePrint;
            this.StartDate = StartDate;
            this.ExpirationDate = ExpirationDate;
            this.EligibleExpression = EligibleExpression;
            this.ValueExpression = ValueExpression;
            this.CanCombine = CanCombine;
            this.Xp = Xp;
            
        }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UsagesRemaining
        /// </summary>
        public int? UsagesRemaining { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FinePrint
        /// </summary>
        public string FinePrint { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets EligibleExpression
        /// </summary>
        public string EligibleExpression { get; set; }

        /// <summary>
        /// Gets or Sets ValueExpression
        /// </summary>
        public string ValueExpression { get; set; }

        /// <summary>
        /// Gets or Sets CanCombine
        /// </summary>
        public bool? CanCombine { get; set; }

        /// <summary>
        /// Gets or Sets Xp
        /// </summary>
        public Object Xp { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Promotion {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
sb.Append("  Code: ").Append(Code).Append("\n");
sb.Append("  Name: ").Append(Name).Append("\n");
sb.Append("  UsagesRemaining: ").Append(UsagesRemaining).Append("\n");
sb.Append("  Description: ").Append(Description).Append("\n");
sb.Append("  FinePrint: ").Append(FinePrint).Append("\n");
sb.Append("  StartDate: ").Append(StartDate).Append("\n");
sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
sb.Append("  EligibleExpression: ").Append(EligibleExpression).Append("\n");
sb.Append("  ValueExpression: ").Append(ValueExpression).Append("\n");
sb.Append("  CanCombine: ").Append(CanCombine).Append("\n");
sb.Append("  Xp: ").Append(Xp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Promotion)obj);
        }

        /// <summary>
        /// Returns true if Promotion instances are equal
        /// </summary>
        /// <param name="other">Instance of Promotion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Promotion other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.UsagesRemaining == other.UsagesRemaining ||
                    this.UsagesRemaining != null &&
                    this.UsagesRemaining.Equals(other.UsagesRemaining)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.FinePrint == other.FinePrint ||
                    this.FinePrint != null &&
                    this.FinePrint.Equals(other.FinePrint)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.EligibleExpression == other.EligibleExpression ||
                    this.EligibleExpression != null &&
                    this.EligibleExpression.Equals(other.EligibleExpression)
                ) && 
                (
                    this.ValueExpression == other.ValueExpression ||
                    this.ValueExpression != null &&
                    this.ValueExpression.Equals(other.ValueExpression)
                ) && 
                (
                    this.CanCombine == other.CanCombine ||
                    this.CanCombine != null &&
                    this.CanCombine.Equals(other.CanCombine)
                ) && 
                (
                    this.Xp == other.Xp ||
                    this.Xp != null &&
                    this.Xp.Equals(other.Xp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                    if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.UsagesRemaining != null)
                    hash = hash * 59 + this.UsagesRemaining.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.FinePrint != null)
                    hash = hash * 59 + this.FinePrint.GetHashCode();
                    if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                    if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                    if (this.EligibleExpression != null)
                    hash = hash * 59 + this.EligibleExpression.GetHashCode();
                    if (this.ValueExpression != null)
                    hash = hash * 59 + this.ValueExpression.GetHashCode();
                    if (this.CanCombine != null)
                    hash = hash * 59 + this.CanCombine.GetHashCode();
                    if (this.Xp != null)
                    hash = hash * 59 + this.Xp.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Promotion left, Promotion right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Promotion left, Promotion right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
