/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.PromotionApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * A full ecommerce backend as a service.
 * Version: 0.1
 * Generated at: 2016-07-26T21:58:06.393Z
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.PromotionApi');

goog.require('API.Client.Promotion');
goog.require('API.Client.PromotionAssignment');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.PromotionApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('PromotionApiBasePath') ?
                   /** @type {!string} */ ($injector.get('PromotionApiBasePath')) :
                   'https://api.ordercloud.io/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('PromotionApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('PromotionApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.PromotionApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * 
 * @param {!Promotion} promo 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.PromotionApi.prototype.create = function(promo, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/promotions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'promo' is set
  if (!promo) {
    throw new Error('Missing required parameter promo when calling create');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: promo,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} promotionID ID of the promotion.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.PromotionApi.prototype.delete = function(promotionID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/promotions/{promotionID}'
      .replace('{' + 'promotionID' + '}', String(promotionID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'promotionID' is set
  if (!promotionID) {
    throw new Error('Missing required parameter promotionID when calling delete');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} promotionID ID of the promotion.
 * @param {!string} buyerID ID of the buyer.
 * @param {!string=} opt_userID ID of the user.
 * @param {!string=} opt_userGroupID ID of the user group.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.PromotionApi.prototype.deleteAssignment = function(promotionID, buyerID, opt_userID, opt_userGroupID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/promotions/{promotionID}/assignments'
      .replace('{' + 'promotionID' + '}', String(promotionID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'promotionID' is set
  if (!promotionID) {
    throw new Error('Missing required parameter promotionID when calling deleteAssignment');
  }
  // verify required parameter 'buyerID' is set
  if (!buyerID) {
    throw new Error('Missing required parameter buyerID when calling deleteAssignment');
  }
  if (buyerID !== undefined) {
    queryParameters['buyerID'] = buyerID;
  }

  if (opt_userID !== undefined) {
    queryParameters['userID'] = opt_userID;
  }

  if (opt_userGroupID !== undefined) {
    queryParameters['userGroupID'] = opt_userGroupID;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} promotionID ID of the promotion.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.PromotionApi.prototype.get = function(promotionID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/promotions/{promotionID}'
      .replace('{' + 'promotionID' + '}', String(promotionID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'promotionID' is set
  if (!promotionID) {
    throw new Error('Missing required parameter promotionID when calling get');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_search Word or phrase to search for.
 * @param {!string=} opt_searchOn Comma-delimited list of fields to search on.
 * @param {!string=} opt_sortBy Comma-delimited list of fields to sort by.
 * @param {!number=} opt_page Page of results to return. Default: 1
 * @param {!number=} opt_pageSize Number of results to return per page. Default: 20, max: 100.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.PromotionApi.prototype.list = function(opt_search, opt_searchOn, opt_sortBy, opt_page, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/promotions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_search !== undefined) {
    queryParameters['search'] = opt_search;
  }

  if (opt_searchOn !== undefined) {
    queryParameters['searchOn'] = opt_searchOn;
  }

  if (opt_sortBy !== undefined) {
    queryParameters['sortBy'] = opt_sortBy;
  }

  if (opt_page !== undefined) {
    queryParameters['page'] = opt_page;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['pageSize'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} buyerID ID of the buyer.
 * @param {!string=} opt_promotionID ID of the promotion.
 * @param {!string=} opt_userID ID of the user.
 * @param {!string=} opt_userGroupID ID of the user group.
 * @param {!string=} opt_level Level of the promotion.
 * @param {!number=} opt_page Page of results to return. Default: 1
 * @param {!number=} opt_pageSize Number of results to return per page. Default: 20, max: 100.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.PromotionApi.prototype.listAssignments = function(buyerID, opt_promotionID, opt_userID, opt_userGroupID, opt_level, opt_page, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/promotions/assignments';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'buyerID' is set
  if (!buyerID) {
    throw new Error('Missing required parameter buyerID when calling listAssignments');
  }
  if (buyerID !== undefined) {
    queryParameters['buyerID'] = buyerID;
  }

  if (opt_promotionID !== undefined) {
    queryParameters['promotionID'] = opt_promotionID;
  }

  if (opt_userID !== undefined) {
    queryParameters['userID'] = opt_userID;
  }

  if (opt_userGroupID !== undefined) {
    queryParameters['userGroupID'] = opt_userGroupID;
  }

  if (opt_level !== undefined) {
    queryParameters['level'] = opt_level;
  }

  if (opt_page !== undefined) {
    queryParameters['page'] = opt_page;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['pageSize'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} promotionID ID of the promotion.
 * @param {!Promotion} partialPromotion 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.PromotionApi.prototype.patch = function(promotionID, partialPromotion, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/promotions/{promotionID}'
      .replace('{' + 'promotionID' + '}', String(promotionID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'promotionID' is set
  if (!promotionID) {
    throw new Error('Missing required parameter promotionID when calling patch');
  }
  // verify required parameter 'partialPromotion' is set
  if (!partialPromotion) {
    throw new Error('Missing required parameter partialPromotion when calling patch');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: partialPromotion,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!PromotionAssignment} assignment 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.PromotionApi.prototype.saveAssignment = function(assignment, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/promotions/assignments';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'assignment' is set
  if (!assignment) {
    throw new Error('Missing required parameter assignment when calling saveAssignment');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: assignment,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} promotionID ID of the promotion.
 * @param {!Promotion} promo 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.PromotionApi.prototype.update = function(promotionID, promo, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/promotions/{promotionID}'
      .replace('{' + 'promotionID' + '}', String(promotionID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'promotionID' is set
  if (!promotionID) {
    throw new Error('Missing required parameter promotionID when calling update');
  }
  // verify required parameter 'promo' is set
  if (!promo) {
    throw new Error('Missing required parameter promo when calling update');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: promo,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
