/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.SpecApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * A full ecommerce backend as a service.
 * Version: 0.1
 * Generated at: 2016-07-26T21:58:06.393Z
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.SpecApi');

goog.require('API.Client.Spec');
goog.require('API.Client.SpecOption');
goog.require('API.Client.SpecProductAssignment');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.SpecApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('SpecApiBasePath') ?
                   /** @type {!string} */ ($injector.get('SpecApiBasePath')) :
                   'https://api.ordercloud.io/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('SpecApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('SpecApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.SpecApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * 
 * @param {!Spec} spec 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.SpecApi.prototype.create = function(spec, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'spec' is set
  if (!spec) {
    throw new Error('Missing required parameter spec when calling create');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: spec,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} specID ID of the spec.
 * @param {!SpecOption} option 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.SpecApi.prototype.createOption = function(specID, option, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/{specID}/options'
      .replace('{' + 'specID' + '}', String(specID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'specID' is set
  if (!specID) {
    throw new Error('Missing required parameter specID when calling createOption');
  }
  // verify required parameter 'option' is set
  if (!option) {
    throw new Error('Missing required parameter option when calling createOption');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: option,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} specID ID of the spec.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SpecApi.prototype.delete = function(specID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/{specID}'
      .replace('{' + 'specID' + '}', String(specID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'specID' is set
  if (!specID) {
    throw new Error('Missing required parameter specID when calling delete');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} specID ID of the spec.
 * @param {!string} optionID ID of the option.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SpecApi.prototype.deleteOption = function(specID, optionID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/{specID}/options/{optionID}'
      .replace('{' + 'specID' + '}', String(specID))
      .replace('{' + 'optionID' + '}', String(optionID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'specID' is set
  if (!specID) {
    throw new Error('Missing required parameter specID when calling deleteOption');
  }
  // verify required parameter 'optionID' is set
  if (!optionID) {
    throw new Error('Missing required parameter optionID when calling deleteOption');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} specID ID of the spec.
 * @param {!string} productID ID of the product.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SpecApi.prototype.deleteProductAssignment = function(specID, productID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/{specID}/productassignments/{productID}'
      .replace('{' + 'specID' + '}', String(specID))
      .replace('{' + 'productID' + '}', String(productID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'specID' is set
  if (!specID) {
    throw new Error('Missing required parameter specID when calling deleteProductAssignment');
  }
  // verify required parameter 'productID' is set
  if (!productID) {
    throw new Error('Missing required parameter productID when calling deleteProductAssignment');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} specID ID of the spec.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.SpecApi.prototype.get = function(specID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/{specID}'
      .replace('{' + 'specID' + '}', String(specID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'specID' is set
  if (!specID) {
    throw new Error('Missing required parameter specID when calling get');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} specID ID of the spec.
 * @param {!string} optionID ID of the option.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.SpecApi.prototype.getOption = function(specID, optionID, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/{specID}/options/{optionID}'
      .replace('{' + 'specID' + '}', String(specID))
      .replace('{' + 'optionID' + '}', String(optionID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'specID' is set
  if (!specID) {
    throw new Error('Missing required parameter specID when calling getOption');
  }
  // verify required parameter 'optionID' is set
  if (!optionID) {
    throw new Error('Missing required parameter optionID when calling getOption');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_search Word or phrase to search for.
 * @param {!string=} opt_searchOn Comma-delimited list of fields to search on.
 * @param {!string=} opt_sortBy Comma-delimited list of fields to sort by.
 * @param {!number=} opt_page Page of results to return. Default: 1
 * @param {!number=} opt_pageSize Number of results to return per page. Default: 20, max: 100.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.SpecApi.prototype.list = function(opt_search, opt_searchOn, opt_sortBy, opt_page, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_search !== undefined) {
    queryParameters['search'] = opt_search;
  }

  if (opt_searchOn !== undefined) {
    queryParameters['searchOn'] = opt_searchOn;
  }

  if (opt_sortBy !== undefined) {
    queryParameters['sortBy'] = opt_sortBy;
  }

  if (opt_page !== undefined) {
    queryParameters['page'] = opt_page;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['pageSize'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} specID ID of the spec.
 * @param {!string=} opt_search Word or phrase to search for.
 * @param {!string=} opt_searchOn Comma-delimited list of fields to search on.
 * @param {!string=} opt_sortBy Comma-delimited list of fields to sort by.
 * @param {!number=} opt_page Page of results to return. Default: 1
 * @param {!number=} opt_pageSize Number of results to return per page. Default: 20, max: 100.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.SpecApi.prototype.listOptions = function(specID, opt_search, opt_searchOn, opt_sortBy, opt_page, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/{specID}/options'
      .replace('{' + 'specID' + '}', String(specID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'specID' is set
  if (!specID) {
    throw new Error('Missing required parameter specID when calling listOptions');
  }
  if (opt_search !== undefined) {
    queryParameters['search'] = opt_search;
  }

  if (opt_searchOn !== undefined) {
    queryParameters['searchOn'] = opt_searchOn;
  }

  if (opt_sortBy !== undefined) {
    queryParameters['sortBy'] = opt_sortBy;
  }

  if (opt_page !== undefined) {
    queryParameters['page'] = opt_page;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['pageSize'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string=} opt_specID ID of the spec.
 * @param {!string=} opt_productID ID of the product.
 * @param {!number=} opt_page Page of results to return. Default: 1
 * @param {!number=} opt_pageSize Number of results to return per page. Default: 20, max: 100.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.SpecApi.prototype.listProductAssignments = function(opt_specID, opt_productID, opt_page, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/productassignments';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_specID !== undefined) {
    queryParameters['specID'] = opt_specID;
  }

  if (opt_productID !== undefined) {
    queryParameters['productID'] = opt_productID;
  }

  if (opt_page !== undefined) {
    queryParameters['page'] = opt_page;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['pageSize'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} specID ID of the spec.
 * @param {!Spec} spec 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.SpecApi.prototype.patch = function(specID, spec, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/{specID}'
      .replace('{' + 'specID' + '}', String(specID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'specID' is set
  if (!specID) {
    throw new Error('Missing required parameter specID when calling patch');
  }
  // verify required parameter 'spec' is set
  if (!spec) {
    throw new Error('Missing required parameter spec when calling patch');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: spec,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} specID ID of the spec.
 * @param {!string} optionID ID of the option.
 * @param {!SpecOption} option 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.SpecApi.prototype.patchOption = function(specID, optionID, option, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/{specID}/options/{optionID}'
      .replace('{' + 'specID' + '}', String(specID))
      .replace('{' + 'optionID' + '}', String(optionID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'specID' is set
  if (!specID) {
    throw new Error('Missing required parameter specID when calling patchOption');
  }
  // verify required parameter 'optionID' is set
  if (!optionID) {
    throw new Error('Missing required parameter optionID when calling patchOption');
  }
  // verify required parameter 'option' is set
  if (!option) {
    throw new Error('Missing required parameter option when calling patchOption');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: option,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!SpecProductAssignment} productAssignment 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SpecApi.prototype.saveProductAssignment = function(productAssignment, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/productassignments';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'productAssignment' is set
  if (!productAssignment) {
    throw new Error('Missing required parameter productAssignment when calling saveProductAssignment');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: productAssignment,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} specID ID of the spec.
 * @param {!Spec} spec 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.SpecApi.prototype.update = function(specID, spec, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/{specID}'
      .replace('{' + 'specID' + '}', String(specID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'specID' is set
  if (!specID) {
    throw new Error('Missing required parameter specID when calling update');
  }
  // verify required parameter 'spec' is set
  if (!spec) {
    throw new Error('Missing required parameter spec when calling update');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: spec,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} specID ID of the spec.
 * @param {!string} optionID ID of the option.
 * @param {!SpecOption} option 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.SpecApi.prototype.updateOption = function(specID, optionID, option, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/specs/{specID}/options/{optionID}'
      .replace('{' + 'specID' + '}', String(specID))
      .replace('{' + 'optionID' + '}', String(optionID));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'specID' is set
  if (!specID) {
    throw new Error('Missing required parameter specID when calling updateOption');
  }
  // verify required parameter 'optionID' is set
  if (!optionID) {
    throw new Error('Missing required parameter optionID when calling updateOption');
  }
  // verify required parameter 'option' is set
  if (!option) {
    throw new Error('Missing required parameter option when calling updateOption');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: option,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
