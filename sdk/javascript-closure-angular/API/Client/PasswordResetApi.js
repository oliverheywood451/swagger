/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.PasswordResetApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * A full ecommerce backend as a service.
 * Version: 0.1
 * Generated at: 2016-07-26T21:58:06.393Z
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.PasswordResetApi');

goog.require('API.Client.PasswordReset');
goog.require('API.Client.PasswordResetRequest');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.PasswordResetApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('PasswordResetApiBasePath') ?
                   /** @type {!string} */ ($injector.get('PasswordResetApiBasePath')) :
                   'https://api.ordercloud.io/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('PasswordResetApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('PasswordResetApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.PasswordResetApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * 
 * @param {!string} verificationCode Verification code of the forgotten password.
 * @param {!PasswordReset} passwordReset 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.PasswordResetApi.prototype.resetPassword = function(verificationCode, passwordReset, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/password/reset/{verificationCode}'
      .replace('{' + 'verificationCode' + '}', String(verificationCode));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'verificationCode' is set
  if (!verificationCode) {
    throw new Error('Missing required parameter verificationCode when calling resetPassword');
  }
  // verify required parameter 'passwordReset' is set
  if (!passwordReset) {
    throw new Error('Missing required parameter passwordReset when calling resetPassword');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: passwordReset,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!PasswordResetRequest} passwordResetRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.PasswordResetApi.prototype.sendVerificationCode = function(passwordResetRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/password/reset';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'passwordResetRequest' is set
  if (!passwordResetRequest) {
    throw new Error('Missing required parameter passwordResetRequest when calling sendVerificationCode');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: passwordResetRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
