/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Any
import io.swagger.client.model.LineItem
import io.swagger.client.model.Address
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object LineItemApi {

  /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param lineItem 
   */
  def create(buyerID: String, orderID: String, lineItem: LineItem): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/lineitems", "application/json")
      .withBody(lineItem)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 204 :  
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param lineItemID ID of the line item.
   */
  def delete(buyerID: String, orderID: String, lineItemID: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/lineitems/{lineItemID}", "application/json")
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withPathParam("lineItemID", lineItemID)
      .withSuccessResponse[Unit](204)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param lineItemID ID of the line item.
   */
  def get(buyerID: String, orderID: String, lineItemID: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/lineitems/{lineItemID}", "application/json")
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withPathParam("lineItemID", lineItemID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def list(buyerID: String, orderID: String, search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/lineitems", "application/json")
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param lineItemID ID of the line item.
   * @param partialLineItem 
   */
  def patch(buyerID: String, orderID: String, lineItemID: String, partialLineItem: LineItem): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PATCH, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/lineitems/{lineItemID}", "application/json")
      .withBody(partialLineItem)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withPathParam("lineItemID", lineItemID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Partially update the Shipping Address of the Line Item. Not allowed on unsubmitted Line Items where ShippingAddressID has been set. In that case, use the Addresses resource to update the Saved Address.)
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param lineItemID ID of the line item.
   * @param address 
   */
  def patchShippingAddress(buyerID: String, orderID: String, lineItemID: String, address: Address): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PATCH, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/lineitems/{lineItemID}/shipto", "application/json")
      .withBody(address)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withPathParam("lineItemID", lineItemID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Set the Shipping Address of the Line Item. Appropriate only when the Address is not to be saved/reused. To use a Saved Address (i.e. from the Addresses resource), PATCH the Line Item&#39;s ShippingAddressID property instead.)
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param lineItemID ID of the line item.
   * @param address 
   */
  def setShippingAddress(buyerID: String, orderID: String, lineItemID: String, address: Address): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/lineitems/{lineItemID}/shipto", "application/json")
      .withBody(address)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withPathParam("lineItemID", lineItemID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param lineItemID ID of the line item.
   * @param lineItem 
   */
  def update(buyerID: String, orderID: String, lineItemID: String, lineItem: LineItem): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/lineitems/{lineItemID}", "application/json")
      .withBody(lineItem)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withPathParam("lineItemID", lineItemID)
      .withSuccessResponse[Any](200)
      

}

