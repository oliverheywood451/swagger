/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Any
import io.swagger.client.model.Order
import io.swagger.client.model.Address
import io.swagger.client.model.Shipment
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object OrderApi {

  /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any (Add a Promotion to an Order.)
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param promoCode Promo code of the order.
   */
  def addPromotion(buyerID: String, orderID: String, promoCode: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}", "application/json")
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withPathParam("promoCode", promoCode)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param comments Comments to be saved with the order approval.
   */
  def approve(buyerID: String, orderID: String, comments: Option[String] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/approve", "application/json")
      .withQueryParam("comments", comments)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   */
  def cancel(buyerID: String, orderID: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/cancel", "application/json")
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param order 
   */
  def create(buyerID: String, order: Order): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders", "application/json")
      .withBody(order)
      .withPathParam("buyerID", buyerID)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param comments Comments to be saved with the order denial.
   */
  def decline(buyerID: String, orderID: String, comments: Option[String] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/decline", "application/json")
      .withQueryParam("comments", comments)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 204 :  
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   */
  def delete(buyerID: String, orderID: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}", "application/json")
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Unit](204)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   */
  def get(buyerID: String, orderID: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}", "application/json")
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Returns all Approvals associated with the Order.)
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def listApprovals(buyerID: String, orderID: String, search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/approvals", "application/json")
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Returns all Users who can approve or decline this order (but have not done so).)
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def listEligibleApprovers(buyerID: String, orderID: String, search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/eligibleapprovers", "application/json")
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param from Lower bound of date range that the order was submitted.
   * @param to Upper bound of date range that the order was submitted.
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def listIncoming(buyerID: Option[String] = None, from: Option[String] = None, to: Option[String] = None, search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/orders/incoming", "application/json")
      .withQueryParam("buyerID", buyerID)
      .withQueryParam("from", from)
      .withQueryParam("to", to)
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param from Lower bound of date range that the order was created.
   * @param to Upper bound of date range that the order was created.
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def listOutgoing(buyerID: Option[String] = None, from: Option[String] = None, to: Option[String] = None, search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/orders/outgoing", "application/json")
      .withQueryParam("buyerID", buyerID)
      .withQueryParam("from", from)
      .withQueryParam("to", to)
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def listPromotions(buyerID: String, orderID: String, search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/promotions", "application/json")
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param partialOrder 
   */
  def patch(buyerID: String, orderID: String, partialOrder: Order): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PATCH, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}", "application/json")
      .withBody(partialOrder)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Partially update the Billing Address of the Order. Not allowed on unsubmitted Orders where BillingAddressID has been set. In that case, use the Addresses resource to update the Saved Address.)
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param address 
   */
  def patchBillingAddress(buyerID: String, orderID: String, address: Address): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PATCH, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/billto", "application/json")
      .withBody(address)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Partially update the Shipping Address of all Line Items on the Order. Not allowed on unsubmitted orders where ShippingAddressID has been set on any Line Items. In that case, use the Addresses resource to update the Saved Address.)
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param address 
   */
  def patchShippingAddress(buyerID: String, orderID: String, address: Address): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PATCH, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/shipto", "application/json")
      .withBody(address)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Remove Promotion from Order.)
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param promoCode Promo code of the order.
   */
  def removePromotion(buyerID: String, orderID: String, promoCode: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.DELETE, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}", "application/json")
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withPathParam("promoCode", promoCode)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Set the Billing Address of the Order. Appropriate only when the address is not to be saved/reused. To use a saved Address (i.e. from the Addresses resource), PATCH the Order&#39;s BillingAddressID property instead.)
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param address 
   */
  def setBillingAddress(buyerID: String, orderID: String, address: Address): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/billto", "application/json")
      .withBody(address)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Set the Shipping Address of all Line Items on the Order. Appropriate only when the address is not to be saved/reused. To use a saved Address (i.e. from the Addresses resource), PATCH the Order&#39;s ShippingAddressID property instead.)
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param address 
   */
  def setShippingAddress(buyerID: String, orderID: String, address: Address): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/shipto", "application/json")
      .withBody(address)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any (Create a new Shipment containing all Line Items from this Order.)
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param shipment 
   */
  def ship(buyerID: String, orderID: String, shipment: Shipment): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/ship", "application/json")
      .withBody(shipment)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   */
  def submit(buyerID: String, orderID: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}/submit", "application/json")
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 204 :  
   * 
   * @param buyerID ID of the buyer.
   * @param tempUserToken Temp user token of the order.
   */
  def transferTempUserOrder(buyerID: String, tempUserToken: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders", "application/json")
      .withQueryParam("tempUserToken", tempUserToken)
      .withPathParam("buyerID", buyerID)
      .withSuccessResponse[Unit](204)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param buyerID ID of the buyer.
   * @param orderID ID of the order.
   * @param order 
   */
  def update(buyerID: String, orderID: String, order: Order): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/buyers/{buyerID}/orders/{orderID}", "application/json")
      .withBody(order)
      .withPathParam("buyerID", buyerID)
      .withPathParam("orderID", orderID)
      .withSuccessResponse[Any](200)
      

}

