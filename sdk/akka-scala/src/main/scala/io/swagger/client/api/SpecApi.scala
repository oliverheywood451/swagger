/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Any
import io.swagger.client.model.Spec
import io.swagger.client.model.SpecOption
import io.swagger.client.model.SpecProductAssignment
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object SpecApi {

  /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any 
   * 
   * @param spec 
   */
  def create(spec: Spec): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/specs", "application/json")
      .withBody(spec)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any (A Spec can have multiple Options-- for example, if the spec is called &#39;Color&#39;, the options might be &#39;Blue&#39;, &#39;Red&#39;, and &#39;Green&#39;. )
   * 
   * @param specID ID of the spec.
   * @param option 
   */
  def createOption(specID: String, option: SpecOption): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/specs/{specID}/options", "application/json")
      .withBody(option)
      .withPathParam("specID", specID)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 204 :  
   * 
   * @param specID ID of the spec.
   */
  def delete(specID: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://api.ordercloud.io/v1", "/specs/{specID}", "application/json")
      .withPathParam("specID", specID)
      .withSuccessResponse[Unit](204)
        /**
   * 
   * 
   * Expected answers:
   *   code 204 :  
   * 
   * @param specID ID of the spec.
   * @param optionID ID of the option.
   */
  def deleteOption(specID: String, optionID: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://api.ordercloud.io/v1", "/specs/{specID}/options/{optionID}", "application/json")
      .withPathParam("specID", specID)
      .withPathParam("optionID", optionID)
      .withSuccessResponse[Unit](204)
        /**
   * 
   * 
   * Expected answers:
   *   code 204 :  
   * 
   * @param specID ID of the spec.
   * @param productID ID of the product.
   */
  def deleteProductAssignment(specID: String, productID: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://api.ordercloud.io/v1", "/specs/{specID}/productassignments/{productID}", "application/json")
      .withPathParam("specID", specID)
      .withPathParam("productID", productID)
      .withSuccessResponse[Unit](204)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param specID ID of the spec.
   */
  def get(specID: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/specs/{specID}", "application/json")
      .withPathParam("specID", specID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param specID ID of the spec.
   * @param optionID ID of the option.
   */
  def getOption(specID: String, optionID: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/specs/{specID}/options/{optionID}", "application/json")
      .withPathParam("specID", specID)
      .withPathParam("optionID", optionID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def list(search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/specs", "application/json")
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param specID ID of the spec.
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def listOptions(specID: String, search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/specs/{specID}/options", "application/json")
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withPathParam("specID", specID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param specID ID of the spec.
   * @param productID ID of the product.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def listProductAssignments(specID: Option[String] = None, productID: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/specs/productassignments", "application/json")
      .withQueryParam("specID", specID)
      .withQueryParam("productID", productID)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param specID ID of the spec.
   * @param spec 
   */
  def patch(specID: String, spec: Spec): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PATCH, "https://api.ordercloud.io/v1", "/specs/{specID}", "application/json")
      .withBody(spec)
      .withPathParam("specID", specID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param specID ID of the spec.
   * @param optionID ID of the option.
   * @param option 
   */
  def patchOption(specID: String, optionID: String, option: SpecOption): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PATCH, "https://api.ordercloud.io/v1", "/specs/{specID}/options/{optionID}", "application/json")
      .withBody(option)
      .withPathParam("specID", specID)
      .withPathParam("optionID", optionID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 204 :  (While DefinesVariant is an optional parameter, if it is set to &#39;False&#39;, generating product variants will not generate variants with that spec. This is useful for things like custom logos, where you don&#39;t want a defined variant product for each logo, but you do want to capture a product customization.)
   * 
   * @param productAssignment 
   */
  def saveProductAssignment(productAssignment: SpecProductAssignment): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://api.ordercloud.io/v1", "/specs/productassignments", "application/json")
      .withBody(productAssignment)
      .withSuccessResponse[Unit](204)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param specID ID of the spec.
   * @param spec 
   */
  def update(specID: String, spec: Spec): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/specs/{specID}", "application/json")
      .withBody(spec)
      .withPathParam("specID", specID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param specID ID of the spec.
   * @param optionID ID of the option.
   * @param option 
   */
  def updateOption(specID: String, optionID: String, option: SpecOption): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/specs/{specID}/options/{optionID}", "application/json")
      .withBody(option)
      .withPathParam("specID", specID)
      .withPathParam("optionID", optionID)
      .withSuccessResponse[Any](200)
      

}

