/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Any
import io.swagger.client.model.Product
import io.swagger.client.model.Variant
import io.swagger.client.model.ProductAssignment
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object ProductApi {

  /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any 
   * 
   * @param product 
   */
  def create(product: Product): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/products", "application/json")
      .withBody(product)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 204 :  
   * 
   * @param productID ID of the product.
   */
  def delete(productID: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://api.ordercloud.io/v1", "/products/{productID}", "application/json")
      .withPathParam("productID", productID)
      .withSuccessResponse[Unit](204)
        /**
   * 
   * 
   * Expected answers:
   *   code 204 :  (As price schedules aren&#39;t assigned to a party without their accompanying product, you don&#39;t use Delete Assignment to delete a price schedule. If you need to remove a price schedule assignment, update the assignment to have the price schedule ID as a null. )
   * 
   * @param buyerID ID of the buyer.
   * @param productID ID of the product.
   * @param userID ID of the user.
   * @param userGroupID ID of the user group.
   */
  def deleteAssignment(buyerID: String, productID: String, userID: Option[String] = None, userGroupID: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://api.ordercloud.io/v1", "/products/{productID}/assignments/{buyerID}", "application/json")
      .withQueryParam("userID", userID)
      .withQueryParam("userGroupID", userGroupID)
      .withPathParam("buyerID", buyerID)
      .withPathParam("productID", productID)
      .withSuccessResponse[Unit](204)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 : Any 
   * 
   * @param productID ID of the product.
   * @param overwriteExisting Overwrite existing of the product.
   */
  def generateVariants(productID: String, overwriteExisting: Option[Boolean] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "https://api.ordercloud.io/v1", "/products/{productID}/variants/generate", "application/json")
      .withQueryParam("overwriteExisting", overwriteExisting)
      .withPathParam("productID", productID)
      .withSuccessResponse[Any](201)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param productID ID of the product.
   */
  def get(productID: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/products/{productID}", "application/json")
      .withPathParam("productID", productID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Getting the Inventory on an Inventory-enabled product returns two things: the Avalible inventory, and the Reserved inventory. When an Order includes a product on the a lineitem, the total amount of that product is reserved. When that Order is submitted, the products previously reserved for that order are removed from the total inventory and the reserved ammount.)
   * 
   * @param productID ID of the product.
   */
  def getInventory(productID: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/products/{productID}/inventory", "application/json")
      .withPathParam("productID", productID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param productID ID of the product.
   * @param variantID ID of the variant.
   */
  def getVariant(productID: String, variantID: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/products/{productID}/variants/{variantID}", "application/json")
      .withPathParam("productID", productID)
      .withPathParam("variantID", variantID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Getting the Variant Inventory will return the Name, Available Inventory and Reserved Inventory for a specific product variant based on the ProductID and VariantID specified. )
   * 
   * @param productID ID of the product.
   * @param variantID ID of the variant.
   */
  def getVariantInventory(productID: String, variantID: String): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/products/{productID}/variants/inventory/{variantID}", "application/json")
      .withPathParam("productID", productID)
      .withPathParam("variantID", variantID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def list(search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/products", "application/json")
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param productID ID of the product.
   * @param buyerID ID of the buyer.
   * @param userID ID of the user.
   * @param userGroupID ID of the user group.
   * @param level Level of the product.
   * @param priceScheduleID ID of the price schedule.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def listAssignments(productID: Option[String] = None, buyerID: Option[String] = None, userID: Option[String] = None, userGroupID: Option[String] = None, level: Option[String] = None, priceScheduleID: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/products/assignments", "application/json")
      .withQueryParam("productID", productID)
      .withQueryParam("buyerID", buyerID)
      .withQueryParam("userID", userID)
      .withQueryParam("userGroupID", userGroupID)
      .withQueryParam("level", level)
      .withQueryParam("priceScheduleID", priceScheduleID)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def listInventory(search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/products/inventory", "application/json")
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any (Listing the Variant Inventory will return a list of all variants under a specific product and each variant&#39;s available and reserved inventory.)
   * 
   * @param productID ID of the product.
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def listVariantInventory(productID: String, search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/products/{productID}/variants/inventory", "application/json")
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withPathParam("productID", productID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param productID ID of the product.
   * @param search Word or phrase to search for.
   * @param searchOn Comma-delimited list of fields to search on.
   * @param sortBy Comma-delimited list of fields to sort by.
   * @param page Page of results to return. Default: 1
   * @param pageSize Number of results to return per page. Default: 20, max: 100.
   */
  def listVariants(productID: String, search: Option[String] = None, searchOn: Option[String] = None, sortBy: Option[String] = None, page: Option[Int] = None, pageSize: Option[Int] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://api.ordercloud.io/v1", "/products/{productID}/variants", "application/json")
      .withQueryParam("search", search)
      .withQueryParam("searchOn", searchOn)
      .withQueryParam("sortBy", sortBy)
      .withQueryParam("page", page)
      .withQueryParam("pageSize", pageSize)
      .withPathParam("productID", productID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 204 :  
   * 
   * @param productID ID of the product.
   * @param product 
   */
  def patch(productID: String, product: Product): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PATCH, "https://api.ordercloud.io/v1", "/products/{productID}", "application/json")
      .withBody(product)
      .withPathParam("productID", productID)
      .withSuccessResponse[Unit](204)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param productID ID of the product.
   * @param variantID ID of the variant.
   * @param variant 
   */
  def patchVariant(productID: String, variantID: String, variant: Variant): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PATCH, "https://api.ordercloud.io/v1", "/products/{productID}/variants/{variantID}", "application/json")
      .withBody(variant)
      .withPathParam("productID", productID)
      .withPathParam("variantID", variantID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 204 :  
   * 
   * @param productAssignment 
   */
  def saveAssignment(productAssignment: ProductAssignment): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://api.ordercloud.io/v1", "/products/assignments", "application/json")
      .withBody(productAssignment)
      .withSuccessResponse[Unit](204)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param productID ID of the product.
   * @param product 
   */
  def update(productID: String, product: Product): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/products/{productID}", "application/json")
      .withBody(product)
      .withPathParam("productID", productID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param productID ID of the product.
   * @param inventory Inventory of the product.
   */
  def updateInventory(productID: String, inventory: Int): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/products/{productID}/inventory/{inventory}", "application/json")
      .withPathParam("productID", productID)
      .withPathParam("inventory", inventory)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param productID ID of the product.
   * @param variantID ID of the variant.
   * @param variant 
   */
  def updateVariant(productID: String, variantID: String, variant: Variant): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/products/{productID}/variants/{variantID}", "application/json")
      .withBody(variant)
      .withPathParam("productID", productID)
      .withPathParam("variantID", variantID)
      .withSuccessResponse[Any](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Any 
   * 
   * @param productID ID of the product.
   * @param variantID ID of the variant.
   * @param inventory Inventory of the product.
   */
  def updateVariantInventory(productID: String, variantID: String, inventory: Int): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.PUT, "https://api.ordercloud.io/v1", "/products/{productID}/variants/inventory/{variantID}/{inventory}", "application/json")
      .withPathParam("productID", productID)
      .withPathParam("variantID", variantID)
      .withPathParam("inventory", inventory)
      .withSuccessResponse[Any](200)
      

}

