/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "SWGSpecApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGSpecApi::SWGSpecApi() {}

SWGSpecApi::~SWGSpecApi() {}

SWGSpecApi::SWGSpecApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGSpecApi::create(SWGSpec spec) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = spec.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::createCallback);

    worker->execute(&input);
}

void
SWGSpecApi::createCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit createSignal(output);
    
}
void
SWGSpecApi::createOption(QString* specID, SWGSpecOption option) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/{specID}/options");

    QString specIDPathParam("{"); specIDPathParam.append("specID").append("}");
    fullPath.replace(specIDPathParam, stringValue(specID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = option.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::createOptionCallback);

    worker->execute(&input);
}

void
SWGSpecApi::createOptionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit createOptionSignal(output);
    
}
void
SWGSpecApi::delete(QString* specID) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/{specID}");

    QString specIDPathParam("{"); specIDPathParam.append("specID").append("}");
    fullPath.replace(specIDPathParam, stringValue(specID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::deleteCallback);

    worker->execute(&input);
}

void
SWGSpecApi::deleteCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteSignal();
}
void
SWGSpecApi::deleteOption(QString* specID, QString* optionID) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/{specID}/options/{optionID}");

    QString specIDPathParam("{"); specIDPathParam.append("specID").append("}");
    fullPath.replace(specIDPathParam, stringValue(specID));
    QString optionIDPathParam("{"); optionIDPathParam.append("optionID").append("}");
    fullPath.replace(optionIDPathParam, stringValue(optionID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::deleteOptionCallback);

    worker->execute(&input);
}

void
SWGSpecApi::deleteOptionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteOptionSignal();
}
void
SWGSpecApi::deleteProductAssignment(QString* specID, QString* productID) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/{specID}/productassignments/{productID}");

    QString specIDPathParam("{"); specIDPathParam.append("specID").append("}");
    fullPath.replace(specIDPathParam, stringValue(specID));
    QString productIDPathParam("{"); productIDPathParam.append("productID").append("}");
    fullPath.replace(productIDPathParam, stringValue(productID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::deleteProductAssignmentCallback);

    worker->execute(&input);
}

void
SWGSpecApi::deleteProductAssignmentCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteProductAssignmentSignal();
}
void
SWGSpecApi::get(QString* specID) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/{specID}");

    QString specIDPathParam("{"); specIDPathParam.append("specID").append("}");
    fullPath.replace(specIDPathParam, stringValue(specID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::getCallback);

    worker->execute(&input);
}

void
SWGSpecApi::getCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit getSignal(output);
    
}
void
SWGSpecApi::getOption(QString* specID, QString* optionID) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/{specID}/options/{optionID}");

    QString specIDPathParam("{"); specIDPathParam.append("specID").append("}");
    fullPath.replace(specIDPathParam, stringValue(specID));
    QString optionIDPathParam("{"); optionIDPathParam.append("optionID").append("}");
    fullPath.replace(optionIDPathParam, stringValue(optionID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::getOptionCallback);

    worker->execute(&input);
}

void
SWGSpecApi::getOptionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit getOptionSignal(output);
    
}
void
SWGSpecApi::list(QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("searchOn"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(searchOn)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sortBy"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sortBy)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pageSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pageSize)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::listCallback);

    worker->execute(&input);
}

void
SWGSpecApi::listCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit listSignal(output);
    
}
void
SWGSpecApi::listOptions(QString* specID, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/{specID}/options");

    QString specIDPathParam("{"); specIDPathParam.append("specID").append("}");
    fullPath.replace(specIDPathParam, stringValue(specID));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("searchOn"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(searchOn)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sortBy"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sortBy)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pageSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pageSize)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::listOptionsCallback);

    worker->execute(&input);
}

void
SWGSpecApi::listOptionsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit listOptionsSignal(output);
    
}
void
SWGSpecApi::listProductAssignments(QString* specID, QString* productID, qint32 page, qint32 pageSize) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/productassignments");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("specID"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(specID)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("productID"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(productID)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pageSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pageSize)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::listProductAssignmentsCallback);

    worker->execute(&input);
}

void
SWGSpecApi::listProductAssignmentsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit listProductAssignmentsSignal(output);
    
}
void
SWGSpecApi::patch(QString* specID, SWGSpec spec) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/{specID}");

    QString specIDPathParam("{"); specIDPathParam.append("specID").append("}");
    fullPath.replace(specIDPathParam, stringValue(specID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");

    
    QString output = spec.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::patchCallback);

    worker->execute(&input);
}

void
SWGSpecApi::patchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit patchSignal(output);
    
}
void
SWGSpecApi::patchOption(QString* specID, QString* optionID, SWGSpecOption option) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/{specID}/options/{optionID}");

    QString specIDPathParam("{"); specIDPathParam.append("specID").append("}");
    fullPath.replace(specIDPathParam, stringValue(specID));
    QString optionIDPathParam("{"); optionIDPathParam.append("optionID").append("}");
    fullPath.replace(optionIDPathParam, stringValue(optionID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");

    
    QString output = option.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::patchOptionCallback);

    worker->execute(&input);
}

void
SWGSpecApi::patchOptionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit patchOptionSignal(output);
    
}
void
SWGSpecApi::saveProductAssignment(SWGSpecProductAssignment productAssignment) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/productassignments");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = productAssignment.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::saveProductAssignmentCallback);

    worker->execute(&input);
}

void
SWGSpecApi::saveProductAssignmentCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit saveProductAssignmentSignal();
}
void
SWGSpecApi::update(QString* specID, SWGSpec spec) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/{specID}");

    QString specIDPathParam("{"); specIDPathParam.append("specID").append("}");
    fullPath.replace(specIDPathParam, stringValue(specID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = spec.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::updateCallback);

    worker->execute(&input);
}

void
SWGSpecApi::updateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit updateSignal(output);
    
}
void
SWGSpecApi::updateOption(QString* specID, QString* optionID, SWGSpecOption option) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/specs/{specID}/options/{optionID}");

    QString specIDPathParam("{"); specIDPathParam.append("specID").append("}");
    fullPath.replace(specIDPathParam, stringValue(specID));
    QString optionIDPathParam("{"); optionIDPathParam.append("optionID").append("}");
    fullPath.replace(optionIDPathParam, stringValue(optionID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = option.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpecApi::updateOptionCallback);

    worker->execute(&input);
}

void
SWGSpecApi::updateOptionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit updateOptionSignal(output);
    
}
} /* namespace Swagger */
