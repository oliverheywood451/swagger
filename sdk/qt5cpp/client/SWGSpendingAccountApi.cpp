/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "SWGSpendingAccountApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGSpendingAccountApi::SWGSpendingAccountApi() {}

SWGSpendingAccountApi::~SWGSpendingAccountApi() {}

SWGSpendingAccountApi::SWGSpendingAccountApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGSpendingAccountApi::create(QString* buyerID, SWGSpendingAccount spendingAccount) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/spendingaccounts");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = spendingAccount.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpendingAccountApi::createCallback);

    worker->execute(&input);
}

void
SWGSpendingAccountApi::createCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit createSignal(output);
    
}
void
SWGSpendingAccountApi::delete(QString* buyerID, QString* spendingAccountID) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/spendingaccounts/{spendingAccountID}");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString spendingAccountIDPathParam("{"); spendingAccountIDPathParam.append("spendingAccountID").append("}");
    fullPath.replace(spendingAccountIDPathParam, stringValue(spendingAccountID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpendingAccountApi::deleteCallback);

    worker->execute(&input);
}

void
SWGSpendingAccountApi::deleteCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteSignal();
}
void
SWGSpendingAccountApi::deleteAssignment(QString* buyerID, QString* spendingAccountID, QString* userID, QString* userGroupID) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/spendingaccounts/{spendingAccountID}/assignments");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString spendingAccountIDPathParam("{"); spendingAccountIDPathParam.append("spendingAccountID").append("}");
    fullPath.replace(spendingAccountIDPathParam, stringValue(spendingAccountID));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("userID"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(userID)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("userGroupID"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(userGroupID)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpendingAccountApi::deleteAssignmentCallback);

    worker->execute(&input);
}

void
SWGSpendingAccountApi::deleteAssignmentCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteAssignmentSignal();
}
void
SWGSpendingAccountApi::get(QString* buyerID, QString* spendingAccountID) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/spendingaccounts/{spendingAccountID}");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString spendingAccountIDPathParam("{"); spendingAccountIDPathParam.append("spendingAccountID").append("}");
    fullPath.replace(spendingAccountIDPathParam, stringValue(spendingAccountID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpendingAccountApi::getCallback);

    worker->execute(&input);
}

void
SWGSpendingAccountApi::getCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit getSignal(output);
    
}
void
SWGSpendingAccountApi::list(QString* buyerID, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/spendingaccounts");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("searchOn"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(searchOn)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sortBy"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sortBy)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pageSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pageSize)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpendingAccountApi::listCallback);

    worker->execute(&input);
}

void
SWGSpendingAccountApi::listCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit listSignal(output);
    
}
void
SWGSpendingAccountApi::listAssignments(QString* buyerID, QString* spendingAccountID, QString* userID, QString* userGroupID, QString* level, qint32 page, qint32 pageSize) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/spendingaccounts/assignments");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("spendingAccountID"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(spendingAccountID)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("userID"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(userID)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("userGroupID"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(userGroupID)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("level"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(level)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pageSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pageSize)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpendingAccountApi::listAssignmentsCallback);

    worker->execute(&input);
}

void
SWGSpendingAccountApi::listAssignmentsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit listAssignmentsSignal(output);
    
}
void
SWGSpendingAccountApi::patch(QString* buyerID, QString* spendingAccountID, SWGSpendingAccount spendingAccount) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/spendingaccounts/{spendingAccountID}");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString spendingAccountIDPathParam("{"); spendingAccountIDPathParam.append("spendingAccountID").append("}");
    fullPath.replace(spendingAccountIDPathParam, stringValue(spendingAccountID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");

    
    QString output = spendingAccount.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpendingAccountApi::patchCallback);

    worker->execute(&input);
}

void
SWGSpendingAccountApi::patchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit patchSignal(output);
    
}
void
SWGSpendingAccountApi::saveAssignment(QString* buyerID, SWGSpendingAccountAssignment assignment) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/spendingaccounts/assignments");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = assignment.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpendingAccountApi::saveAssignmentCallback);

    worker->execute(&input);
}

void
SWGSpendingAccountApi::saveAssignmentCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit saveAssignmentSignal();
}
void
SWGSpendingAccountApi::update(QString* buyerID, QString* spendingAccountID, SWGSpendingAccount spendingAccount) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/spendingaccounts/{spendingAccountID}");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString spendingAccountIDPathParam("{"); spendingAccountIDPathParam.append("spendingAccountID").append("}");
    fullPath.replace(spendingAccountIDPathParam, stringValue(spendingAccountID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = spendingAccount.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSpendingAccountApi::updateCallback);

    worker->execute(&input);
}

void
SWGSpendingAccountApi::updateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit updateSignal(output);
    
}
} /* namespace Swagger */
