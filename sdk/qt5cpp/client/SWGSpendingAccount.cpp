/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGSpendingAccount.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGSpendingAccount::SWGSpendingAccount(QString* json) {
    init();
    this->fromJson(*json);
}

SWGSpendingAccount::SWGSpendingAccount() {
    init();
}

SWGSpendingAccount::~SWGSpendingAccount() {
    this->cleanup();
}

void
SWGSpendingAccount::init() {
    ID = new QString("");
Name = new QString("");
Balance = 0.0;
AllowAsPaymentMethod = false;
RedemptionCode = new QString("");
StartDate = NULL;
EndDate = NULL;
xp = NULL;
}

void
SWGSpendingAccount::cleanup() {
    if(ID != NULL) {
        delete ID;
    }
if(Name != NULL) {
        delete Name;
    }
if(Balance != NULL) {
        delete Balance;
    }

if(RedemptionCode != NULL) {
        delete RedemptionCode;
    }
if(StartDate != NULL) {
        delete StartDate;
    }
if(EndDate != NULL) {
        delete EndDate;
    }
if(xp != NULL) {
        delete xp;
    }
}

SWGSpendingAccount*
SWGSpendingAccount::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSpendingAccount::fromJsonObject(QJsonObject &pJson) {
    setValue(&ID, pJson["ID"], "QString", "QString");
setValue(&Name, pJson["Name"], "QString", "QString");
setValue(&Balance, pJson["Balance"], "SWGNumber", "SWGNumber");
setValue(&AllowAsPaymentMethod, pJson["AllowAsPaymentMethod"], "bool", "");
setValue(&RedemptionCode, pJson["RedemptionCode"], "QString", "QString");
setValue(&StartDate, pJson["StartDate"], "QDate", "QDate");
setValue(&EndDate, pJson["EndDate"], "QDate", "QDate");
setValue(&xp, pJson["xp"], "SWGObject", "SWGObject");
}

QString
SWGSpendingAccount::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGSpendingAccount::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("ID"), ID, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Name"), Name, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Balance"), Balance, obj, QString("SWGNumber"));
    
        
obj->insert("AllowAsPaymentMethod", QJsonValue(AllowAsPaymentMethod));

    
    toJsonValue(QString("RedemptionCode"), RedemptionCode, obj, QString("QString"));
    
        

    
    toJsonValue(QString("StartDate"), StartDate, obj, QString("QDate"));
    
        

    
    toJsonValue(QString("EndDate"), EndDate, obj, QString("QDate"));
    
        

    
    toJsonValue(QString("xp"), xp, obj, QString("SWGObject"));
    
        

    return obj;
}

QString*
SWGSpendingAccount::getID() {
    return ID;
}
void
SWGSpendingAccount::setID(QString* ID) {
    this->ID = ID;
}

QString*
SWGSpendingAccount::getName() {
    return Name;
}
void
SWGSpendingAccount::setName(QString* Name) {
    this->Name = Name;
}

SWGNumber*
SWGSpendingAccount::getBalance() {
    return Balance;
}
void
SWGSpendingAccount::setBalance(SWGNumber* Balance) {
    this->Balance = Balance;
}

bool
SWGSpendingAccount::getAllowAsPaymentMethod() {
    return AllowAsPaymentMethod;
}
void
SWGSpendingAccount::setAllowAsPaymentMethod(bool AllowAsPaymentMethod) {
    this->AllowAsPaymentMethod = AllowAsPaymentMethod;
}

QString*
SWGSpendingAccount::getRedemptionCode() {
    return RedemptionCode;
}
void
SWGSpendingAccount::setRedemptionCode(QString* RedemptionCode) {
    this->RedemptionCode = RedemptionCode;
}

QDate*
SWGSpendingAccount::getStartDate() {
    return StartDate;
}
void
SWGSpendingAccount::setStartDate(QDate* StartDate) {
    this->StartDate = StartDate;
}

QDate*
SWGSpendingAccount::getEndDate() {
    return EndDate;
}
void
SWGSpendingAccount::setEndDate(QDate* EndDate) {
    this->EndDate = EndDate;
}

SWGObject*
SWGSpendingAccount::getXp() {
    return xp;
}
void
SWGSpendingAccount::setXp(SWGObject* xp) {
    this->xp = xp;
}



} /* namespace Swagger */

