/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _SWG_SWGProductApi_H_
#define _SWG_SWGProductApi_H_

#include "SWGHttpRequest.h"

#include "SWGProduct.h"
#include "SWGObject.h"
#include <QString>
#include "SWGVariant.h"
#include "SWGProductAssignment.h"

#include <QObject>

namespace Swagger {

class SWGProductApi: public QObject {
    Q_OBJECT

public:
    SWGProductApi();
    SWGProductApi(QString host, QString basePath);
    ~SWGProductApi();

    QString host;
    QString basePath;

    void create(SWGProduct product);
    void delete(QString* productID);
    void deleteAssignment(QString* buyerID, QString* productID, QString* userID, QString* userGroupID);
    void generateVariants(QString* productID, bool overwriteExisting);
    void get(QString* productID);
    void getInventory(QString* productID);
    void getVariant(QString* productID, QString* variantID);
    void getVariantInventory(QString* productID, QString* variantID);
    void list(QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listAssignments(QString* productID, QString* buyerID, QString* userID, QString* userGroupID, QString* level, QString* priceScheduleID, qint32 page, qint32 pageSize);
    void listInventory(QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listVariantInventory(QString* productID, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listVariants(QString* productID, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void patch(QString* productID, SWGProduct product);
    void patchVariant(QString* productID, QString* variantID, SWGVariant variant);
    void saveAssignment(SWGProductAssignment productAssignment);
    void update(QString* productID, SWGProduct product);
    void updateInventory(QString* productID, qint32 inventory);
    void updateVariant(QString* productID, QString* variantID, SWGVariant variant);
    void updateVariantInventory(QString* productID, QString* variantID, qint32 inventory);
    
private:
    void createCallback (HttpRequestWorker * worker);
    void deleteCallback (HttpRequestWorker * worker);
    void deleteAssignmentCallback (HttpRequestWorker * worker);
    void generateVariantsCallback (HttpRequestWorker * worker);
    void getCallback (HttpRequestWorker * worker);
    void getInventoryCallback (HttpRequestWorker * worker);
    void getVariantCallback (HttpRequestWorker * worker);
    void getVariantInventoryCallback (HttpRequestWorker * worker);
    void listCallback (HttpRequestWorker * worker);
    void listAssignmentsCallback (HttpRequestWorker * worker);
    void listInventoryCallback (HttpRequestWorker * worker);
    void listVariantInventoryCallback (HttpRequestWorker * worker);
    void listVariantsCallback (HttpRequestWorker * worker);
    void patchCallback (HttpRequestWorker * worker);
    void patchVariantCallback (HttpRequestWorker * worker);
    void saveAssignmentCallback (HttpRequestWorker * worker);
    void updateCallback (HttpRequestWorker * worker);
    void updateInventoryCallback (HttpRequestWorker * worker);
    void updateVariantCallback (HttpRequestWorker * worker);
    void updateVariantInventoryCallback (HttpRequestWorker * worker);
    
signals:
    void createSignal(SWGObject* summary);
    void deleteSignal();
    void deleteAssignmentSignal();
    void generateVariantsSignal(SWGObject* summary);
    void getSignal(SWGObject* summary);
    void getInventorySignal(SWGObject* summary);
    void getVariantSignal(SWGObject* summary);
    void getVariantInventorySignal(SWGObject* summary);
    void listSignal(SWGObject* summary);
    void listAssignmentsSignal(SWGObject* summary);
    void listInventorySignal(SWGObject* summary);
    void listVariantInventorySignal(SWGObject* summary);
    void listVariantsSignal(SWGObject* summary);
    void patchSignal();
    void patchVariantSignal(SWGObject* summary);
    void saveAssignmentSignal();
    void updateSignal(SWGObject* summary);
    void updateInventorySignal(SWGObject* summary);
    void updateVariantSignal(SWGObject* summary);
    void updateVariantInventorySignal(SWGObject* summary);
    
};
}
#endif
