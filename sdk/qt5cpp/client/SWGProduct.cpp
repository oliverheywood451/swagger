/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGProduct.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGProduct::SWGProduct(QString* json) {
    init();
    this->fromJson(*json);
}

SWGProduct::SWGProduct() {
    init();
}

SWGProduct::~SWGProduct() {
    this->cleanup();
}

void
SWGProduct::init() {
    ID = new QString("");
Name = new QString("");
Description = new QString("");
QuantityMultiplier = NULL;
ShipWeight = 0.0;
Active = false;
Type = new QString("");
InventoryEnabled = false;
InventoryNotificationPoint = NULL;
VariantLevelInventory = false;
xp = NULL;
AllowOrderExceedInventory = false;
InventoryVisible = false;
}

void
SWGProduct::cleanup() {
    if(ID != NULL) {
        delete ID;
    }
if(Name != NULL) {
        delete Name;
    }
if(Description != NULL) {
        delete Description;
    }

if(ShipWeight != NULL) {
        delete ShipWeight;
    }

if(Type != NULL) {
        delete Type;
    }



if(xp != NULL) {
        delete xp;
    }


}

SWGProduct*
SWGProduct::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGProduct::fromJsonObject(QJsonObject &pJson) {
    setValue(&ID, pJson["ID"], "QString", "QString");
setValue(&Name, pJson["Name"], "QString", "QString");
setValue(&Description, pJson["Description"], "QString", "QString");
setValue(&QuantityMultiplier, pJson["QuantityMultiplier"], "qint32", "");
setValue(&ShipWeight, pJson["ShipWeight"], "SWGNumber", "SWGNumber");
setValue(&Active, pJson["Active"], "bool", "");
setValue(&Type, pJson["Type"], "QString", "QString");
setValue(&InventoryEnabled, pJson["InventoryEnabled"], "bool", "");
setValue(&InventoryNotificationPoint, pJson["InventoryNotificationPoint"], "qint32", "");
setValue(&VariantLevelInventory, pJson["VariantLevelInventory"], "bool", "");
setValue(&xp, pJson["xp"], "SWGObject", "SWGObject");
setValue(&AllowOrderExceedInventory, pJson["AllowOrderExceedInventory"], "bool", "");
setValue(&InventoryVisible, pJson["InventoryVisible"], "bool", "");
}

QString
SWGProduct::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGProduct::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("ID"), ID, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Name"), Name, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Description"), Description, obj, QString("QString"));
    
        
obj->insert("QuantityMultiplier", QJsonValue(QuantityMultiplier));

    
    toJsonValue(QString("ShipWeight"), ShipWeight, obj, QString("SWGNumber"));
    
        
obj->insert("Active", QJsonValue(Active));

    
    toJsonValue(QString("Type"), Type, obj, QString("QString"));
    
        
obj->insert("InventoryEnabled", QJsonValue(InventoryEnabled));
obj->insert("InventoryNotificationPoint", QJsonValue(InventoryNotificationPoint));
obj->insert("VariantLevelInventory", QJsonValue(VariantLevelInventory));

    
    toJsonValue(QString("xp"), xp, obj, QString("SWGObject"));
    
        
obj->insert("AllowOrderExceedInventory", QJsonValue(AllowOrderExceedInventory));
obj->insert("InventoryVisible", QJsonValue(InventoryVisible));

    return obj;
}

QString*
SWGProduct::getID() {
    return ID;
}
void
SWGProduct::setID(QString* ID) {
    this->ID = ID;
}

QString*
SWGProduct::getName() {
    return Name;
}
void
SWGProduct::setName(QString* Name) {
    this->Name = Name;
}

QString*
SWGProduct::getDescription() {
    return Description;
}
void
SWGProduct::setDescription(QString* Description) {
    this->Description = Description;
}

qint32
SWGProduct::getQuantityMultiplier() {
    return QuantityMultiplier;
}
void
SWGProduct::setQuantityMultiplier(qint32 QuantityMultiplier) {
    this->QuantityMultiplier = QuantityMultiplier;
}

SWGNumber*
SWGProduct::getShipWeight() {
    return ShipWeight;
}
void
SWGProduct::setShipWeight(SWGNumber* ShipWeight) {
    this->ShipWeight = ShipWeight;
}

bool
SWGProduct::getActive() {
    return Active;
}
void
SWGProduct::setActive(bool Active) {
    this->Active = Active;
}

QString*
SWGProduct::getType() {
    return Type;
}
void
SWGProduct::setType(QString* Type) {
    this->Type = Type;
}

bool
SWGProduct::getInventoryEnabled() {
    return InventoryEnabled;
}
void
SWGProduct::setInventoryEnabled(bool InventoryEnabled) {
    this->InventoryEnabled = InventoryEnabled;
}

qint32
SWGProduct::getInventoryNotificationPoint() {
    return InventoryNotificationPoint;
}
void
SWGProduct::setInventoryNotificationPoint(qint32 InventoryNotificationPoint) {
    this->InventoryNotificationPoint = InventoryNotificationPoint;
}

bool
SWGProduct::getVariantLevelInventory() {
    return VariantLevelInventory;
}
void
SWGProduct::setVariantLevelInventory(bool VariantLevelInventory) {
    this->VariantLevelInventory = VariantLevelInventory;
}

SWGObject*
SWGProduct::getXp() {
    return xp;
}
void
SWGProduct::setXp(SWGObject* xp) {
    this->xp = xp;
}

bool
SWGProduct::getAllowOrderExceedInventory() {
    return AllowOrderExceedInventory;
}
void
SWGProduct::setAllowOrderExceedInventory(bool AllowOrderExceedInventory) {
    this->AllowOrderExceedInventory = AllowOrderExceedInventory;
}

bool
SWGProduct::getInventoryVisible() {
    return InventoryVisible;
}
void
SWGProduct::setInventoryVisible(bool InventoryVisible) {
    this->InventoryVisible = InventoryVisible;
}



} /* namespace Swagger */

