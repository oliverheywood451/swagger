/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGVariant.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGVariant::SWGVariant(QString* json) {
    init();
    this->fromJson(*json);
}

SWGVariant::SWGVariant() {
    init();
}

SWGVariant::~SWGVariant() {
    this->cleanup();
}

void
SWGVariant::init() {
    ID = new QString("");
Name = new QString("");
Description = new QString("");
Active = false;
xp = NULL;
}

void
SWGVariant::cleanup() {
    if(ID != NULL) {
        delete ID;
    }
if(Name != NULL) {
        delete Name;
    }
if(Description != NULL) {
        delete Description;
    }

if(xp != NULL) {
        delete xp;
    }
}

SWGVariant*
SWGVariant::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGVariant::fromJsonObject(QJsonObject &pJson) {
    setValue(&ID, pJson["ID"], "QString", "QString");
setValue(&Name, pJson["Name"], "QString", "QString");
setValue(&Description, pJson["Description"], "QString", "QString");
setValue(&Active, pJson["Active"], "bool", "");
setValue(&xp, pJson["xp"], "SWGObject", "SWGObject");
}

QString
SWGVariant::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGVariant::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("ID"), ID, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Name"), Name, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Description"), Description, obj, QString("QString"));
    
        
obj->insert("Active", QJsonValue(Active));

    
    toJsonValue(QString("xp"), xp, obj, QString("SWGObject"));
    
        

    return obj;
}

QString*
SWGVariant::getID() {
    return ID;
}
void
SWGVariant::setID(QString* ID) {
    this->ID = ID;
}

QString*
SWGVariant::getName() {
    return Name;
}
void
SWGVariant::setName(QString* Name) {
    this->Name = Name;
}

QString*
SWGVariant::getDescription() {
    return Description;
}
void
SWGVariant::setDescription(QString* Description) {
    this->Description = Description;
}

bool
SWGVariant::getActive() {
    return Active;
}
void
SWGVariant::setActive(bool Active) {
    this->Active = Active;
}

SWGObject*
SWGVariant::getXp() {
    return xp;
}
void
SWGVariant::setXp(SWGObject* xp) {
    this->xp = xp;
}



} /* namespace Swagger */

