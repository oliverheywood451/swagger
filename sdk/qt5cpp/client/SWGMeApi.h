/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _SWG_SWGMeApi_H_
#define _SWG_SWGMeApi_H_

#include "SWGHttpRequest.h"

#include "SWGBuyerAddress.h"
#include "SWGObject.h"
#include "SWGBuyerCreditCard.h"
#include <QString>
#include "SWGUser.h"

#include <QObject>

namespace Swagger {

class SWGMeApi: public QObject {
    Q_OBJECT

public:
    SWGMeApi();
    SWGMeApi(QString host, QString basePath);
    ~SWGMeApi();

    QString host;
    QString basePath;

    void createAddress(SWGBuyerAddress address);
    void createCreditCard(SWGBuyerCreditCard creditCard);
    void deleteAddress(QString* addressID);
    void deleteCreditCard(QString* creditcardID);
    void get();
    void getAddress(QString* addressID);
    void getCreditCard(QString* creditcardID);
    void getOrder(QString* orderID);
    void getProduct(QString* productID);
    void getPromotion(QString* promotionID);
    void getSpec(QString* productID, QString* specID);
    void listAddresses(QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listCategories(QString* depth, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listCostCenters(QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listCreditCards(QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listIncomingOrders(QString* from, QString* to, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listOutgoingOrders(QString* from, QString* to, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listProducts(QString* categoryID, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listPromotions(QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listSpecs(QString* productID, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listSubcategories(QString* parentID, QString* depth, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listUserGroups(QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void patch(SWGUser user);
    void patchAddress(QString* addressID, SWGBuyerAddress address);
    void patchCreditCard(QString* creditcardID, SWGBuyerCreditCard creditCard);
    void update(SWGUser user);
    void updateAddress(QString* addressID, SWGBuyerAddress address);
    void updateCreditCard(QString* creditcardID, SWGBuyerCreditCard creditCard);
    
private:
    void createAddressCallback (HttpRequestWorker * worker);
    void createCreditCardCallback (HttpRequestWorker * worker);
    void deleteAddressCallback (HttpRequestWorker * worker);
    void deleteCreditCardCallback (HttpRequestWorker * worker);
    void getCallback (HttpRequestWorker * worker);
    void getAddressCallback (HttpRequestWorker * worker);
    void getCreditCardCallback (HttpRequestWorker * worker);
    void getOrderCallback (HttpRequestWorker * worker);
    void getProductCallback (HttpRequestWorker * worker);
    void getPromotionCallback (HttpRequestWorker * worker);
    void getSpecCallback (HttpRequestWorker * worker);
    void listAddressesCallback (HttpRequestWorker * worker);
    void listCategoriesCallback (HttpRequestWorker * worker);
    void listCostCentersCallback (HttpRequestWorker * worker);
    void listCreditCardsCallback (HttpRequestWorker * worker);
    void listIncomingOrdersCallback (HttpRequestWorker * worker);
    void listOutgoingOrdersCallback (HttpRequestWorker * worker);
    void listProductsCallback (HttpRequestWorker * worker);
    void listPromotionsCallback (HttpRequestWorker * worker);
    void listSpecsCallback (HttpRequestWorker * worker);
    void listSubcategoriesCallback (HttpRequestWorker * worker);
    void listUserGroupsCallback (HttpRequestWorker * worker);
    void patchCallback (HttpRequestWorker * worker);
    void patchAddressCallback (HttpRequestWorker * worker);
    void patchCreditCardCallback (HttpRequestWorker * worker);
    void updateCallback (HttpRequestWorker * worker);
    void updateAddressCallback (HttpRequestWorker * worker);
    void updateCreditCardCallback (HttpRequestWorker * worker);
    
signals:
    void createAddressSignal(SWGObject* summary);
    void createCreditCardSignal(SWGObject* summary);
    void deleteAddressSignal();
    void deleteCreditCardSignal();
    void getSignal(SWGObject* summary);
    void getAddressSignal(SWGObject* summary);
    void getCreditCardSignal(SWGObject* summary);
    void getOrderSignal(SWGObject* summary);
    void getProductSignal(SWGObject* summary);
    void getPromotionSignal(SWGObject* summary);
    void getSpecSignal(SWGObject* summary);
    void listAddressesSignal(SWGObject* summary);
    void listCategoriesSignal(SWGObject* summary);
    void listCostCentersSignal(SWGObject* summary);
    void listCreditCardsSignal(SWGObject* summary);
    void listIncomingOrdersSignal(SWGObject* summary);
    void listOutgoingOrdersSignal(SWGObject* summary);
    void listProductsSignal(SWGObject* summary);
    void listPromotionsSignal(SWGObject* summary);
    void listSpecsSignal(SWGObject* summary);
    void listSubcategoriesSignal(SWGObject* summary);
    void listUserGroupsSignal(SWGObject* summary);
    void patchSignal(SWGObject* summary);
    void patchAddressSignal();
    void patchCreditCardSignal();
    void updateSignal(SWGObject* summary);
    void updateAddressSignal(SWGObject* summary);
    void updateCreditCardSignal(SWGObject* summary);
    
};
}
#endif
