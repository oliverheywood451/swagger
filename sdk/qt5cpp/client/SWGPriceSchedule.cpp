/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGPriceSchedule.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGPriceSchedule::SWGPriceSchedule(QString* json) {
    init();
    this->fromJson(*json);
}

SWGPriceSchedule::SWGPriceSchedule() {
    init();
}

SWGPriceSchedule::~SWGPriceSchedule() {
    this->cleanup();
}

void
SWGPriceSchedule::init() {
    ID = new QString("");
Name = new QString("");
ApplyTax = false;
ApplyShipping = false;
MaxQuantity = NULL;
UseCumulativeQuantity = false;
RestrictedQuantity = false;
OrderType = new QString("");
PriceBreaks = new QList<SWGShipmentItem*>();
xp = NULL;
}

void
SWGPriceSchedule::cleanup() {
    if(ID != NULL) {
        delete ID;
    }
if(Name != NULL) {
        delete Name;
    }





if(OrderType != NULL) {
        delete OrderType;
    }
if(PriceBreaks != NULL) {
        QList<SWGShipmentItem*>* arr = PriceBreaks;
        foreach(SWGShipmentItem* o, *arr) {
            delete o;
        }
        delete PriceBreaks;
    }
if(xp != NULL) {
        delete xp;
    }
}

SWGPriceSchedule*
SWGPriceSchedule::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGPriceSchedule::fromJsonObject(QJsonObject &pJson) {
    setValue(&ID, pJson["ID"], "QString", "QString");
setValue(&Name, pJson["Name"], "QString", "QString");
setValue(&ApplyTax, pJson["ApplyTax"], "bool", "");
setValue(&ApplyShipping, pJson["ApplyShipping"], "bool", "");
setValue(&MaxQuantity, pJson["MaxQuantity"], "qint32", "");
setValue(&UseCumulativeQuantity, pJson["UseCumulativeQuantity"], "bool", "");
setValue(&RestrictedQuantity, pJson["RestrictedQuantity"], "bool", "");
setValue(&OrderType, pJson["OrderType"], "QString", "QString");
setValue(&PriceBreaks, pJson["PriceBreaks"], "QList", "SWGShipmentItem");
setValue(&xp, pJson["xp"], "SWGObject", "SWGObject");
}

QString
SWGPriceSchedule::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGPriceSchedule::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("ID"), ID, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Name"), Name, obj, QString("QString"));
    
        
obj->insert("ApplyTax", QJsonValue(ApplyTax));
obj->insert("ApplyShipping", QJsonValue(ApplyShipping));
obj->insert("MaxQuantity", QJsonValue(MaxQuantity));
obj->insert("UseCumulativeQuantity", QJsonValue(UseCumulativeQuantity));
obj->insert("RestrictedQuantity", QJsonValue(RestrictedQuantity));

    
    toJsonValue(QString("OrderType"), OrderType, obj, QString("QString"));
    
        

    
    QList<SWGShipmentItem*>* PriceBreaksList = PriceBreaks;
    QJsonArray PriceBreaksJsonArray;
    toJsonArray((QList<void*>*)PriceBreaks, &PriceBreaksJsonArray, "PriceBreaks", "SWGShipmentItem");

    obj->insert("PriceBreaks", PriceBreaksJsonArray);
    

    
    toJsonValue(QString("xp"), xp, obj, QString("SWGObject"));
    
        

    return obj;
}

QString*
SWGPriceSchedule::getID() {
    return ID;
}
void
SWGPriceSchedule::setID(QString* ID) {
    this->ID = ID;
}

QString*
SWGPriceSchedule::getName() {
    return Name;
}
void
SWGPriceSchedule::setName(QString* Name) {
    this->Name = Name;
}

bool
SWGPriceSchedule::getApplyTax() {
    return ApplyTax;
}
void
SWGPriceSchedule::setApplyTax(bool ApplyTax) {
    this->ApplyTax = ApplyTax;
}

bool
SWGPriceSchedule::getApplyShipping() {
    return ApplyShipping;
}
void
SWGPriceSchedule::setApplyShipping(bool ApplyShipping) {
    this->ApplyShipping = ApplyShipping;
}

qint32
SWGPriceSchedule::getMaxQuantity() {
    return MaxQuantity;
}
void
SWGPriceSchedule::setMaxQuantity(qint32 MaxQuantity) {
    this->MaxQuantity = MaxQuantity;
}

bool
SWGPriceSchedule::getUseCumulativeQuantity() {
    return UseCumulativeQuantity;
}
void
SWGPriceSchedule::setUseCumulativeQuantity(bool UseCumulativeQuantity) {
    this->UseCumulativeQuantity = UseCumulativeQuantity;
}

bool
SWGPriceSchedule::getRestrictedQuantity() {
    return RestrictedQuantity;
}
void
SWGPriceSchedule::setRestrictedQuantity(bool RestrictedQuantity) {
    this->RestrictedQuantity = RestrictedQuantity;
}

QString*
SWGPriceSchedule::getOrderType() {
    return OrderType;
}
void
SWGPriceSchedule::setOrderType(QString* OrderType) {
    this->OrderType = OrderType;
}

QList<SWGShipmentItem*>*
SWGPriceSchedule::getPriceBreaks() {
    return PriceBreaks;
}
void
SWGPriceSchedule::setPriceBreaks(QList<SWGShipmentItem*>* PriceBreaks) {
    this->PriceBreaks = PriceBreaks;
}

SWGObject*
SWGPriceSchedule::getXp() {
    return xp;
}
void
SWGPriceSchedule::setXp(SWGObject* xp) {
    this->xp = xp;
}



} /* namespace Swagger */

