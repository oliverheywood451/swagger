/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "SWGPasswordResetApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGPasswordResetApi::SWGPasswordResetApi() {}

SWGPasswordResetApi::~SWGPasswordResetApi() {}

SWGPasswordResetApi::SWGPasswordResetApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGPasswordResetApi::resetPassword(QString* verificationCode, SWGPasswordReset passwordReset) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/password/reset/{verificationCode}");

    QString verificationCodePathParam("{"); verificationCodePathParam.append("verificationCode").append("}");
    fullPath.replace(verificationCodePathParam, stringValue(verificationCode));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = passwordReset.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPasswordResetApi::resetPasswordCallback);

    worker->execute(&input);
}

void
SWGPasswordResetApi::resetPasswordCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit resetPasswordSignal();
}
void
SWGPasswordResetApi::sendVerificationCode(SWGPasswordResetRequest passwordResetRequest) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/password/reset");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = passwordResetRequest.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPasswordResetApi::sendVerificationCodeCallback);

    worker->execute(&input);
}

void
SWGPasswordResetApi::sendVerificationCodeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit sendVerificationCodeSignal();
}
} /* namespace Swagger */
