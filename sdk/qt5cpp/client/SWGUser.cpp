/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGUser.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGUser::SWGUser(QString* json) {
    init();
    this->fromJson(*json);
}

SWGUser::SWGUser() {
    init();
}

SWGUser::~SWGUser() {
    this->cleanup();
}

void
SWGUser::init() {
    ID = new QString("");
Username = new QString("");
Password = new QString("");
FirstName = new QString("");
LastName = new QString("");
Email = new QString("");
Phone = new QString("");
TermsAccepted = NULL;
Active = false;
xp = NULL;
SecurityProfileID = new QString("");
}

void
SWGUser::cleanup() {
    if(ID != NULL) {
        delete ID;
    }
if(Username != NULL) {
        delete Username;
    }
if(Password != NULL) {
        delete Password;
    }
if(FirstName != NULL) {
        delete FirstName;
    }
if(LastName != NULL) {
        delete LastName;
    }
if(Email != NULL) {
        delete Email;
    }
if(Phone != NULL) {
        delete Phone;
    }
if(TermsAccepted != NULL) {
        delete TermsAccepted;
    }

if(xp != NULL) {
        delete xp;
    }
if(SecurityProfileID != NULL) {
        delete SecurityProfileID;
    }
}

SWGUser*
SWGUser::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGUser::fromJsonObject(QJsonObject &pJson) {
    setValue(&ID, pJson["ID"], "QString", "QString");
setValue(&Username, pJson["Username"], "QString", "QString");
setValue(&Password, pJson["Password"], "QString", "QString");
setValue(&FirstName, pJson["FirstName"], "QString", "QString");
setValue(&LastName, pJson["LastName"], "QString", "QString");
setValue(&Email, pJson["Email"], "QString", "QString");
setValue(&Phone, pJson["Phone"], "QString", "QString");
setValue(&TermsAccepted, pJson["TermsAccepted"], "QDate", "QDate");
setValue(&Active, pJson["Active"], "bool", "");
setValue(&xp, pJson["xp"], "SWGObject", "SWGObject");
setValue(&SecurityProfileID, pJson["SecurityProfileID"], "QString", "QString");
}

QString
SWGUser::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGUser::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("ID"), ID, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Username"), Username, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Password"), Password, obj, QString("QString"));
    
        

    
    toJsonValue(QString("FirstName"), FirstName, obj, QString("QString"));
    
        

    
    toJsonValue(QString("LastName"), LastName, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Email"), Email, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Phone"), Phone, obj, QString("QString"));
    
        

    
    toJsonValue(QString("TermsAccepted"), TermsAccepted, obj, QString("QDate"));
    
        
obj->insert("Active", QJsonValue(Active));

    
    toJsonValue(QString("xp"), xp, obj, QString("SWGObject"));
    
        

    
    toJsonValue(QString("SecurityProfileID"), SecurityProfileID, obj, QString("QString"));
    
        

    return obj;
}

QString*
SWGUser::getID() {
    return ID;
}
void
SWGUser::setID(QString* ID) {
    this->ID = ID;
}

QString*
SWGUser::getUsername() {
    return Username;
}
void
SWGUser::setUsername(QString* Username) {
    this->Username = Username;
}

QString*
SWGUser::getPassword() {
    return Password;
}
void
SWGUser::setPassword(QString* Password) {
    this->Password = Password;
}

QString*
SWGUser::getFirstName() {
    return FirstName;
}
void
SWGUser::setFirstName(QString* FirstName) {
    this->FirstName = FirstName;
}

QString*
SWGUser::getLastName() {
    return LastName;
}
void
SWGUser::setLastName(QString* LastName) {
    this->LastName = LastName;
}

QString*
SWGUser::getEmail() {
    return Email;
}
void
SWGUser::setEmail(QString* Email) {
    this->Email = Email;
}

QString*
SWGUser::getPhone() {
    return Phone;
}
void
SWGUser::setPhone(QString* Phone) {
    this->Phone = Phone;
}

QDate*
SWGUser::getTermsAccepted() {
    return TermsAccepted;
}
void
SWGUser::setTermsAccepted(QDate* TermsAccepted) {
    this->TermsAccepted = TermsAccepted;
}

bool
SWGUser::getActive() {
    return Active;
}
void
SWGUser::setActive(bool Active) {
    this->Active = Active;
}

SWGObject*
SWGUser::getXp() {
    return xp;
}
void
SWGUser::setXp(SWGObject* xp) {
    this->xp = xp;
}

QString*
SWGUser::getSecurityProfileID() {
    return SecurityProfileID;
}
void
SWGUser::setSecurityProfileID(QString* SecurityProfileID) {
    this->SecurityProfileID = SecurityProfileID;
}



} /* namespace Swagger */

