/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _SWG_SWGOrderApi_H_
#define _SWG_SWGOrderApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGObject.h"
#include "SWGOrder.h"
#include "SWGAddress.h"
#include "SWGShipment.h"

#include <QObject>

namespace Swagger {

class SWGOrderApi: public QObject {
    Q_OBJECT

public:
    SWGOrderApi();
    SWGOrderApi(QString host, QString basePath);
    ~SWGOrderApi();

    QString host;
    QString basePath;

    void addPromotion(QString* buyerID, QString* orderID, QString* promoCode);
    void approve(QString* buyerID, QString* orderID, QString* comments);
    void cancel(QString* buyerID, QString* orderID);
    void create(QString* buyerID, SWGOrder order);
    void decline(QString* buyerID, QString* orderID, QString* comments);
    void delete(QString* buyerID, QString* orderID);
    void get(QString* buyerID, QString* orderID);
    void listApprovals(QString* buyerID, QString* orderID, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listEligibleApprovers(QString* buyerID, QString* orderID, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listIncoming(QString* buyerID, QString* from, QString* to, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listOutgoing(QString* buyerID, QString* from, QString* to, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void listPromotions(QString* buyerID, QString* orderID, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize);
    void patch(QString* buyerID, QString* orderID, SWGOrder partialOrder);
    void patchBillingAddress(QString* buyerID, QString* orderID, SWGAddress address);
    void patchShippingAddress(QString* buyerID, QString* orderID, SWGAddress address);
    void removePromotion(QString* buyerID, QString* orderID, QString* promoCode);
    void setBillingAddress(QString* buyerID, QString* orderID, SWGAddress address);
    void setShippingAddress(QString* buyerID, QString* orderID, SWGAddress address);
    void ship(QString* buyerID, QString* orderID, SWGShipment shipment);
    void submit(QString* buyerID, QString* orderID);
    void transferTempUserOrder(QString* buyerID, QString* tempUserToken);
    void update(QString* buyerID, QString* orderID, SWGOrder order);
    
private:
    void addPromotionCallback (HttpRequestWorker * worker);
    void approveCallback (HttpRequestWorker * worker);
    void cancelCallback (HttpRequestWorker * worker);
    void createCallback (HttpRequestWorker * worker);
    void declineCallback (HttpRequestWorker * worker);
    void deleteCallback (HttpRequestWorker * worker);
    void getCallback (HttpRequestWorker * worker);
    void listApprovalsCallback (HttpRequestWorker * worker);
    void listEligibleApproversCallback (HttpRequestWorker * worker);
    void listIncomingCallback (HttpRequestWorker * worker);
    void listOutgoingCallback (HttpRequestWorker * worker);
    void listPromotionsCallback (HttpRequestWorker * worker);
    void patchCallback (HttpRequestWorker * worker);
    void patchBillingAddressCallback (HttpRequestWorker * worker);
    void patchShippingAddressCallback (HttpRequestWorker * worker);
    void removePromotionCallback (HttpRequestWorker * worker);
    void setBillingAddressCallback (HttpRequestWorker * worker);
    void setShippingAddressCallback (HttpRequestWorker * worker);
    void shipCallback (HttpRequestWorker * worker);
    void submitCallback (HttpRequestWorker * worker);
    void transferTempUserOrderCallback (HttpRequestWorker * worker);
    void updateCallback (HttpRequestWorker * worker);
    
signals:
    void addPromotionSignal(SWGObject* summary);
    void approveSignal(SWGObject* summary);
    void cancelSignal(SWGObject* summary);
    void createSignal(SWGObject* summary);
    void declineSignal(SWGObject* summary);
    void deleteSignal();
    void getSignal(SWGObject* summary);
    void listApprovalsSignal(SWGObject* summary);
    void listEligibleApproversSignal(SWGObject* summary);
    void listIncomingSignal(SWGObject* summary);
    void listOutgoingSignal(SWGObject* summary);
    void listPromotionsSignal(SWGObject* summary);
    void patchSignal(SWGObject* summary);
    void patchBillingAddressSignal(SWGObject* summary);
    void patchShippingAddressSignal(SWGObject* summary);
    void removePromotionSignal(SWGObject* summary);
    void setBillingAddressSignal(SWGObject* summary);
    void setShippingAddressSignal(SWGObject* summary);
    void shipSignal(SWGObject* summary);
    void submitSignal(SWGObject* summary);
    void transferTempUserOrderSignal();
    void updateSignal(SWGObject* summary);
    
};
}
#endif
