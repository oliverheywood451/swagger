/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "SWGPaymentApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGPaymentApi::SWGPaymentApi() {}

SWGPaymentApi::~SWGPaymentApi() {}

SWGPaymentApi::SWGPaymentApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGPaymentApi::create(QString* buyerID, QString* orderID, SWGPayment payment) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/orders/{orderID}/payments");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString orderIDPathParam("{"); orderIDPathParam.append("orderID").append("}");
    fullPath.replace(orderIDPathParam, stringValue(orderID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = payment.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentApi::createCallback);

    worker->execute(&input);
}

void
SWGPaymentApi::createCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit createSignal(output);
    
}
void
SWGPaymentApi::createTransaction(QString* buyerID, QString* orderID, QString* paymentID, SWGPaymentTransaction transaction) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString orderIDPathParam("{"); orderIDPathParam.append("orderID").append("}");
    fullPath.replace(orderIDPathParam, stringValue(orderID));
    QString paymentIDPathParam("{"); paymentIDPathParam.append("paymentID").append("}");
    fullPath.replace(paymentIDPathParam, stringValue(paymentID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = transaction.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentApi::createTransactionCallback);

    worker->execute(&input);
}

void
SWGPaymentApi::createTransactionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit createTransactionSignal(output);
    
}
void
SWGPaymentApi::delete(QString* buyerID, QString* orderID, QString* paymentID) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString orderIDPathParam("{"); orderIDPathParam.append("orderID").append("}");
    fullPath.replace(orderIDPathParam, stringValue(orderID));
    QString paymentIDPathParam("{"); paymentIDPathParam.append("paymentID").append("}");
    fullPath.replace(paymentIDPathParam, stringValue(paymentID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentApi::deleteCallback);

    worker->execute(&input);
}

void
SWGPaymentApi::deleteCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteSignal();
}
void
SWGPaymentApi::deleteTransaction(QString* buyerID, QString* orderID, QString* paymentID, QString* transactionID) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString orderIDPathParam("{"); orderIDPathParam.append("orderID").append("}");
    fullPath.replace(orderIDPathParam, stringValue(orderID));
    QString paymentIDPathParam("{"); paymentIDPathParam.append("paymentID").append("}");
    fullPath.replace(paymentIDPathParam, stringValue(paymentID));
    QString transactionIDPathParam("{"); transactionIDPathParam.append("transactionID").append("}");
    fullPath.replace(transactionIDPathParam, stringValue(transactionID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentApi::deleteTransactionCallback);

    worker->execute(&input);
}

void
SWGPaymentApi::deleteTransactionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteTransactionSignal();
}
void
SWGPaymentApi::get(QString* buyerID, QString* orderID, QString* paymentID) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString orderIDPathParam("{"); orderIDPathParam.append("orderID").append("}");
    fullPath.replace(orderIDPathParam, stringValue(orderID));
    QString paymentIDPathParam("{"); paymentIDPathParam.append("paymentID").append("}");
    fullPath.replace(paymentIDPathParam, stringValue(paymentID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentApi::getCallback);

    worker->execute(&input);
}

void
SWGPaymentApi::getCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit getSignal(output);
    
}
void
SWGPaymentApi::list(QString* buyerID, QString* orderID, QString* search, QString* searchOn, QString* sortBy, qint32 page, qint32 pageSize) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/orders/{orderID}/payments");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString orderIDPathParam("{"); orderIDPathParam.append("orderID").append("}");
    fullPath.replace(orderIDPathParam, stringValue(orderID));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("searchOn"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(searchOn)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sortBy"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sortBy)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pageSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pageSize)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentApi::listCallback);

    worker->execute(&input);
}

void
SWGPaymentApi::listCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit listSignal(output);
    
}
void
SWGPaymentApi::patch(QString* buyerID, QString* orderID, QString* paymentID, SWGPayment partialPayment) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString orderIDPathParam("{"); orderIDPathParam.append("orderID").append("}");
    fullPath.replace(orderIDPathParam, stringValue(orderID));
    QString paymentIDPathParam("{"); paymentIDPathParam.append("paymentID").append("}");
    fullPath.replace(paymentIDPathParam, stringValue(paymentID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");

    
    QString output = partialPayment.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentApi::patchCallback);

    worker->execute(&input);
}

void
SWGPaymentApi::patchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit patchSignal(output);
    
}
void
SWGPaymentApi::patchTransaction(QString* buyerID, QString* orderID, QString* paymentID, QString* transactionID, SWGPaymentTransaction partialTransaction) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString orderIDPathParam("{"); orderIDPathParam.append("orderID").append("}");
    fullPath.replace(orderIDPathParam, stringValue(orderID));
    QString paymentIDPathParam("{"); paymentIDPathParam.append("paymentID").append("}");
    fullPath.replace(paymentIDPathParam, stringValue(paymentID));
    QString transactionIDPathParam("{"); transactionIDPathParam.append("transactionID").append("}");
    fullPath.replace(transactionIDPathParam, stringValue(transactionID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");

    
    QString output = partialTransaction.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentApi::patchTransactionCallback);

    worker->execute(&input);
}

void
SWGPaymentApi::patchTransactionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit patchTransactionSignal(output);
    
}
void
SWGPaymentApi::update(QString* buyerID, QString* orderID, QString* paymentID, SWGPayment payment) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString orderIDPathParam("{"); orderIDPathParam.append("orderID").append("}");
    fullPath.replace(orderIDPathParam, stringValue(orderID));
    QString paymentIDPathParam("{"); paymentIDPathParam.append("paymentID").append("}");
    fullPath.replace(paymentIDPathParam, stringValue(paymentID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = payment.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentApi::updateCallback);

    worker->execute(&input);
}

void
SWGPaymentApi::updateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit updateSignal(output);
    
}
void
SWGPaymentApi::updateTransaction(QString* buyerID, QString* orderID, QString* paymentID, QString* transactionID, SWGPaymentTransaction transaction) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}");

    QString buyerIDPathParam("{"); buyerIDPathParam.append("buyerID").append("}");
    fullPath.replace(buyerIDPathParam, stringValue(buyerID));
    QString orderIDPathParam("{"); orderIDPathParam.append("orderID").append("}");
    fullPath.replace(orderIDPathParam, stringValue(orderID));
    QString paymentIDPathParam("{"); paymentIDPathParam.append("paymentID").append("}");
    fullPath.replace(paymentIDPathParam, stringValue(paymentID));
    QString transactionIDPathParam("{"); transactionIDPathParam.append("transactionID").append("}");
    fullPath.replace(transactionIDPathParam, stringValue(transactionID));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = transaction.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentApi::updateTransactionCallback);

    worker->execute(&input);
}

void
SWGPaymentApi::updateTransactionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGObject* output = static_cast<SWGObject*>(create(json, QString("SWGObject")));
    

    worker->deleteLater();

    emit updateTransactionSignal(output);
    
}
} /* namespace Swagger */
