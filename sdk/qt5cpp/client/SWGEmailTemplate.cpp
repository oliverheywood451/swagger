/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGEmailTemplate.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGEmailTemplate::SWGEmailTemplate(QString* json) {
    init();
    this->fromJson(*json);
}

SWGEmailTemplate::SWGEmailTemplate() {
    init();
}

SWGEmailTemplate::~SWGEmailTemplate() {
    this->cleanup();
}

void
SWGEmailTemplate::init() {
    Subject = new QString("");
Body = new QString("");
ReplyEmail = new QString("");
SendMessageType = false;
EmailFormatType = new QString("");
}

void
SWGEmailTemplate::cleanup() {
    if(Subject != NULL) {
        delete Subject;
    }
if(Body != NULL) {
        delete Body;
    }
if(ReplyEmail != NULL) {
        delete ReplyEmail;
    }

if(EmailFormatType != NULL) {
        delete EmailFormatType;
    }
}

SWGEmailTemplate*
SWGEmailTemplate::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGEmailTemplate::fromJsonObject(QJsonObject &pJson) {
    setValue(&Subject, pJson["Subject"], "QString", "QString");
setValue(&Body, pJson["Body"], "QString", "QString");
setValue(&ReplyEmail, pJson["ReplyEmail"], "QString", "QString");
setValue(&SendMessageType, pJson["SendMessageType"], "bool", "");
setValue(&EmailFormatType, pJson["EmailFormatType"], "QString", "QString");
}

QString
SWGEmailTemplate::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGEmailTemplate::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("Subject"), Subject, obj, QString("QString"));
    
        

    
    toJsonValue(QString("Body"), Body, obj, QString("QString"));
    
        

    
    toJsonValue(QString("ReplyEmail"), ReplyEmail, obj, QString("QString"));
    
        
obj->insert("SendMessageType", QJsonValue(SendMessageType));

    
    toJsonValue(QString("EmailFormatType"), EmailFormatType, obj, QString("QString"));
    
        

    return obj;
}

QString*
SWGEmailTemplate::getSubject() {
    return Subject;
}
void
SWGEmailTemplate::setSubject(QString* Subject) {
    this->Subject = Subject;
}

QString*
SWGEmailTemplate::getBody() {
    return Body;
}
void
SWGEmailTemplate::setBody(QString* Body) {
    this->Body = Body;
}

QString*
SWGEmailTemplate::getReplyEmail() {
    return ReplyEmail;
}
void
SWGEmailTemplate::setReplyEmail(QString* ReplyEmail) {
    this->ReplyEmail = ReplyEmail;
}

bool
SWGEmailTemplate::getSendMessageType() {
    return SendMessageType;
}
void
SWGEmailTemplate::setSendMessageType(bool SendMessageType) {
    this->SendMessageType = SendMessageType;
}

QString*
SWGEmailTemplate::getEmailFormatType() {
    return EmailFormatType;
}
void
SWGEmailTemplate::setEmailFormatType(QString* EmailFormatType) {
    this->EmailFormatType = EmailFormatType;
}



} /* namespace Swagger */

