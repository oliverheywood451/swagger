/* 
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OrderCloud.Client;
using OrderCloud.Model;

namespace OrderCloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Object</returns>
        Object AddPromotion (string buyerID, string orderID, string promoCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddPromotionWithHttpInfo (string buyerID, string orderID, string promoCode);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order approval. (optional)</param>
        /// <returns>Object</returns>
        Object Approve (string buyerID, string orderID, string comments = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order approval. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApproveWithHttpInfo (string buyerID, string orderID, string comments = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Object</returns>
        Object Cancel (string buyerID, string orderID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CancelWithHttpInfo (string buyerID, string orderID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="order"></param>
        /// <returns>Object</returns>
        Object Create (string buyerID, Order order);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="order"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateWithHttpInfo (string buyerID, Order order);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order denial. (optional)</param>
        /// <returns>Object</returns>
        Object Decline (string buyerID, string orderID, string comments = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order denial. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeclineWithHttpInfo (string buyerID, string orderID, string comments = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns></returns>
        void Delete (string buyerID, string orderID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string buyerID, string orderID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Object</returns>
        Object Get (string buyerID, string orderID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetWithHttpInfo (string buyerID, string orderID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object ListApprovals (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListApprovalsWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object ListEligibleApprovers (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListEligibleApproversWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was submitted. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was submitted. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object ListIncoming (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was submitted. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was submitted. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListIncomingWithHttpInfo (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was created. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was created. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object ListOutgoing (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was created. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was created. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListOutgoingWithHttpInfo (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object ListPromotions (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListPromotionsWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="partialOrder"></param>
        /// <returns>Object</returns>
        Object Patch (string buyerID, string orderID, Order partialOrder);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="partialOrder"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PatchWithHttpInfo (string buyerID, string orderID, Order partialOrder);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Object</returns>
        Object PatchBillingAddress (string buyerID, string orderID, Address address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PatchBillingAddressWithHttpInfo (string buyerID, string orderID, Address address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Object</returns>
        Object PatchShippingAddress (string buyerID, string orderID, Address address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PatchShippingAddressWithHttpInfo (string buyerID, string orderID, Address address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Object</returns>
        Object RemovePromotion (string buyerID, string orderID, string promoCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemovePromotionWithHttpInfo (string buyerID, string orderID, string promoCode);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Object</returns>
        Object SetBillingAddress (string buyerID, string orderID, Address address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetBillingAddressWithHttpInfo (string buyerID, string orderID, Address address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Object</returns>
        Object SetShippingAddress (string buyerID, string orderID, Address address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetShippingAddressWithHttpInfo (string buyerID, string orderID, Address address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="shipment"></param>
        /// <returns>Object</returns>
        Object Ship (string buyerID, string orderID, Shipment shipment);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="shipment"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ShipWithHttpInfo (string buyerID, string orderID, Shipment shipment);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Object</returns>
        Object Submit (string buyerID, string orderID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubmitWithHttpInfo (string buyerID, string orderID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="tempUserToken">Temp user token of the order.</param>
        /// <returns></returns>
        void TransferTempUserOrder (string buyerID, string tempUserToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="tempUserToken">Temp user token of the order.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TransferTempUserOrderWithHttpInfo (string buyerID, string tempUserToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="order"></param>
        /// <returns>Object</returns>
        Object Update (string buyerID, string orderID, Order order);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="order"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateWithHttpInfo (string buyerID, string orderID, Order order);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddPromotionAsync (string buyerID, string orderID, string promoCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPromotionAsyncWithHttpInfo (string buyerID, string orderID, string promoCode);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order approval. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApproveAsync (string buyerID, string orderID, string comments = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order approval. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApproveAsyncWithHttpInfo (string buyerID, string orderID, string comments = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CancelAsync (string buyerID, string orderID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelAsyncWithHttpInfo (string buyerID, string orderID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="order"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateAsync (string buyerID, Order order);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="order"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (string buyerID, Order order);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order denial. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeclineAsync (string buyerID, string orderID, string comments = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order denial. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeclineAsyncWithHttpInfo (string buyerID, string orderID, string comments = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string buyerID, string orderID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string buyerID, string orderID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAsync (string buyerID, string orderID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAsyncWithHttpInfo (string buyerID, string orderID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListApprovalsAsync (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListApprovalsAsyncWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListEligibleApproversAsync (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListEligibleApproversAsyncWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was submitted. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was submitted. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListIncomingAsync (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was submitted. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was submitted. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListIncomingAsyncWithHttpInfo (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was created. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was created. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListOutgoingAsync (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was created. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was created. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListOutgoingAsyncWithHttpInfo (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListPromotionsAsync (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListPromotionsAsyncWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="partialOrder"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PatchAsync (string buyerID, string orderID, Order partialOrder);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="partialOrder"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchAsyncWithHttpInfo (string buyerID, string orderID, Order partialOrder);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PatchBillingAddressAsync (string buyerID, string orderID, Address address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchBillingAddressAsyncWithHttpInfo (string buyerID, string orderID, Address address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PatchShippingAddressAsync (string buyerID, string orderID, Address address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchShippingAddressAsyncWithHttpInfo (string buyerID, string orderID, Address address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemovePromotionAsync (string buyerID, string orderID, string promoCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemovePromotionAsyncWithHttpInfo (string buyerID, string orderID, string promoCode);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetBillingAddressAsync (string buyerID, string orderID, Address address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetBillingAddressAsyncWithHttpInfo (string buyerID, string orderID, Address address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetShippingAddressAsync (string buyerID, string orderID, Address address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetShippingAddressAsyncWithHttpInfo (string buyerID, string orderID, Address address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="shipment"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ShipAsync (string buyerID, string orderID, Shipment shipment);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="shipment"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShipAsyncWithHttpInfo (string buyerID, string orderID, Shipment shipment);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubmitAsync (string buyerID, string orderID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitAsyncWithHttpInfo (string buyerID, string orderID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="tempUserToken">Temp user token of the order.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TransferTempUserOrderAsync (string buyerID, string tempUserToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="tempUserToken">Temp user token of the order.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransferTempUserOrderAsyncWithHttpInfo (string buyerID, string tempUserToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="order"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAsync (string buyerID, string orderID, Order order);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="order"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string buyerID, string orderID, Order order);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : IOrderApi
    {
        private OrderCloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = OrderCloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OrderCloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OrderCloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Object</returns>
        public Object AddPromotion (string buyerID, string orderID, string promoCode)
        {
             ApiResponse<Object> localVarResponse = AddPromotionWithHttpInfo(buyerID, orderID, promoCode);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddPromotionWithHttpInfo (string buyerID, string orderID, string promoCode)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->AddPromotion");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->AddPromotion");
            // verify the required parameter 'promoCode' is set
            if (promoCode == null)
                throw new ApiException(400, "Missing required parameter 'promoCode' when calling OrderApi->AddPromotion");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (promoCode != null) localVarPathParams.Add("promoCode", Configuration.ApiClient.ParameterToString(promoCode)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPromotion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddPromotionAsync (string buyerID, string orderID, string promoCode)
        {
             ApiResponse<Object> localVarResponse = await AddPromotionAsyncWithHttpInfo(buyerID, orderID, promoCode);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPromotionAsyncWithHttpInfo (string buyerID, string orderID, string promoCode)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->AddPromotion");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->AddPromotion");
            // verify the required parameter 'promoCode' is set
            if (promoCode == null)
                throw new ApiException(400, "Missing required parameter 'promoCode' when calling OrderApi->AddPromotion");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (promoCode != null) localVarPathParams.Add("promoCode", Configuration.ApiClient.ParameterToString(promoCode)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPromotion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order approval. (optional)</param>
        /// <returns>Object</returns>
        public Object Approve (string buyerID, string orderID, string comments = null)
        {
             ApiResponse<Object> localVarResponse = ApproveWithHttpInfo(buyerID, orderID, comments);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order approval. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ApproveWithHttpInfo (string buyerID, string orderID, string comments = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Approve");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Approve");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (comments != null) localVarQueryParams.Add("comments", Configuration.ApiClient.ParameterToString(comments)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Approve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order approval. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApproveAsync (string buyerID, string orderID, string comments = null)
        {
             ApiResponse<Object> localVarResponse = await ApproveAsyncWithHttpInfo(buyerID, orderID, comments);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order approval. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApproveAsyncWithHttpInfo (string buyerID, string orderID, string comments = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Approve");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Approve");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (comments != null) localVarQueryParams.Add("comments", Configuration.ApiClient.ParameterToString(comments)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Approve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Object</returns>
        public Object Cancel (string buyerID, string orderID)
        {
             ApiResponse<Object> localVarResponse = CancelWithHttpInfo(buyerID, orderID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CancelWithHttpInfo (string buyerID, string orderID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Cancel");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Cancel");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Cancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CancelAsync (string buyerID, string orderID)
        {
             ApiResponse<Object> localVarResponse = await CancelAsyncWithHttpInfo(buyerID, orderID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelAsyncWithHttpInfo (string buyerID, string orderID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Cancel");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Cancel");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Cancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="order"></param>
        /// <returns>Object</returns>
        public Object Create (string buyerID, Order order)
        {
             ApiResponse<Object> localVarResponse = CreateWithHttpInfo(buyerID, order);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="order"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateWithHttpInfo (string buyerID, Order order)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Create");
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->Create");

            var localVarPath = "/buyers/{buyerID}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="order"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateAsync (string buyerID, Order order)
        {
             ApiResponse<Object> localVarResponse = await CreateAsyncWithHttpInfo(buyerID, order);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="order"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (string buyerID, Order order)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Create");
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->Create");

            var localVarPath = "/buyers/{buyerID}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order denial. (optional)</param>
        /// <returns>Object</returns>
        public Object Decline (string buyerID, string orderID, string comments = null)
        {
             ApiResponse<Object> localVarResponse = DeclineWithHttpInfo(buyerID, orderID, comments);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order denial. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeclineWithHttpInfo (string buyerID, string orderID, string comments = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Decline");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Decline");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/decline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (comments != null) localVarQueryParams.Add("comments", Configuration.ApiClient.ParameterToString(comments)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Decline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order denial. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeclineAsync (string buyerID, string orderID, string comments = null)
        {
             ApiResponse<Object> localVarResponse = await DeclineAsyncWithHttpInfo(buyerID, orderID, comments);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="comments">Comments to be saved with the order denial. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeclineAsyncWithHttpInfo (string buyerID, string orderID, string comments = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Decline");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Decline");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/decline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (comments != null) localVarQueryParams.Add("comments", Configuration.ApiClient.ParameterToString(comments)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Decline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns></returns>
        public void Delete (string buyerID, string orderID)
        {
             DeleteWithHttpInfo(buyerID, orderID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string buyerID, string orderID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Delete");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Delete");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string buyerID, string orderID)
        {
             await DeleteAsyncWithHttpInfo(buyerID, orderID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string buyerID, string orderID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Delete");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Delete");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Object</returns>
        public Object Get (string buyerID, string orderID)
        {
             ApiResponse<Object> localVarResponse = GetWithHttpInfo(buyerID, orderID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetWithHttpInfo (string buyerID, string orderID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Get");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Get");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAsync (string buyerID, string orderID)
        {
             ApiResponse<Object> localVarResponse = await GetAsyncWithHttpInfo(buyerID, orderID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAsyncWithHttpInfo (string buyerID, string orderID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Get");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Get");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object ListApprovals (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListApprovalsWithHttpInfo(buyerID, orderID, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListApprovalsWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->ListApprovals");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->ListApprovals");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/approvals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApprovals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListApprovalsAsync (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListApprovalsAsyncWithHttpInfo(buyerID, orderID, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListApprovalsAsyncWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->ListApprovals");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->ListApprovals");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/approvals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApprovals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object ListEligibleApprovers (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListEligibleApproversWithHttpInfo(buyerID, orderID, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListEligibleApproversWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->ListEligibleApprovers");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->ListEligibleApprovers");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/eligibleapprovers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEligibleApprovers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListEligibleApproversAsync (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListEligibleApproversAsyncWithHttpInfo(buyerID, orderID, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListEligibleApproversAsyncWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->ListEligibleApprovers");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->ListEligibleApprovers");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/eligibleapprovers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEligibleApprovers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was submitted. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was submitted. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object ListIncoming (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListIncomingWithHttpInfo(buyerID, from, to, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was submitted. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was submitted. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListIncomingWithHttpInfo (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/orders/incoming";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarQueryParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIncoming", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was submitted. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was submitted. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListIncomingAsync (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListIncomingAsyncWithHttpInfo(buyerID, from, to, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was submitted. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was submitted. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListIncomingAsyncWithHttpInfo (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/orders/incoming";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarQueryParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIncoming", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was created. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was created. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object ListOutgoing (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListOutgoingWithHttpInfo(buyerID, from, to, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was created. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was created. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListOutgoingWithHttpInfo (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/orders/outgoing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarQueryParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOutgoing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was created. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was created. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListOutgoingAsync (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListOutgoingAsyncWithHttpInfo(buyerID, from, to, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer. (optional)</param>
        /// <param name="from">Lower bound of date range that the order was created. (optional)</param>
        /// <param name="to">Upper bound of date range that the order was created. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListOutgoingAsyncWithHttpInfo (string buyerID = null, string from = null, string to = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/orders/outgoing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarQueryParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOutgoing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object ListPromotions (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListPromotionsWithHttpInfo(buyerID, orderID, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListPromotionsWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->ListPromotions");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->ListPromotions");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPromotions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListPromotionsAsync (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListPromotionsAsyncWithHttpInfo(buyerID, orderID, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListPromotionsAsyncWithHttpInfo (string buyerID, string orderID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->ListPromotions");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->ListPromotions");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPromotions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="partialOrder"></param>
        /// <returns>Object</returns>
        public Object Patch (string buyerID, string orderID, Order partialOrder)
        {
             ApiResponse<Object> localVarResponse = PatchWithHttpInfo(buyerID, orderID, partialOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="partialOrder"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PatchWithHttpInfo (string buyerID, string orderID, Order partialOrder)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Patch");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Patch");
            // verify the required parameter 'partialOrder' is set
            if (partialOrder == null)
                throw new ApiException(400, "Missing required parameter 'partialOrder' when calling OrderApi->Patch");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (partialOrder != null && partialOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(partialOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partialOrder; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Patch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="partialOrder"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PatchAsync (string buyerID, string orderID, Order partialOrder)
        {
             ApiResponse<Object> localVarResponse = await PatchAsyncWithHttpInfo(buyerID, orderID, partialOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="partialOrder"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchAsyncWithHttpInfo (string buyerID, string orderID, Order partialOrder)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Patch");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Patch");
            // verify the required parameter 'partialOrder' is set
            if (partialOrder == null)
                throw new ApiException(400, "Missing required parameter 'partialOrder' when calling OrderApi->Patch");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (partialOrder != null && partialOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(partialOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = partialOrder; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Patch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Object</returns>
        public Object PatchBillingAddress (string buyerID, string orderID, Address address)
        {
             ApiResponse<Object> localVarResponse = PatchBillingAddressWithHttpInfo(buyerID, orderID, address);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PatchBillingAddressWithHttpInfo (string buyerID, string orderID, Address address)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->PatchBillingAddress");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->PatchBillingAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling OrderApi->PatchBillingAddress");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/billto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchBillingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PatchBillingAddressAsync (string buyerID, string orderID, Address address)
        {
             ApiResponse<Object> localVarResponse = await PatchBillingAddressAsyncWithHttpInfo(buyerID, orderID, address);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchBillingAddressAsyncWithHttpInfo (string buyerID, string orderID, Address address)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->PatchBillingAddress");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->PatchBillingAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling OrderApi->PatchBillingAddress");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/billto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchBillingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Object</returns>
        public Object PatchShippingAddress (string buyerID, string orderID, Address address)
        {
             ApiResponse<Object> localVarResponse = PatchShippingAddressWithHttpInfo(buyerID, orderID, address);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PatchShippingAddressWithHttpInfo (string buyerID, string orderID, Address address)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->PatchShippingAddress");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->PatchShippingAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling OrderApi->PatchShippingAddress");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/shipto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchShippingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PatchShippingAddressAsync (string buyerID, string orderID, Address address)
        {
             ApiResponse<Object> localVarResponse = await PatchShippingAddressAsyncWithHttpInfo(buyerID, orderID, address);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchShippingAddressAsyncWithHttpInfo (string buyerID, string orderID, Address address)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->PatchShippingAddress");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->PatchShippingAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling OrderApi->PatchShippingAddress");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/shipto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchShippingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Object</returns>
        public Object RemovePromotion (string buyerID, string orderID, string promoCode)
        {
             ApiResponse<Object> localVarResponse = RemovePromotionWithHttpInfo(buyerID, orderID, promoCode);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > RemovePromotionWithHttpInfo (string buyerID, string orderID, string promoCode)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->RemovePromotion");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->RemovePromotion");
            // verify the required parameter 'promoCode' is set
            if (promoCode == null)
                throw new ApiException(400, "Missing required parameter 'promoCode' when calling OrderApi->RemovePromotion");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (promoCode != null) localVarPathParams.Add("promoCode", Configuration.ApiClient.ParameterToString(promoCode)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePromotion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemovePromotionAsync (string buyerID, string orderID, string promoCode)
        {
             ApiResponse<Object> localVarResponse = await RemovePromotionAsyncWithHttpInfo(buyerID, orderID, promoCode);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="promoCode">Promo code of the order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemovePromotionAsyncWithHttpInfo (string buyerID, string orderID, string promoCode)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->RemovePromotion");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->RemovePromotion");
            // verify the required parameter 'promoCode' is set
            if (promoCode == null)
                throw new ApiException(400, "Missing required parameter 'promoCode' when calling OrderApi->RemovePromotion");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (promoCode != null) localVarPathParams.Add("promoCode", Configuration.ApiClient.ParameterToString(promoCode)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePromotion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Object</returns>
        public Object SetBillingAddress (string buyerID, string orderID, Address address)
        {
             ApiResponse<Object> localVarResponse = SetBillingAddressWithHttpInfo(buyerID, orderID, address);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SetBillingAddressWithHttpInfo (string buyerID, string orderID, Address address)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->SetBillingAddress");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->SetBillingAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling OrderApi->SetBillingAddress");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/billto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBillingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetBillingAddressAsync (string buyerID, string orderID, Address address)
        {
             ApiResponse<Object> localVarResponse = await SetBillingAddressAsyncWithHttpInfo(buyerID, orderID, address);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetBillingAddressAsyncWithHttpInfo (string buyerID, string orderID, Address address)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->SetBillingAddress");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->SetBillingAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling OrderApi->SetBillingAddress");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/billto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBillingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Object</returns>
        public Object SetShippingAddress (string buyerID, string orderID, Address address)
        {
             ApiResponse<Object> localVarResponse = SetShippingAddressWithHttpInfo(buyerID, orderID, address);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SetShippingAddressWithHttpInfo (string buyerID, string orderID, Address address)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->SetShippingAddress");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->SetShippingAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling OrderApi->SetShippingAddress");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/shipto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetShippingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetShippingAddressAsync (string buyerID, string orderID, Address address)
        {
             ApiResponse<Object> localVarResponse = await SetShippingAddressAsyncWithHttpInfo(buyerID, orderID, address);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetShippingAddressAsyncWithHttpInfo (string buyerID, string orderID, Address address)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->SetShippingAddress");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->SetShippingAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling OrderApi->SetShippingAddress");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/shipto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetShippingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="shipment"></param>
        /// <returns>Object</returns>
        public Object Ship (string buyerID, string orderID, Shipment shipment)
        {
             ApiResponse<Object> localVarResponse = ShipWithHttpInfo(buyerID, orderID, shipment);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="shipment"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ShipWithHttpInfo (string buyerID, string orderID, Shipment shipment)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Ship");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Ship");
            // verify the required parameter 'shipment' is set
            if (shipment == null)
                throw new ApiException(400, "Missing required parameter 'shipment' when calling OrderApi->Ship");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/ship";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (shipment != null && shipment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipment; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="shipment"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ShipAsync (string buyerID, string orderID, Shipment shipment)
        {
             ApiResponse<Object> localVarResponse = await ShipAsyncWithHttpInfo(buyerID, orderID, shipment);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="shipment"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ShipAsyncWithHttpInfo (string buyerID, string orderID, Shipment shipment)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Ship");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Ship");
            // verify the required parameter 'shipment' is set
            if (shipment == null)
                throw new ApiException(400, "Missing required parameter 'shipment' when calling OrderApi->Ship");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/ship";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (shipment != null && shipment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shipment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shipment; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Object</returns>
        public Object Submit (string buyerID, string orderID)
        {
             ApiResponse<Object> localVarResponse = SubmitWithHttpInfo(buyerID, orderID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SubmitWithHttpInfo (string buyerID, string orderID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Submit");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Submit");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/submit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Submit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubmitAsync (string buyerID, string orderID)
        {
             ApiResponse<Object> localVarResponse = await SubmitAsyncWithHttpInfo(buyerID, orderID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubmitAsyncWithHttpInfo (string buyerID, string orderID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Submit");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Submit");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}/submit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Submit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="tempUserToken">Temp user token of the order.</param>
        /// <returns></returns>
        public void TransferTempUserOrder (string buyerID, string tempUserToken)
        {
             TransferTempUserOrderWithHttpInfo(buyerID, tempUserToken);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="tempUserToken">Temp user token of the order.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TransferTempUserOrderWithHttpInfo (string buyerID, string tempUserToken)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->TransferTempUserOrder");
            // verify the required parameter 'tempUserToken' is set
            if (tempUserToken == null)
                throw new ApiException(400, "Missing required parameter 'tempUserToken' when calling OrderApi->TransferTempUserOrder");

            var localVarPath = "/buyers/{buyerID}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (tempUserToken != null) localVarQueryParams.Add("tempUserToken", Configuration.ApiClient.ParameterToString(tempUserToken)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferTempUserOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="tempUserToken">Temp user token of the order.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TransferTempUserOrderAsync (string buyerID, string tempUserToken)
        {
             await TransferTempUserOrderAsyncWithHttpInfo(buyerID, tempUserToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="tempUserToken">Temp user token of the order.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransferTempUserOrderAsyncWithHttpInfo (string buyerID, string tempUserToken)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->TransferTempUserOrder");
            // verify the required parameter 'tempUserToken' is set
            if (tempUserToken == null)
                throw new ApiException(400, "Missing required parameter 'tempUserToken' when calling OrderApi->TransferTempUserOrder");

            var localVarPath = "/buyers/{buyerID}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (tempUserToken != null) localVarQueryParams.Add("tempUserToken", Configuration.ApiClient.ParameterToString(tempUserToken)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferTempUserOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="order"></param>
        /// <returns>Object</returns>
        public Object Update (string buyerID, string orderID, Order order)
        {
             ApiResponse<Object> localVarResponse = UpdateWithHttpInfo(buyerID, orderID, order);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="order"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateWithHttpInfo (string buyerID, string orderID, Order order)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Update");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Update");
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->Update");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="order"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAsync (string buyerID, string orderID, Order order)
        {
             ApiResponse<Object> localVarResponse = await UpdateAsyncWithHttpInfo(buyerID, orderID, order);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="orderID">ID of the order.</param>
        /// <param name="order"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string buyerID, string orderID, Order order)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling OrderApi->Update");
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling OrderApi->Update");
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->Update");

            var localVarPath = "/buyers/{buyerID}/orders/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

    }
}
