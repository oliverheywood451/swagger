/* 
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OrderCloud.Client;
using OrderCloud.Model;

namespace OrderCloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpecApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spec"></param>
        /// <returns>Object</returns>
        Object Create (Spec spec);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spec"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateWithHttpInfo (Spec spec);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="option"></param>
        /// <returns>Object</returns>
        Object CreateOption (string specID, SpecOption option);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="option"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateOptionWithHttpInfo (string specID, SpecOption option);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns></returns>
        void Delete (string specID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string specID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns></returns>
        void DeleteOption (string specID, string optionID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOptionWithHttpInfo (string specID, string optionID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns></returns>
        void DeleteProductAssignment (string specID, string productID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductAssignmentWithHttpInfo (string specID, string productID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>Object</returns>
        Object Get (string specID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetWithHttpInfo (string specID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>Object</returns>
        Object GetOption (string specID, string optionID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetOptionWithHttpInfo (string specID, string optionID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object List (string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListWithHttpInfo (string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object ListOptions (string specID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListOptionsWithHttpInfo (string specID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object ListProductAssignments (string specID = null, string productID = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListProductAssignmentsWithHttpInfo (string specID = null, string productID = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Object</returns>
        Object Patch (string specID, Spec spec);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PatchWithHttpInfo (string specID, Spec spec);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Object</returns>
        Object PatchOption (string specID, string optionID, SpecOption option);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PatchOptionWithHttpInfo (string specID, string optionID, SpecOption option);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAssignment"></param>
        /// <returns></returns>
        void SaveProductAssignment (SpecProductAssignment productAssignment);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAssignment"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveProductAssignmentWithHttpInfo (SpecProductAssignment productAssignment);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Object</returns>
        Object Update (string specID, Spec spec);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateWithHttpInfo (string specID, Spec spec);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Object</returns>
        Object UpdateOption (string specID, string optionID, SpecOption option);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateOptionWithHttpInfo (string specID, string optionID, SpecOption option);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spec"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateAsync (Spec spec);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spec"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (Spec spec);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="option"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateOptionAsync (string specID, SpecOption option);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="option"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateOptionAsyncWithHttpInfo (string specID, SpecOption option);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string specID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string specID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOptionAsync (string specID, string optionID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOptionAsyncWithHttpInfo (string specID, string optionID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductAssignmentAsync (string specID, string productID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductAssignmentAsyncWithHttpInfo (string specID, string productID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAsync (string specID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAsyncWithHttpInfo (string specID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetOptionAsync (string specID, string optionID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOptionAsyncWithHttpInfo (string specID, string optionID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListAsync (string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListAsyncWithHttpInfo (string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListOptionsAsync (string specID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListOptionsAsyncWithHttpInfo (string specID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListProductAssignmentsAsync (string specID = null, string productID = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListProductAssignmentsAsyncWithHttpInfo (string specID = null, string productID = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PatchAsync (string specID, Spec spec);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchAsyncWithHttpInfo (string specID, Spec spec);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PatchOptionAsync (string specID, string optionID, SpecOption option);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchOptionAsyncWithHttpInfo (string specID, string optionID, SpecOption option);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAssignment"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveProductAssignmentAsync (SpecProductAssignment productAssignment);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAssignment"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveProductAssignmentAsyncWithHttpInfo (SpecProductAssignment productAssignment);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAsync (string specID, Spec spec);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string specID, Spec spec);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateOptionAsync (string specID, string optionID, SpecOption option);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOptionAsyncWithHttpInfo (string specID, string optionID, SpecOption option);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpecApi : ISpecApi
    {
        private OrderCloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpecApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpecApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = OrderCloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpecApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpecApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OrderCloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OrderCloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spec"></param>
        /// <returns>Object</returns>
        public Object Create (Spec spec)
        {
             ApiResponse<Object> localVarResponse = CreateWithHttpInfo(spec);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spec"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateWithHttpInfo (Spec spec)
        {
            // verify the required parameter 'spec' is set
            if (spec == null)
                throw new ApiException(400, "Missing required parameter 'spec' when calling SpecApi->Create");

            var localVarPath = "/specs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (spec != null && spec.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(spec); // http body (model) parameter
            }
            else
            {
                localVarPostBody = spec; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spec"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateAsync (Spec spec)
        {
             ApiResponse<Object> localVarResponse = await CreateAsyncWithHttpInfo(spec);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spec"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (Spec spec)
        {
            // verify the required parameter 'spec' is set
            if (spec == null)
                throw new ApiException(400, "Missing required parameter 'spec' when calling SpecApi->Create");

            var localVarPath = "/specs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (spec != null && spec.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(spec); // http body (model) parameter
            }
            else
            {
                localVarPostBody = spec; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="option"></param>
        /// <returns>Object</returns>
        public Object CreateOption (string specID, SpecOption option)
        {
             ApiResponse<Object> localVarResponse = CreateOptionWithHttpInfo(specID, option);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="option"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateOptionWithHttpInfo (string specID, SpecOption option)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->CreateOption");
            // verify the required parameter 'option' is set
            if (option == null)
                throw new ApiException(400, "Missing required parameter 'option' when calling SpecApi->CreateOption");

            var localVarPath = "/specs/{specID}/options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (option != null && option.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(option); // http body (model) parameter
            }
            else
            {
                localVarPostBody = option; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="option"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateOptionAsync (string specID, SpecOption option)
        {
             ApiResponse<Object> localVarResponse = await CreateOptionAsyncWithHttpInfo(specID, option);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="option"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateOptionAsyncWithHttpInfo (string specID, SpecOption option)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->CreateOption");
            // verify the required parameter 'option' is set
            if (option == null)
                throw new ApiException(400, "Missing required parameter 'option' when calling SpecApi->CreateOption");

            var localVarPath = "/specs/{specID}/options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (option != null && option.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(option); // http body (model) parameter
            }
            else
            {
                localVarPostBody = option; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns></returns>
        public void Delete (string specID)
        {
             DeleteWithHttpInfo(specID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string specID)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->Delete");

            var localVarPath = "/specs/{specID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string specID)
        {
             await DeleteAsyncWithHttpInfo(specID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string specID)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->Delete");

            var localVarPath = "/specs/{specID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns></returns>
        public void DeleteOption (string specID, string optionID)
        {
             DeleteOptionWithHttpInfo(specID, optionID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOptionWithHttpInfo (string specID, string optionID)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->DeleteOption");
            // verify the required parameter 'optionID' is set
            if (optionID == null)
                throw new ApiException(400, "Missing required parameter 'optionID' when calling SpecApi->DeleteOption");

            var localVarPath = "/specs/{specID}/options/{optionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (optionID != null) localVarPathParams.Add("optionID", Configuration.ApiClient.ParameterToString(optionID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOption", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOptionAsync (string specID, string optionID)
        {
             await DeleteOptionAsyncWithHttpInfo(specID, optionID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOptionAsyncWithHttpInfo (string specID, string optionID)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->DeleteOption");
            // verify the required parameter 'optionID' is set
            if (optionID == null)
                throw new ApiException(400, "Missing required parameter 'optionID' when calling SpecApi->DeleteOption");

            var localVarPath = "/specs/{specID}/options/{optionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (optionID != null) localVarPathParams.Add("optionID", Configuration.ApiClient.ParameterToString(optionID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOption", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns></returns>
        public void DeleteProductAssignment (string specID, string productID)
        {
             DeleteProductAssignmentWithHttpInfo(specID, productID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProductAssignmentWithHttpInfo (string specID, string productID)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->DeleteProductAssignment");
            // verify the required parameter 'productID' is set
            if (productID == null)
                throw new ApiException(400, "Missing required parameter 'productID' when calling SpecApi->DeleteProductAssignment");

            var localVarPath = "/specs/{specID}/productassignments/{productID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (productID != null) localVarPathParams.Add("productID", Configuration.ApiClient.ParameterToString(productID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductAssignmentAsync (string specID, string productID)
        {
             await DeleteProductAssignmentAsyncWithHttpInfo(specID, productID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductAssignmentAsyncWithHttpInfo (string specID, string productID)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->DeleteProductAssignment");
            // verify the required parameter 'productID' is set
            if (productID == null)
                throw new ApiException(400, "Missing required parameter 'productID' when calling SpecApi->DeleteProductAssignment");

            var localVarPath = "/specs/{specID}/productassignments/{productID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (productID != null) localVarPathParams.Add("productID", Configuration.ApiClient.ParameterToString(productID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>Object</returns>
        public Object Get (string specID)
        {
             ApiResponse<Object> localVarResponse = GetWithHttpInfo(specID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetWithHttpInfo (string specID)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->Get");

            var localVarPath = "/specs/{specID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAsync (string specID)
        {
             ApiResponse<Object> localVarResponse = await GetAsyncWithHttpInfo(specID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAsyncWithHttpInfo (string specID)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->Get");

            var localVarPath = "/specs/{specID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>Object</returns>
        public Object GetOption (string specID, string optionID)
        {
             ApiResponse<Object> localVarResponse = GetOptionWithHttpInfo(specID, optionID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetOptionWithHttpInfo (string specID, string optionID)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->GetOption");
            // verify the required parameter 'optionID' is set
            if (optionID == null)
                throw new ApiException(400, "Missing required parameter 'optionID' when calling SpecApi->GetOption");

            var localVarPath = "/specs/{specID}/options/{optionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (optionID != null) localVarPathParams.Add("optionID", Configuration.ApiClient.ParameterToString(optionID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetOptionAsync (string specID, string optionID)
        {
             ApiResponse<Object> localVarResponse = await GetOptionAsyncWithHttpInfo(specID, optionID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOptionAsyncWithHttpInfo (string specID, string optionID)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->GetOption");
            // verify the required parameter 'optionID' is set
            if (optionID == null)
                throw new ApiException(400, "Missing required parameter 'optionID' when calling SpecApi->GetOption");

            var localVarPath = "/specs/{specID}/options/{optionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (optionID != null) localVarPathParams.Add("optionID", Configuration.ApiClient.ParameterToString(optionID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object List (string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListWithHttpInfo(search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListWithHttpInfo (string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/specs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListAsync (string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListAsyncWithHttpInfo(search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListAsyncWithHttpInfo (string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/specs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object ListOptions (string specID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListOptionsWithHttpInfo(specID, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListOptionsWithHttpInfo (string specID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->ListOptions");

            var localVarPath = "/specs/{specID}/options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListOptionsAsync (string specID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListOptionsAsyncWithHttpInfo(specID, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListOptionsAsyncWithHttpInfo (string specID, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->ListOptions");

            var localVarPath = "/specs/{specID}/options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object ListProductAssignments (string specID = null, string productID = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListProductAssignmentsWithHttpInfo(specID, productID, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListProductAssignmentsWithHttpInfo (string specID = null, string productID = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/specs/productassignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarQueryParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // query parameter
            if (productID != null) localVarQueryParams.Add("productID", Configuration.ApiClient.ParameterToString(productID)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProductAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListProductAssignmentsAsync (string specID = null, string productID = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListProductAssignmentsAsyncWithHttpInfo(specID, productID, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListProductAssignmentsAsyncWithHttpInfo (string specID = null, string productID = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/specs/productassignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarQueryParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // query parameter
            if (productID != null) localVarQueryParams.Add("productID", Configuration.ApiClient.ParameterToString(productID)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProductAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Object</returns>
        public Object Patch (string specID, Spec spec)
        {
             ApiResponse<Object> localVarResponse = PatchWithHttpInfo(specID, spec);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PatchWithHttpInfo (string specID, Spec spec)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->Patch");
            // verify the required parameter 'spec' is set
            if (spec == null)
                throw new ApiException(400, "Missing required parameter 'spec' when calling SpecApi->Patch");

            var localVarPath = "/specs/{specID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (spec != null && spec.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(spec); // http body (model) parameter
            }
            else
            {
                localVarPostBody = spec; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Patch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PatchAsync (string specID, Spec spec)
        {
             ApiResponse<Object> localVarResponse = await PatchAsyncWithHttpInfo(specID, spec);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchAsyncWithHttpInfo (string specID, Spec spec)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->Patch");
            // verify the required parameter 'spec' is set
            if (spec == null)
                throw new ApiException(400, "Missing required parameter 'spec' when calling SpecApi->Patch");

            var localVarPath = "/specs/{specID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (spec != null && spec.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(spec); // http body (model) parameter
            }
            else
            {
                localVarPostBody = spec; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Patch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Object</returns>
        public Object PatchOption (string specID, string optionID, SpecOption option)
        {
             ApiResponse<Object> localVarResponse = PatchOptionWithHttpInfo(specID, optionID, option);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PatchOptionWithHttpInfo (string specID, string optionID, SpecOption option)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->PatchOption");
            // verify the required parameter 'optionID' is set
            if (optionID == null)
                throw new ApiException(400, "Missing required parameter 'optionID' when calling SpecApi->PatchOption");
            // verify the required parameter 'option' is set
            if (option == null)
                throw new ApiException(400, "Missing required parameter 'option' when calling SpecApi->PatchOption");

            var localVarPath = "/specs/{specID}/options/{optionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (optionID != null) localVarPathParams.Add("optionID", Configuration.ApiClient.ParameterToString(optionID)); // path parameter
            if (option != null && option.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(option); // http body (model) parameter
            }
            else
            {
                localVarPostBody = option; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PatchOptionAsync (string specID, string optionID, SpecOption option)
        {
             ApiResponse<Object> localVarResponse = await PatchOptionAsyncWithHttpInfo(specID, optionID, option);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchOptionAsyncWithHttpInfo (string specID, string optionID, SpecOption option)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->PatchOption");
            // verify the required parameter 'optionID' is set
            if (optionID == null)
                throw new ApiException(400, "Missing required parameter 'optionID' when calling SpecApi->PatchOption");
            // verify the required parameter 'option' is set
            if (option == null)
                throw new ApiException(400, "Missing required parameter 'option' when calling SpecApi->PatchOption");

            var localVarPath = "/specs/{specID}/options/{optionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (optionID != null) localVarPathParams.Add("optionID", Configuration.ApiClient.ParameterToString(optionID)); // path parameter
            if (option != null && option.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(option); // http body (model) parameter
            }
            else
            {
                localVarPostBody = option; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAssignment"></param>
        /// <returns></returns>
        public void SaveProductAssignment (SpecProductAssignment productAssignment)
        {
             SaveProductAssignmentWithHttpInfo(productAssignment);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAssignment"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SaveProductAssignmentWithHttpInfo (SpecProductAssignment productAssignment)
        {
            // verify the required parameter 'productAssignment' is set
            if (productAssignment == null)
                throw new ApiException(400, "Missing required parameter 'productAssignment' when calling SpecApi->SaveProductAssignment");

            var localVarPath = "/specs/productassignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productAssignment != null && productAssignment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(productAssignment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = productAssignment; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveProductAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAssignment"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveProductAssignmentAsync (SpecProductAssignment productAssignment)
        {
             await SaveProductAssignmentAsyncWithHttpInfo(productAssignment);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAssignment"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SaveProductAssignmentAsyncWithHttpInfo (SpecProductAssignment productAssignment)
        {
            // verify the required parameter 'productAssignment' is set
            if (productAssignment == null)
                throw new ApiException(400, "Missing required parameter 'productAssignment' when calling SpecApi->SaveProductAssignment");

            var localVarPath = "/specs/productassignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productAssignment != null && productAssignment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(productAssignment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = productAssignment; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveProductAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Object</returns>
        public Object Update (string specID, Spec spec)
        {
             ApiResponse<Object> localVarResponse = UpdateWithHttpInfo(specID, spec);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateWithHttpInfo (string specID, Spec spec)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->Update");
            // verify the required parameter 'spec' is set
            if (spec == null)
                throw new ApiException(400, "Missing required parameter 'spec' when calling SpecApi->Update");

            var localVarPath = "/specs/{specID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (spec != null && spec.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(spec); // http body (model) parameter
            }
            else
            {
                localVarPostBody = spec; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAsync (string specID, Spec spec)
        {
             ApiResponse<Object> localVarResponse = await UpdateAsyncWithHttpInfo(specID, spec);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="spec"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string specID, Spec spec)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->Update");
            // verify the required parameter 'spec' is set
            if (spec == null)
                throw new ApiException(400, "Missing required parameter 'spec' when calling SpecApi->Update");

            var localVarPath = "/specs/{specID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (spec != null && spec.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(spec); // http body (model) parameter
            }
            else
            {
                localVarPostBody = spec; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Object</returns>
        public Object UpdateOption (string specID, string optionID, SpecOption option)
        {
             ApiResponse<Object> localVarResponse = UpdateOptionWithHttpInfo(specID, optionID, option);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateOptionWithHttpInfo (string specID, string optionID, SpecOption option)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->UpdateOption");
            // verify the required parameter 'optionID' is set
            if (optionID == null)
                throw new ApiException(400, "Missing required parameter 'optionID' when calling SpecApi->UpdateOption");
            // verify the required parameter 'option' is set
            if (option == null)
                throw new ApiException(400, "Missing required parameter 'option' when calling SpecApi->UpdateOption");

            var localVarPath = "/specs/{specID}/options/{optionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (optionID != null) localVarPathParams.Add("optionID", Configuration.ApiClient.ParameterToString(optionID)); // path parameter
            if (option != null && option.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(option); // http body (model) parameter
            }
            else
            {
                localVarPostBody = option; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateOptionAsync (string specID, string optionID, SpecOption option)
        {
             ApiResponse<Object> localVarResponse = await UpdateOptionAsyncWithHttpInfo(specID, optionID, option);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specID">ID of the spec.</param>
        /// <param name="optionID">ID of the option.</param>
        /// <param name="option"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOptionAsyncWithHttpInfo (string specID, string optionID, SpecOption option)
        {
            // verify the required parameter 'specID' is set
            if (specID == null)
                throw new ApiException(400, "Missing required parameter 'specID' when calling SpecApi->UpdateOption");
            // verify the required parameter 'optionID' is set
            if (optionID == null)
                throw new ApiException(400, "Missing required parameter 'optionID' when calling SpecApi->UpdateOption");
            // verify the required parameter 'option' is set
            if (option == null)
                throw new ApiException(400, "Missing required parameter 'option' when calling SpecApi->UpdateOption");

            var localVarPath = "/specs/{specID}/options/{optionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (specID != null) localVarPathParams.Add("specID", Configuration.ApiClient.ParameterToString(specID)); // path parameter
            if (optionID != null) localVarPathParams.Add("optionID", Configuration.ApiClient.ParameterToString(optionID)); // path parameter
            if (option != null && option.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(option); // http body (model) parameter
            }
            else
            {
                localVarPostBody = option; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

    }
}
