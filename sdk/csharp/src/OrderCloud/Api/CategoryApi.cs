/* 
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OrderCloud.Client;
using OrderCloud.Model;

namespace OrderCloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="category"></param>
        /// <returns>Object</returns>
        Object Create (string buyerID, Category category);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="category"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateWithHttpInfo (string buyerID, Category category);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns></returns>
        void Delete (string buyerID, string categoryID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string buyerID, string categoryID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <returns></returns>
        void DeleteAssignment (string buyerID, string categoryID, string userID = null, string userGroupID = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAssignmentWithHttpInfo (string buyerID, string categoryID, string userID = null, string userGroupID = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns></returns>
        void DeleteProductAssignment (string buyerID, string categoryID, string productID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductAssignmentWithHttpInfo (string buyerID, string categoryID, string productID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>Object</returns>
        Object Get (string buyerID, string categoryID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetWithHttpInfo (string buyerID, string categoryID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object List (string buyerID, string parentID = null, string depth = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListWithHttpInfo (string buyerID, string parentID = null, string depth = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <param name="level">Level of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object ListAssignments (string buyerID, string categoryID = null, string userID = null, string userGroupID = null, string level = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <param name="level">Level of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListAssignmentsWithHttpInfo (string buyerID, string categoryID = null, string userID = null, string userGroupID = null, string level = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object ListChildren (string buyerID, string parentID, string search = null, string depth = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListChildrenWithHttpInfo (string buyerID, string parentID, string search = null, string depth = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        Object ListProductAssignments (string buyerID, string categoryID = null, string productID = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListProductAssignmentsWithHttpInfo (string buyerID, string categoryID = null, string productID = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns></returns>
        void Patch (string buyerID, string categoryID, Category category);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchWithHttpInfo (string buyerID, string categoryID, Category category);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryAssignment"></param>
        /// <returns></returns>
        void SaveAssignment (string buyerID, CategoryAssignment categoryAssignment);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryAssignment"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveAssignmentWithHttpInfo (string buyerID, CategoryAssignment categoryAssignment);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="productAssignment"></param>
        /// <returns></returns>
        void SaveProductAssignment (string buyerID, CategoryProductAssignment productAssignment);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="productAssignment"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveProductAssignmentWithHttpInfo (string buyerID, CategoryProductAssignment productAssignment);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>Object</returns>
        Object Update (string buyerID, string categoryID, Category category);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateWithHttpInfo (string buyerID, string categoryID, Category category);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="category"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateAsync (string buyerID, Category category);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="category"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (string buyerID, Category category);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string buyerID, string categoryID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string buyerID, string categoryID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAssignmentAsync (string buyerID, string categoryID, string userID = null, string userGroupID = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssignmentAsyncWithHttpInfo (string buyerID, string categoryID, string userID = null, string userGroupID = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductAssignmentAsync (string buyerID, string categoryID, string productID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductAssignmentAsyncWithHttpInfo (string buyerID, string categoryID, string productID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAsync (string buyerID, string categoryID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAsyncWithHttpInfo (string buyerID, string categoryID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListAsync (string buyerID, string parentID = null, string depth = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListAsyncWithHttpInfo (string buyerID, string parentID = null, string depth = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <param name="level">Level of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListAssignmentsAsync (string buyerID, string categoryID = null, string userID = null, string userGroupID = null, string level = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <param name="level">Level of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListAssignmentsAsyncWithHttpInfo (string buyerID, string categoryID = null, string userID = null, string userGroupID = null, string level = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListChildrenAsync (string buyerID, string parentID, string search = null, string depth = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListChildrenAsyncWithHttpInfo (string buyerID, string parentID, string search = null, string depth = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListProductAssignmentsAsync (string buyerID, string categoryID = null, string productID = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListProductAssignmentsAsyncWithHttpInfo (string buyerID, string categoryID = null, string productID = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchAsync (string buyerID, string categoryID, Category category);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchAsyncWithHttpInfo (string buyerID, string categoryID, Category category);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryAssignment"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveAssignmentAsync (string buyerID, CategoryAssignment categoryAssignment);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryAssignment"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveAssignmentAsyncWithHttpInfo (string buyerID, CategoryAssignment categoryAssignment);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="productAssignment"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveProductAssignmentAsync (string buyerID, CategoryProductAssignment productAssignment);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="productAssignment"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveProductAssignmentAsyncWithHttpInfo (string buyerID, CategoryProductAssignment productAssignment);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAsync (string buyerID, string categoryID, Category category);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string buyerID, string categoryID, Category category);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CategoryApi : ICategoryApi
    {
        private OrderCloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoryApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = OrderCloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CategoryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OrderCloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OrderCloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="category"></param>
        /// <returns>Object</returns>
        public Object Create (string buyerID, Category category)
        {
             ApiResponse<Object> localVarResponse = CreateWithHttpInfo(buyerID, category);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="category"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateWithHttpInfo (string buyerID, Category category)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->Create");
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling CategoryApi->Create");

            var localVarPath = "/buyers/{buyerID}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (category != null && category.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(category); // http body (model) parameter
            }
            else
            {
                localVarPostBody = category; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="category"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateAsync (string buyerID, Category category)
        {
             ApiResponse<Object> localVarResponse = await CreateAsyncWithHttpInfo(buyerID, category);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="category"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (string buyerID, Category category)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->Create");
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling CategoryApi->Create");

            var localVarPath = "/buyers/{buyerID}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (category != null && category.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(category); // http body (model) parameter
            }
            else
            {
                localVarPostBody = category; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns></returns>
        public void Delete (string buyerID, string categoryID)
        {
             DeleteWithHttpInfo(buyerID, categoryID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string buyerID, string categoryID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->Delete");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->Delete");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string buyerID, string categoryID)
        {
             await DeleteAsyncWithHttpInfo(buyerID, categoryID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string buyerID, string categoryID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->Delete");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->Delete");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <returns></returns>
        public void DeleteAssignment (string buyerID, string categoryID, string userID = null, string userGroupID = null)
        {
             DeleteAssignmentWithHttpInfo(buyerID, categoryID, userID, userGroupID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAssignmentWithHttpInfo (string buyerID, string categoryID, string userID = null, string userGroupID = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->DeleteAssignment");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->DeleteAssignment");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter
            if (userID != null) localVarQueryParams.Add("userID", Configuration.ApiClient.ParameterToString(userID)); // query parameter
            if (userGroupID != null) localVarQueryParams.Add("userGroupID", Configuration.ApiClient.ParameterToString(userGroupID)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAssignmentAsync (string buyerID, string categoryID, string userID = null, string userGroupID = null)
        {
             await DeleteAssignmentAsyncWithHttpInfo(buyerID, categoryID, userID, userGroupID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssignmentAsyncWithHttpInfo (string buyerID, string categoryID, string userID = null, string userGroupID = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->DeleteAssignment");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->DeleteAssignment");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter
            if (userID != null) localVarQueryParams.Add("userID", Configuration.ApiClient.ParameterToString(userID)); // query parameter
            if (userGroupID != null) localVarQueryParams.Add("userGroupID", Configuration.ApiClient.ParameterToString(userGroupID)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns></returns>
        public void DeleteProductAssignment (string buyerID, string categoryID, string productID)
        {
             DeleteProductAssignmentWithHttpInfo(buyerID, categoryID, productID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProductAssignmentWithHttpInfo (string buyerID, string categoryID, string productID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->DeleteProductAssignment");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->DeleteProductAssignment");
            // verify the required parameter 'productID' is set
            if (productID == null)
                throw new ApiException(400, "Missing required parameter 'productID' when calling CategoryApi->DeleteProductAssignment");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}/productassignments/{productID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter
            if (productID != null) localVarPathParams.Add("productID", Configuration.ApiClient.ParameterToString(productID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductAssignmentAsync (string buyerID, string categoryID, string productID)
        {
             await DeleteProductAssignmentAsyncWithHttpInfo(buyerID, categoryID, productID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="productID">ID of the product.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductAssignmentAsyncWithHttpInfo (string buyerID, string categoryID, string productID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->DeleteProductAssignment");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->DeleteProductAssignment");
            // verify the required parameter 'productID' is set
            if (productID == null)
                throw new ApiException(400, "Missing required parameter 'productID' when calling CategoryApi->DeleteProductAssignment");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}/productassignments/{productID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter
            if (productID != null) localVarPathParams.Add("productID", Configuration.ApiClient.ParameterToString(productID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>Object</returns>
        public Object Get (string buyerID, string categoryID)
        {
             ApiResponse<Object> localVarResponse = GetWithHttpInfo(buyerID, categoryID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetWithHttpInfo (string buyerID, string categoryID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->Get");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->Get");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAsync (string buyerID, string categoryID)
        {
             ApiResponse<Object> localVarResponse = await GetAsyncWithHttpInfo(buyerID, categoryID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAsyncWithHttpInfo (string buyerID, string categoryID)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->Get");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->Get");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object List (string buyerID, string parentID = null, string depth = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListWithHttpInfo(buyerID, parentID, depth, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListWithHttpInfo (string buyerID, string parentID = null, string depth = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->List");

            var localVarPath = "/buyers/{buyerID}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (parentID != null) localVarQueryParams.Add("parentID", Configuration.ApiClient.ParameterToString(parentID)); // query parameter
            if (depth != null) localVarQueryParams.Add("depth", Configuration.ApiClient.ParameterToString(depth)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListAsync (string buyerID, string parentID = null, string depth = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListAsyncWithHttpInfo(buyerID, parentID, depth, search, searchOn, sortBy, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="searchOn">Comma-delimited list of fields to search on. (optional)</param>
        /// <param name="sortBy">Comma-delimited list of fields to sort by. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListAsyncWithHttpInfo (string buyerID, string parentID = null, string depth = null, string search = null, string searchOn = null, string sortBy = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->List");

            var localVarPath = "/buyers/{buyerID}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (parentID != null) localVarQueryParams.Add("parentID", Configuration.ApiClient.ParameterToString(parentID)); // query parameter
            if (depth != null) localVarQueryParams.Add("depth", Configuration.ApiClient.ParameterToString(depth)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (searchOn != null) localVarQueryParams.Add("searchOn", Configuration.ApiClient.ParameterToString(searchOn)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <param name="level">Level of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object ListAssignments (string buyerID, string categoryID = null, string userID = null, string userGroupID = null, string level = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListAssignmentsWithHttpInfo(buyerID, categoryID, userID, userGroupID, level, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <param name="level">Level of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListAssignmentsWithHttpInfo (string buyerID, string categoryID = null, string userID = null, string userGroupID = null, string level = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->ListAssignments");

            var localVarPath = "/buyers/{buyerID}/categories/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarQueryParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // query parameter
            if (userID != null) localVarQueryParams.Add("userID", Configuration.ApiClient.ParameterToString(userID)); // query parameter
            if (userGroupID != null) localVarQueryParams.Add("userGroupID", Configuration.ApiClient.ParameterToString(userGroupID)); // query parameter
            if (level != null) localVarQueryParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <param name="level">Level of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListAssignmentsAsync (string buyerID, string categoryID = null, string userID = null, string userGroupID = null, string level = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListAssignmentsAsyncWithHttpInfo(buyerID, categoryID, userID, userGroupID, level, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="userID">ID of the user. (optional)</param>
        /// <param name="userGroupID">ID of the user group. (optional)</param>
        /// <param name="level">Level of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListAssignmentsAsyncWithHttpInfo (string buyerID, string categoryID = null, string userID = null, string userGroupID = null, string level = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->ListAssignments");

            var localVarPath = "/buyers/{buyerID}/categories/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarQueryParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // query parameter
            if (userID != null) localVarQueryParams.Add("userID", Configuration.ApiClient.ParameterToString(userID)); // query parameter
            if (userGroupID != null) localVarQueryParams.Add("userGroupID", Configuration.ApiClient.ParameterToString(userGroupID)); // query parameter
            if (level != null) localVarQueryParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object ListChildren (string buyerID, string parentID, string search = null, string depth = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListChildrenWithHttpInfo(buyerID, parentID, search, depth, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListChildrenWithHttpInfo (string buyerID, string parentID, string search = null, string depth = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->ListChildren");
            // verify the required parameter 'parentID' is set
            if (parentID == null)
                throw new ApiException(400, "Missing required parameter 'parentID' when calling CategoryApi->ListChildren");

            var localVarPath = "/buyers/{buyerID}/categories/{parentID}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (parentID != null) localVarPathParams.Add("parentID", Configuration.ApiClient.ParameterToString(parentID)); // path parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (depth != null) localVarQueryParams.Add("depth", Configuration.ApiClient.ParameterToString(depth)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListChildrenAsync (string buyerID, string parentID, string search = null, string depth = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListChildrenAsyncWithHttpInfo(buyerID, parentID, search, depth, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="parentID">ID of the parent.</param>
        /// <param name="search">Word or phrase to search for. (optional)</param>
        /// <param name="depth">Depth of the category. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListChildrenAsyncWithHttpInfo (string buyerID, string parentID, string search = null, string depth = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->ListChildren");
            // verify the required parameter 'parentID' is set
            if (parentID == null)
                throw new ApiException(400, "Missing required parameter 'parentID' when calling CategoryApi->ListChildren");

            var localVarPath = "/buyers/{buyerID}/categories/{parentID}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (parentID != null) localVarPathParams.Add("parentID", Configuration.ApiClient.ParameterToString(parentID)); // path parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (depth != null) localVarQueryParams.Add("depth", Configuration.ApiClient.ParameterToString(depth)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Object</returns>
        public Object ListProductAssignments (string buyerID, string categoryID = null, string productID = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = ListProductAssignmentsWithHttpInfo(buyerID, categoryID, productID, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ListProductAssignmentsWithHttpInfo (string buyerID, string categoryID = null, string productID = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->ListProductAssignments");

            var localVarPath = "/buyers/{buyerID}/categories/productassignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarQueryParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // query parameter
            if (productID != null) localVarQueryParams.Add("productID", Configuration.ApiClient.ParameterToString(productID)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProductAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListProductAssignmentsAsync (string buyerID, string categoryID = null, string productID = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<Object> localVarResponse = await ListProductAssignmentsAsyncWithHttpInfo(buyerID, categoryID, productID, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category. (optional)</param>
        /// <param name="productID">ID of the product. (optional)</param>
        /// <param name="page">Page of results to return. Default: 1 (optional)</param>
        /// <param name="pageSize">Number of results to return per page. Default: 20, max: 100. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListProductAssignmentsAsyncWithHttpInfo (string buyerID, string categoryID = null, string productID = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->ListProductAssignments");

            var localVarPath = "/buyers/{buyerID}/categories/productassignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarQueryParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // query parameter
            if (productID != null) localVarQueryParams.Add("productID", Configuration.ApiClient.ParameterToString(productID)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProductAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns></returns>
        public void Patch (string buyerID, string categoryID, Category category)
        {
             PatchWithHttpInfo(buyerID, categoryID, category);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchWithHttpInfo (string buyerID, string categoryID, Category category)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->Patch");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->Patch");
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling CategoryApi->Patch");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter
            if (category != null && category.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(category); // http body (model) parameter
            }
            else
            {
                localVarPostBody = category; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Patch", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchAsync (string buyerID, string categoryID, Category category)
        {
             await PatchAsyncWithHttpInfo(buyerID, categoryID, category);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchAsyncWithHttpInfo (string buyerID, string categoryID, Category category)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->Patch");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->Patch");
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling CategoryApi->Patch");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter
            if (category != null && category.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(category); // http body (model) parameter
            }
            else
            {
                localVarPostBody = category; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Patch", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryAssignment"></param>
        /// <returns></returns>
        public void SaveAssignment (string buyerID, CategoryAssignment categoryAssignment)
        {
             SaveAssignmentWithHttpInfo(buyerID, categoryAssignment);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryAssignment"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SaveAssignmentWithHttpInfo (string buyerID, CategoryAssignment categoryAssignment)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->SaveAssignment");
            // verify the required parameter 'categoryAssignment' is set
            if (categoryAssignment == null)
                throw new ApiException(400, "Missing required parameter 'categoryAssignment' when calling CategoryApi->SaveAssignment");

            var localVarPath = "/buyers/{buyerID}/categories/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryAssignment != null && categoryAssignment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(categoryAssignment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = categoryAssignment; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryAssignment"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveAssignmentAsync (string buyerID, CategoryAssignment categoryAssignment)
        {
             await SaveAssignmentAsyncWithHttpInfo(buyerID, categoryAssignment);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryAssignment"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SaveAssignmentAsyncWithHttpInfo (string buyerID, CategoryAssignment categoryAssignment)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->SaveAssignment");
            // verify the required parameter 'categoryAssignment' is set
            if (categoryAssignment == null)
                throw new ApiException(400, "Missing required parameter 'categoryAssignment' when calling CategoryApi->SaveAssignment");

            var localVarPath = "/buyers/{buyerID}/categories/assignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryAssignment != null && categoryAssignment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(categoryAssignment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = categoryAssignment; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="productAssignment"></param>
        /// <returns></returns>
        public void SaveProductAssignment (string buyerID, CategoryProductAssignment productAssignment)
        {
             SaveProductAssignmentWithHttpInfo(buyerID, productAssignment);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="productAssignment"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SaveProductAssignmentWithHttpInfo (string buyerID, CategoryProductAssignment productAssignment)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->SaveProductAssignment");
            // verify the required parameter 'productAssignment' is set
            if (productAssignment == null)
                throw new ApiException(400, "Missing required parameter 'productAssignment' when calling CategoryApi->SaveProductAssignment");

            var localVarPath = "/buyers/{buyerID}/categories/productassignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (productAssignment != null && productAssignment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(productAssignment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = productAssignment; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveProductAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="productAssignment"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveProductAssignmentAsync (string buyerID, CategoryProductAssignment productAssignment)
        {
             await SaveProductAssignmentAsyncWithHttpInfo(buyerID, productAssignment);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="productAssignment"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SaveProductAssignmentAsyncWithHttpInfo (string buyerID, CategoryProductAssignment productAssignment)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->SaveProductAssignment");
            // verify the required parameter 'productAssignment' is set
            if (productAssignment == null)
                throw new ApiException(400, "Missing required parameter 'productAssignment' when calling CategoryApi->SaveProductAssignment");

            var localVarPath = "/buyers/{buyerID}/categories/productassignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (productAssignment != null && productAssignment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(productAssignment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = productAssignment; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveProductAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>Object</returns>
        public Object Update (string buyerID, string categoryID, Category category)
        {
             ApiResponse<Object> localVarResponse = UpdateWithHttpInfo(buyerID, categoryID, category);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateWithHttpInfo (string buyerID, string categoryID, Category category)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->Update");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->Update");
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling CategoryApi->Update");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter
            if (category != null && category.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(category); // http body (model) parameter
            }
            else
            {
                localVarPostBody = category; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAsync (string buyerID, string categoryID, Category category)
        {
             ApiResponse<Object> localVarResponse = await UpdateAsyncWithHttpInfo(buyerID, categoryID, category);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OrderCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyerID">ID of the buyer.</param>
        /// <param name="categoryID">ID of the category.</param>
        /// <param name="category"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string buyerID, string categoryID, Category category)
        {
            // verify the required parameter 'buyerID' is set
            if (buyerID == null)
                throw new ApiException(400, "Missing required parameter 'buyerID' when calling CategoryApi->Update");
            // verify the required parameter 'categoryID' is set
            if (categoryID == null)
                throw new ApiException(400, "Missing required parameter 'categoryID' when calling CategoryApi->Update");
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling CategoryApi->Update");

            var localVarPath = "/buyers/{buyerID}/categories/{categoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (buyerID != null) localVarPathParams.Add("buyerID", Configuration.ApiClient.ParameterToString(buyerID)); // path parameter
            if (categoryID != null) localVarPathParams.Add("categoryID", Configuration.ApiClient.ParameterToString(categoryID)); // path parameter
            if (category != null && category.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(category); // http body (model) parameter
            }
            else
            {
                localVarPostBody = category; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

    }
}
