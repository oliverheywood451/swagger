/* 
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace OrderCloud.Model
{
    /// <summary>
    /// SpecProductAssignment
    /// </summary>
    [DataContract]
    public partial class SpecProductAssignment :  IEquatable<SpecProductAssignment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecProductAssignment" /> class.
        /// </summary>
        /// <param name="SpecID">SpecID.</param>
        /// <param name="ProductID">ProductID.</param>
        /// <param name="DefinesVariant">DefinesVariant.</param>
        public SpecProductAssignment(string SpecID = null, string ProductID = null, bool? DefinesVariant = null)
        {
            this.SpecID = SpecID;
            this.ProductID = ProductID;
            this.DefinesVariant = DefinesVariant;
        }
        
        /// <summary>
        /// Gets or Sets SpecID
        /// </summary>
        [DataMember(Name="SpecID", EmitDefaultValue=false)]
        public string SpecID { get; set; }
        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="ProductID", EmitDefaultValue=false)]
        public string ProductID { get; set; }
        /// <summary>
        /// Gets or Sets DefinesVariant
        /// </summary>
        [DataMember(Name="DefinesVariant", EmitDefaultValue=false)]
        public bool? DefinesVariant { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpecProductAssignment {\n");
            sb.Append("  SpecID: ").Append(SpecID).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  DefinesVariant: ").Append(DefinesVariant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SpecProductAssignment);
        }

        /// <summary>
        /// Returns true if SpecProductAssignment instances are equal
        /// </summary>
        /// <param name="other">Instance of SpecProductAssignment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecProductAssignment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SpecID == other.SpecID ||
                    this.SpecID != null &&
                    this.SpecID.Equals(other.SpecID)
                ) && 
                (
                    this.ProductID == other.ProductID ||
                    this.ProductID != null &&
                    this.ProductID.Equals(other.ProductID)
                ) && 
                (
                    this.DefinesVariant == other.DefinesVariant ||
                    this.DefinesVariant != null &&
                    this.DefinesVariant.Equals(other.DefinesVariant)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SpecID != null)
                    hash = hash * 59 + this.SpecID.GetHashCode();
                if (this.ProductID != null)
                    hash = hash * 59 + this.ProductID.GetHashCode();
                if (this.DefinesVariant != null)
                    hash = hash * 59 + this.DefinesVariant.GetHashCode();
                return hash;
            }
        }
    }

}
