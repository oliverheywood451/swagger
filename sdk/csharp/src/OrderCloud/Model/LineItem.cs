/* 
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace OrderCloud.Model
{
    /// <summary>
    /// LineItem
    /// </summary>
    [DataContract]
    public partial class LineItem :  IEquatable<LineItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItem" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="ProductID">ProductID.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="UnitPrice">UnitPrice.</param>
        /// <param name="CostCenter">CostCenter.</param>
        /// <param name="DateNeeded">DateNeeded.</param>
        /// <param name="ShippingAccount">ShippingAccount.</param>
        /// <param name="ShippingAddressID">ShippingAddressID.</param>
        /// <param name="ShipfromAddressID">ShipfromAddressID.</param>
        /// <param name="ShipperID">ShipperID.</param>
        /// <param name="Specs">Specs.</param>
        /// <param name="Xp">Xp.</param>
        public LineItem(string ID = null, string ProductID = null, int? Quantity = null, decimal? UnitPrice = null, string CostCenter = null, DateTime? DateNeeded = null, string ShippingAccount = null, string ShippingAddressID = null, string ShipfromAddressID = null, string ShipperID = null, List<ShipmentItem> Specs = null, Object Xp = null)
        {
            this.ID = ID;
            this.ProductID = ProductID;
            this.Quantity = Quantity;
            this.UnitPrice = UnitPrice;
            this.CostCenter = CostCenter;
            this.DateNeeded = DateNeeded;
            this.ShippingAccount = ShippingAccount;
            this.ShippingAddressID = ShippingAddressID;
            this.ShipfromAddressID = ShipfromAddressID;
            this.ShipperID = ShipperID;
            this.Specs = Specs;
            this.Xp = Xp;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }
        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="ProductID", EmitDefaultValue=false)]
        public string ProductID { get; set; }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="UnitPrice", EmitDefaultValue=false)]
        public decimal? UnitPrice { get; set; }
        /// <summary>
        /// Gets or Sets CostCenter
        /// </summary>
        [DataMember(Name="CostCenter", EmitDefaultValue=false)]
        public string CostCenter { get; set; }
        /// <summary>
        /// Gets or Sets DateNeeded
        /// </summary>
        [DataMember(Name="DateNeeded", EmitDefaultValue=false)]
        public DateTime? DateNeeded { get; set; }
        /// <summary>
        /// Gets or Sets ShippingAccount
        /// </summary>
        [DataMember(Name="ShippingAccount", EmitDefaultValue=false)]
        public string ShippingAccount { get; set; }
        /// <summary>
        /// Gets or Sets ShippingAddressID
        /// </summary>
        [DataMember(Name="ShippingAddressID", EmitDefaultValue=false)]
        public string ShippingAddressID { get; set; }
        /// <summary>
        /// Gets or Sets ShipfromAddressID
        /// </summary>
        [DataMember(Name="ShipfromAddressID", EmitDefaultValue=false)]
        public string ShipfromAddressID { get; set; }
        /// <summary>
        /// Gets or Sets ShipperID
        /// </summary>
        [DataMember(Name="ShipperID", EmitDefaultValue=false)]
        public string ShipperID { get; set; }
        /// <summary>
        /// Gets or Sets Specs
        /// </summary>
        [DataMember(Name="Specs", EmitDefaultValue=false)]
        public List<ShipmentItem> Specs { get; set; }
        /// <summary>
        /// Gets or Sets Xp
        /// </summary>
        [DataMember(Name="xp", EmitDefaultValue=false)]
        public Object Xp { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineItem {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  CostCenter: ").Append(CostCenter).Append("\n");
            sb.Append("  DateNeeded: ").Append(DateNeeded).Append("\n");
            sb.Append("  ShippingAccount: ").Append(ShippingAccount).Append("\n");
            sb.Append("  ShippingAddressID: ").Append(ShippingAddressID).Append("\n");
            sb.Append("  ShipfromAddressID: ").Append(ShipfromAddressID).Append("\n");
            sb.Append("  ShipperID: ").Append(ShipperID).Append("\n");
            sb.Append("  Specs: ").Append(Specs).Append("\n");
            sb.Append("  Xp: ").Append(Xp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LineItem);
        }

        /// <summary>
        /// Returns true if LineItem instances are equal
        /// </summary>
        /// <param name="other">Instance of LineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.ProductID == other.ProductID ||
                    this.ProductID != null &&
                    this.ProductID.Equals(other.ProductID)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.UnitPrice == other.UnitPrice ||
                    this.UnitPrice != null &&
                    this.UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    this.CostCenter == other.CostCenter ||
                    this.CostCenter != null &&
                    this.CostCenter.Equals(other.CostCenter)
                ) && 
                (
                    this.DateNeeded == other.DateNeeded ||
                    this.DateNeeded != null &&
                    this.DateNeeded.Equals(other.DateNeeded)
                ) && 
                (
                    this.ShippingAccount == other.ShippingAccount ||
                    this.ShippingAccount != null &&
                    this.ShippingAccount.Equals(other.ShippingAccount)
                ) && 
                (
                    this.ShippingAddressID == other.ShippingAddressID ||
                    this.ShippingAddressID != null &&
                    this.ShippingAddressID.Equals(other.ShippingAddressID)
                ) && 
                (
                    this.ShipfromAddressID == other.ShipfromAddressID ||
                    this.ShipfromAddressID != null &&
                    this.ShipfromAddressID.Equals(other.ShipfromAddressID)
                ) && 
                (
                    this.ShipperID == other.ShipperID ||
                    this.ShipperID != null &&
                    this.ShipperID.Equals(other.ShipperID)
                ) && 
                (
                    this.Specs == other.Specs ||
                    this.Specs != null &&
                    this.Specs.SequenceEqual(other.Specs)
                ) && 
                (
                    this.Xp == other.Xp ||
                    this.Xp != null &&
                    this.Xp.Equals(other.Xp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.ProductID != null)
                    hash = hash * 59 + this.ProductID.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.UnitPrice != null)
                    hash = hash * 59 + this.UnitPrice.GetHashCode();
                if (this.CostCenter != null)
                    hash = hash * 59 + this.CostCenter.GetHashCode();
                if (this.DateNeeded != null)
                    hash = hash * 59 + this.DateNeeded.GetHashCode();
                if (this.ShippingAccount != null)
                    hash = hash * 59 + this.ShippingAccount.GetHashCode();
                if (this.ShippingAddressID != null)
                    hash = hash * 59 + this.ShippingAddressID.GetHashCode();
                if (this.ShipfromAddressID != null)
                    hash = hash * 59 + this.ShipfromAddressID.GetHashCode();
                if (this.ShipperID != null)
                    hash = hash * 59 + this.ShipperID.GetHashCode();
                if (this.Specs != null)
                    hash = hash * 59 + this.Specs.GetHashCode();
                if (this.Xp != null)
                    hash = hash * 59 + this.Xp.GetHashCode();
                return hash;
            }
        }
    }

}
