/* 
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace OrderCloud.Model
{
    /// <summary>
    /// SpecOption
    /// </summary>
    [DataContract]
    public partial class SpecOption :  IEquatable<SpecOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecOption" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="Value">Value.</param>
        /// <param name="ListOrder">ListOrder.</param>
        /// <param name="IsOpenText">IsOpenText.</param>
        /// <param name="PriceMarkupType">PriceMarkupType.</param>
        /// <param name="PriceMarkup">PriceMarkup.</param>
        /// <param name="Xp">Xp.</param>
        public SpecOption(string ID = null, string Value = null, int? ListOrder = null, bool? IsOpenText = null, string PriceMarkupType = null, decimal? PriceMarkup = null, Object Xp = null)
        {
            this.ID = ID;
            this.Value = Value;
            this.ListOrder = ListOrder;
            this.IsOpenText = IsOpenText;
            this.PriceMarkupType = PriceMarkupType;
            this.PriceMarkup = PriceMarkup;
            this.Xp = Xp;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="Value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Gets or Sets ListOrder
        /// </summary>
        [DataMember(Name="ListOrder", EmitDefaultValue=false)]
        public int? ListOrder { get; set; }
        /// <summary>
        /// Gets or Sets IsOpenText
        /// </summary>
        [DataMember(Name="IsOpenText", EmitDefaultValue=false)]
        public bool? IsOpenText { get; set; }
        /// <summary>
        /// Gets or Sets PriceMarkupType
        /// </summary>
        [DataMember(Name="PriceMarkupType", EmitDefaultValue=false)]
        public string PriceMarkupType { get; set; }
        /// <summary>
        /// Gets or Sets PriceMarkup
        /// </summary>
        [DataMember(Name="PriceMarkup", EmitDefaultValue=false)]
        public decimal? PriceMarkup { get; set; }
        /// <summary>
        /// Gets or Sets Xp
        /// </summary>
        [DataMember(Name="xp", EmitDefaultValue=false)]
        public Object Xp { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpecOption {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ListOrder: ").Append(ListOrder).Append("\n");
            sb.Append("  IsOpenText: ").Append(IsOpenText).Append("\n");
            sb.Append("  PriceMarkupType: ").Append(PriceMarkupType).Append("\n");
            sb.Append("  PriceMarkup: ").Append(PriceMarkup).Append("\n");
            sb.Append("  Xp: ").Append(Xp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SpecOption);
        }

        /// <summary>
        /// Returns true if SpecOption instances are equal
        /// </summary>
        /// <param name="other">Instance of SpecOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecOption other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.ListOrder == other.ListOrder ||
                    this.ListOrder != null &&
                    this.ListOrder.Equals(other.ListOrder)
                ) && 
                (
                    this.IsOpenText == other.IsOpenText ||
                    this.IsOpenText != null &&
                    this.IsOpenText.Equals(other.IsOpenText)
                ) && 
                (
                    this.PriceMarkupType == other.PriceMarkupType ||
                    this.PriceMarkupType != null &&
                    this.PriceMarkupType.Equals(other.PriceMarkupType)
                ) && 
                (
                    this.PriceMarkup == other.PriceMarkup ||
                    this.PriceMarkup != null &&
                    this.PriceMarkup.Equals(other.PriceMarkup)
                ) && 
                (
                    this.Xp == other.Xp ||
                    this.Xp != null &&
                    this.Xp.Equals(other.Xp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.ListOrder != null)
                    hash = hash * 59 + this.ListOrder.GetHashCode();
                if (this.IsOpenText != null)
                    hash = hash * 59 + this.IsOpenText.GetHashCode();
                if (this.PriceMarkupType != null)
                    hash = hash * 59 + this.PriceMarkupType.GetHashCode();
                if (this.PriceMarkup != null)
                    hash = hash * 59 + this.PriceMarkup.GetHashCode();
                if (this.Xp != null)
                    hash = hash * 59 + this.Xp.GetHashCode();
                return hash;
            }
        }
    }

}
