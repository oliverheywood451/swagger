/* 
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace OrderCloud.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract]
    public partial class Product :  IEquatable<Product>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="QuantityMultiplier">QuantityMultiplier.</param>
        /// <param name="ShipWeight">ShipWeight.</param>
        /// <param name="Active">Active.</param>
        /// <param name="Type">Type.</param>
        /// <param name="InventoryEnabled">InventoryEnabled.</param>
        /// <param name="InventoryNotificationPoint">InventoryNotificationPoint.</param>
        /// <param name="VariantLevelInventory">VariantLevelInventory.</param>
        /// <param name="Xp">Xp.</param>
        /// <param name="AllowOrderExceedInventory">AllowOrderExceedInventory.</param>
        /// <param name="InventoryVisible">InventoryVisible.</param>
        public Product(string ID = null, string Name = null, string Description = null, int? QuantityMultiplier = null, decimal? ShipWeight = null, bool? Active = null, string Type = null, bool? InventoryEnabled = null, int? InventoryNotificationPoint = null, bool? VariantLevelInventory = null, Object Xp = null, bool? AllowOrderExceedInventory = null, bool? InventoryVisible = null)
        {
            this.ID = ID;
            this.Name = Name;
            this.Description = Description;
            this.QuantityMultiplier = QuantityMultiplier;
            this.ShipWeight = ShipWeight;
            this.Active = Active;
            this.Type = Type;
            this.InventoryEnabled = InventoryEnabled;
            this.InventoryNotificationPoint = InventoryNotificationPoint;
            this.VariantLevelInventory = VariantLevelInventory;
            this.Xp = Xp;
            this.AllowOrderExceedInventory = AllowOrderExceedInventory;
            this.InventoryVisible = InventoryVisible;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets QuantityMultiplier
        /// </summary>
        [DataMember(Name="QuantityMultiplier", EmitDefaultValue=false)]
        public int? QuantityMultiplier { get; set; }
        /// <summary>
        /// Gets or Sets ShipWeight
        /// </summary>
        [DataMember(Name="ShipWeight", EmitDefaultValue=false)]
        public decimal? ShipWeight { get; set; }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=false)]
        public bool? Active { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets InventoryEnabled
        /// </summary>
        [DataMember(Name="InventoryEnabled", EmitDefaultValue=false)]
        public bool? InventoryEnabled { get; set; }
        /// <summary>
        /// Gets or Sets InventoryNotificationPoint
        /// </summary>
        [DataMember(Name="InventoryNotificationPoint", EmitDefaultValue=false)]
        public int? InventoryNotificationPoint { get; set; }
        /// <summary>
        /// Gets or Sets VariantLevelInventory
        /// </summary>
        [DataMember(Name="VariantLevelInventory", EmitDefaultValue=false)]
        public bool? VariantLevelInventory { get; set; }
        /// <summary>
        /// Gets or Sets Xp
        /// </summary>
        [DataMember(Name="xp", EmitDefaultValue=false)]
        public Object Xp { get; set; }
        /// <summary>
        /// Gets or Sets AllowOrderExceedInventory
        /// </summary>
        [DataMember(Name="AllowOrderExceedInventory", EmitDefaultValue=false)]
        public bool? AllowOrderExceedInventory { get; set; }
        /// <summary>
        /// Gets or Sets InventoryVisible
        /// </summary>
        [DataMember(Name="InventoryVisible", EmitDefaultValue=false)]
        public bool? InventoryVisible { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  QuantityMultiplier: ").Append(QuantityMultiplier).Append("\n");
            sb.Append("  ShipWeight: ").Append(ShipWeight).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  InventoryEnabled: ").Append(InventoryEnabled).Append("\n");
            sb.Append("  InventoryNotificationPoint: ").Append(InventoryNotificationPoint).Append("\n");
            sb.Append("  VariantLevelInventory: ").Append(VariantLevelInventory).Append("\n");
            sb.Append("  Xp: ").Append(Xp).Append("\n");
            sb.Append("  AllowOrderExceedInventory: ").Append(AllowOrderExceedInventory).Append("\n");
            sb.Append("  InventoryVisible: ").Append(InventoryVisible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="other">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.QuantityMultiplier == other.QuantityMultiplier ||
                    this.QuantityMultiplier != null &&
                    this.QuantityMultiplier.Equals(other.QuantityMultiplier)
                ) && 
                (
                    this.ShipWeight == other.ShipWeight ||
                    this.ShipWeight != null &&
                    this.ShipWeight.Equals(other.ShipWeight)
                ) && 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.InventoryEnabled == other.InventoryEnabled ||
                    this.InventoryEnabled != null &&
                    this.InventoryEnabled.Equals(other.InventoryEnabled)
                ) && 
                (
                    this.InventoryNotificationPoint == other.InventoryNotificationPoint ||
                    this.InventoryNotificationPoint != null &&
                    this.InventoryNotificationPoint.Equals(other.InventoryNotificationPoint)
                ) && 
                (
                    this.VariantLevelInventory == other.VariantLevelInventory ||
                    this.VariantLevelInventory != null &&
                    this.VariantLevelInventory.Equals(other.VariantLevelInventory)
                ) && 
                (
                    this.Xp == other.Xp ||
                    this.Xp != null &&
                    this.Xp.Equals(other.Xp)
                ) && 
                (
                    this.AllowOrderExceedInventory == other.AllowOrderExceedInventory ||
                    this.AllowOrderExceedInventory != null &&
                    this.AllowOrderExceedInventory.Equals(other.AllowOrderExceedInventory)
                ) && 
                (
                    this.InventoryVisible == other.InventoryVisible ||
                    this.InventoryVisible != null &&
                    this.InventoryVisible.Equals(other.InventoryVisible)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.QuantityMultiplier != null)
                    hash = hash * 59 + this.QuantityMultiplier.GetHashCode();
                if (this.ShipWeight != null)
                    hash = hash * 59 + this.ShipWeight.GetHashCode();
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.InventoryEnabled != null)
                    hash = hash * 59 + this.InventoryEnabled.GetHashCode();
                if (this.InventoryNotificationPoint != null)
                    hash = hash * 59 + this.InventoryNotificationPoint.GetHashCode();
                if (this.VariantLevelInventory != null)
                    hash = hash * 59 + this.VariantLevelInventory.GetHashCode();
                if (this.Xp != null)
                    hash = hash * 59 + this.Xp.GetHashCode();
                if (this.AllowOrderExceedInventory != null)
                    hash = hash * 59 + this.AllowOrderExceedInventory.GetHashCode();
                if (this.InventoryVisible != null)
                    hash = hash * 59 + this.InventoryVisible.GetHashCode();
                return hash;
            }
        }
    }

}
