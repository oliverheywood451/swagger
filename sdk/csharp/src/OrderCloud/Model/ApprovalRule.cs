/* 
 * OrderCloud
 *
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace OrderCloud.Model
{
    /// <summary>
    /// ApprovalRule
    /// </summary>
    [DataContract]
    public partial class ApprovalRule :  IEquatable<ApprovalRule>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRule" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="ApprovingGroupID">ApprovingGroupID.</param>
        /// <param name="RuleExpression">RuleExpression.</param>
        /// <param name="Scope">Scope.</param>
        /// <param name="ScopeTimeUnit">ScopeTimeUnit.</param>
        /// <param name="ScopeTimeNumber">ScopeTimeNumber.</param>
        /// <param name="ScopeStartDate">ScopeStartDate.</param>
        /// <param name="ExpireAfterTimeUnit">ExpireAfterTimeUnit.</param>
        /// <param name="ExpireAfterNumber">ExpireAfterNumber.</param>
        /// <param name="ApproveOnExpire">ApproveOnExpire.</param>
        /// <param name="Xp">Xp.</param>
        public ApprovalRule(string ID = null, string Name = null, string Description = null, string ApprovingGroupID = null, string RuleExpression = null, string Scope = null, string ScopeTimeUnit = null, int? ScopeTimeNumber = null, DateTime? ScopeStartDate = null, string ExpireAfterTimeUnit = null, int? ExpireAfterNumber = null, bool? ApproveOnExpire = null, Object Xp = null)
        {
            this.ID = ID;
            this.Name = Name;
            this.Description = Description;
            this.ApprovingGroupID = ApprovingGroupID;
            this.RuleExpression = RuleExpression;
            this.Scope = Scope;
            this.ScopeTimeUnit = ScopeTimeUnit;
            this.ScopeTimeNumber = ScopeTimeNumber;
            this.ScopeStartDate = ScopeStartDate;
            this.ExpireAfterTimeUnit = ExpireAfterTimeUnit;
            this.ExpireAfterNumber = ExpireAfterNumber;
            this.ApproveOnExpire = ApproveOnExpire;
            this.Xp = Xp;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets ApprovingGroupID
        /// </summary>
        [DataMember(Name="ApprovingGroupID", EmitDefaultValue=false)]
        public string ApprovingGroupID { get; set; }
        /// <summary>
        /// Gets or Sets RuleExpression
        /// </summary>
        [DataMember(Name="RuleExpression", EmitDefaultValue=false)]
        public string RuleExpression { get; set; }
        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="Scope", EmitDefaultValue=false)]
        public string Scope { get; set; }
        /// <summary>
        /// Gets or Sets ScopeTimeUnit
        /// </summary>
        [DataMember(Name="ScopeTimeUnit", EmitDefaultValue=false)]
        public string ScopeTimeUnit { get; set; }
        /// <summary>
        /// Gets or Sets ScopeTimeNumber
        /// </summary>
        [DataMember(Name="ScopeTimeNumber", EmitDefaultValue=false)]
        public int? ScopeTimeNumber { get; set; }
        /// <summary>
        /// Gets or Sets ScopeStartDate
        /// </summary>
        [DataMember(Name="ScopeStartDate", EmitDefaultValue=false)]
        public DateTime? ScopeStartDate { get; set; }
        /// <summary>
        /// Gets or Sets ExpireAfterTimeUnit
        /// </summary>
        [DataMember(Name="ExpireAfterTimeUnit", EmitDefaultValue=false)]
        public string ExpireAfterTimeUnit { get; set; }
        /// <summary>
        /// Gets or Sets ExpireAfterNumber
        /// </summary>
        [DataMember(Name="ExpireAfterNumber", EmitDefaultValue=false)]
        public int? ExpireAfterNumber { get; set; }
        /// <summary>
        /// Gets or Sets ApproveOnExpire
        /// </summary>
        [DataMember(Name="ApproveOnExpire", EmitDefaultValue=false)]
        public bool? ApproveOnExpire { get; set; }
        /// <summary>
        /// Gets or Sets Xp
        /// </summary>
        [DataMember(Name="xp", EmitDefaultValue=false)]
        public Object Xp { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApprovalRule {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ApprovingGroupID: ").Append(ApprovingGroupID).Append("\n");
            sb.Append("  RuleExpression: ").Append(RuleExpression).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  ScopeTimeUnit: ").Append(ScopeTimeUnit).Append("\n");
            sb.Append("  ScopeTimeNumber: ").Append(ScopeTimeNumber).Append("\n");
            sb.Append("  ScopeStartDate: ").Append(ScopeStartDate).Append("\n");
            sb.Append("  ExpireAfterTimeUnit: ").Append(ExpireAfterTimeUnit).Append("\n");
            sb.Append("  ExpireAfterNumber: ").Append(ExpireAfterNumber).Append("\n");
            sb.Append("  ApproveOnExpire: ").Append(ApproveOnExpire).Append("\n");
            sb.Append("  Xp: ").Append(Xp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ApprovalRule);
        }

        /// <summary>
        /// Returns true if ApprovalRule instances are equal
        /// </summary>
        /// <param name="other">Instance of ApprovalRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalRule other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ApprovingGroupID == other.ApprovingGroupID ||
                    this.ApprovingGroupID != null &&
                    this.ApprovingGroupID.Equals(other.ApprovingGroupID)
                ) && 
                (
                    this.RuleExpression == other.RuleExpression ||
                    this.RuleExpression != null &&
                    this.RuleExpression.Equals(other.RuleExpression)
                ) && 
                (
                    this.Scope == other.Scope ||
                    this.Scope != null &&
                    this.Scope.Equals(other.Scope)
                ) && 
                (
                    this.ScopeTimeUnit == other.ScopeTimeUnit ||
                    this.ScopeTimeUnit != null &&
                    this.ScopeTimeUnit.Equals(other.ScopeTimeUnit)
                ) && 
                (
                    this.ScopeTimeNumber == other.ScopeTimeNumber ||
                    this.ScopeTimeNumber != null &&
                    this.ScopeTimeNumber.Equals(other.ScopeTimeNumber)
                ) && 
                (
                    this.ScopeStartDate == other.ScopeStartDate ||
                    this.ScopeStartDate != null &&
                    this.ScopeStartDate.Equals(other.ScopeStartDate)
                ) && 
                (
                    this.ExpireAfterTimeUnit == other.ExpireAfterTimeUnit ||
                    this.ExpireAfterTimeUnit != null &&
                    this.ExpireAfterTimeUnit.Equals(other.ExpireAfterTimeUnit)
                ) && 
                (
                    this.ExpireAfterNumber == other.ExpireAfterNumber ||
                    this.ExpireAfterNumber != null &&
                    this.ExpireAfterNumber.Equals(other.ExpireAfterNumber)
                ) && 
                (
                    this.ApproveOnExpire == other.ApproveOnExpire ||
                    this.ApproveOnExpire != null &&
                    this.ApproveOnExpire.Equals(other.ApproveOnExpire)
                ) && 
                (
                    this.Xp == other.Xp ||
                    this.Xp != null &&
                    this.Xp.Equals(other.Xp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ApprovingGroupID != null)
                    hash = hash * 59 + this.ApprovingGroupID.GetHashCode();
                if (this.RuleExpression != null)
                    hash = hash * 59 + this.RuleExpression.GetHashCode();
                if (this.Scope != null)
                    hash = hash * 59 + this.Scope.GetHashCode();
                if (this.ScopeTimeUnit != null)
                    hash = hash * 59 + this.ScopeTimeUnit.GetHashCode();
                if (this.ScopeTimeNumber != null)
                    hash = hash * 59 + this.ScopeTimeNumber.GetHashCode();
                if (this.ScopeStartDate != null)
                    hash = hash * 59 + this.ScopeStartDate.GetHashCode();
                if (this.ExpireAfterTimeUnit != null)
                    hash = hash * 59 + this.ExpireAfterTimeUnit.GetHashCode();
                if (this.ExpireAfterNumber != null)
                    hash = hash * 59 + this.ExpireAfterNumber.GetHashCode();
                if (this.ApproveOnExpire != null)
                    hash = hash * 59 + this.ApproveOnExpire.GetHashCode();
                if (this.Xp != null)
                    hash = hash * 59 + this.Xp.GetHashCode();
                return hash;
            }
        }
    }

}
