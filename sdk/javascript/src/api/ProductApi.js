/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Product', 'model/Variant', 'model/ProductAssignment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Product'), require('../model/Variant'), require('../model/ProductAssignment'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.ProductApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.Product, root.OrderCloud.Variant, root.OrderCloud.ProductAssignment);
  }
}(this, function(ApiClient, Product, Variant, ProductAssignment) {
  'use strict';

  /**
   * Product service.
   * @module api/ProductApi
   * @version 0.1
   */

  /**
   * Constructs a new ProductApi. 
   * @alias module:api/ProductApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/ProductApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {module:api/ProductApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.callDelete = function(productID, callback) {
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling callDelete";
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/products/{productID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/ProductApi~createCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Product} product 
     * @param {module:api/ProductApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.create = function(product, callback) {
      var postBody = product;

      // verify the required parameter 'product' is set
      if (product == undefined || product == null) {
        throw "Missing the required parameter 'product' when calling create";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssignment operation.
     * @callback module:api/ProductApi~deleteAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} productID ID of the product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {module:api/ProductApi~deleteAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAssignment = function(buyerID, productID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling deleteAssignment";
      }

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling deleteAssignment";
      }


      var pathParams = {
        'buyerID': buyerID,
        'productID': productID
      };
      var queryParams = {
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/products/{productID}/assignments/{buyerID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the generateVariants operation.
     * @callback module:api/ProductApi~generateVariantsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overwriteExisting Overwrite existing of the product.
     * @param {module:api/ProductApi~generateVariantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.generateVariants = function(productID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling generateVariants";
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
        'overwriteExisting': opts['overwriteExisting']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}/variants/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/ProductApi~getCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {module:api/ProductApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.get = function(productID, callback) {
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling get";
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventory operation.
     * @callback module:api/ProductApi~getInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {module:api/ProductApi~getInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getInventory = function(productID, callback) {
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling getInventory";
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}/inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariant operation.
     * @callback module:api/ProductApi~getVariantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {String} variantID ID of the variant.
     * @param {module:api/ProductApi~getVariantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getVariant = function(productID, variantID, callback) {
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling getVariant";
      }

      // verify the required parameter 'variantID' is set
      if (variantID == undefined || variantID == null) {
        throw "Missing the required parameter 'variantID' when calling getVariant";
      }


      var pathParams = {
        'productID': productID,
        'variantID': variantID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}/variants/{variantID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantInventory operation.
     * @callback module:api/ProductApi~getVariantInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {String} variantID ID of the variant.
     * @param {module:api/ProductApi~getVariantInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getVariantInventory = function(productID, variantID, callback) {
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling getVariantInventory";
      }

      // verify the required parameter 'variantID' is set
      if (variantID == undefined || variantID == null) {
        throw "Missing the required parameter 'variantID' when calling getVariantInventory";
      }


      var pathParams = {
        'productID': productID,
        'variantID': variantID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}/variants/inventory/{variantID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/ProductApi~listCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Integer} opts.page Page of results to return. Default: 1
     * @param {Integer} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/ProductApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.list = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssignments operation.
     * @callback module:api/ProductApi~listAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.productID ID of the product.
     * @param {String} opts.buyerID ID of the buyer.
     * @param {String} opts.userID ID of the user.
     * @param {String} opts.userGroupID ID of the user group.
     * @param {String} opts.level Level of the product.
     * @param {String} opts.priceScheduleID ID of the price schedule.
     * @param {Integer} opts.page Page of results to return. Default: 1
     * @param {Integer} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/ProductApi~listAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.listAssignments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'productID': opts['productID'],
        'buyerID': opts['buyerID'],
        'userID': opts['userID'],
        'userGroupID': opts['userGroupID'],
        'level': opts['level'],
        'priceScheduleID': opts['priceScheduleID'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listInventory operation.
     * @callback module:api/ProductApi~listInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Integer} opts.page Page of results to return. Default: 1
     * @param {Integer} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/ProductApi~listInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.listInventory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listVariantInventory operation.
     * @callback module:api/ProductApi~listVariantInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Integer} opts.page Page of results to return. Default: 1
     * @param {Integer} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/ProductApi~listVariantInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.listVariantInventory = function(productID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling listVariantInventory";
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}/variants/inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listVariants operation.
     * @callback module:api/ProductApi~listVariantsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Integer} opts.page Page of results to return. Default: 1
     * @param {Integer} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/ProductApi~listVariantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.listVariants = function(productID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling listVariants";
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patch operation.
     * @callback module:api/ProductApi~patchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {module:model/Product} product 
     * @param {module:api/ProductApi~patchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.patch = function(productID, product, callback) {
      var postBody = product;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling patch";
      }

      // verify the required parameter 'product' is set
      if (product == undefined || product == null) {
        throw "Missing the required parameter 'product' when calling patch";
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/products/{productID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchVariant operation.
     * @callback module:api/ProductApi~patchVariantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {String} variantID ID of the variant.
     * @param {module:model/Variant} variant 
     * @param {module:api/ProductApi~patchVariantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.patchVariant = function(productID, variantID, variant, callback) {
      var postBody = variant;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling patchVariant";
      }

      // verify the required parameter 'variantID' is set
      if (variantID == undefined || variantID == null) {
        throw "Missing the required parameter 'variantID' when calling patchVariant";
      }

      // verify the required parameter 'variant' is set
      if (variant == undefined || variant == null) {
        throw "Missing the required parameter 'variant' when calling patchVariant";
      }


      var pathParams = {
        'productID': productID,
        'variantID': variantID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}/variants/{variantID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAssignment operation.
     * @callback module:api/ProductApi~saveAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductAssignment} productAssignment 
     * @param {module:api/ProductApi~saveAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveAssignment = function(productAssignment, callback) {
      var postBody = productAssignment;

      // verify the required parameter 'productAssignment' is set
      if (productAssignment == undefined || productAssignment == null) {
        throw "Missing the required parameter 'productAssignment' when calling saveAssignment";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/products/assignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/ProductApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {module:model/Product} product 
     * @param {module:api/ProductApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.update = function(productID, product, callback) {
      var postBody = product;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling update";
      }

      // verify the required parameter 'product' is set
      if (product == undefined || product == null) {
        throw "Missing the required parameter 'product' when calling update";
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInventory operation.
     * @callback module:api/ProductApi~updateInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {Integer} inventory Inventory of the product.
     * @param {module:api/ProductApi~updateInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateInventory = function(productID, inventory, callback) {
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling updateInventory";
      }

      // verify the required parameter 'inventory' is set
      if (inventory == undefined || inventory == null) {
        throw "Missing the required parameter 'inventory' when calling updateInventory";
      }


      var pathParams = {
        'productID': productID,
        'inventory': inventory
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}/inventory/{inventory}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariant operation.
     * @callback module:api/ProductApi~updateVariantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {String} variantID ID of the variant.
     * @param {module:model/Variant} variant 
     * @param {module:api/ProductApi~updateVariantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateVariant = function(productID, variantID, variant, callback) {
      var postBody = variant;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling updateVariant";
      }

      // verify the required parameter 'variantID' is set
      if (variantID == undefined || variantID == null) {
        throw "Missing the required parameter 'variantID' when calling updateVariant";
      }

      // verify the required parameter 'variant' is set
      if (variant == undefined || variant == null) {
        throw "Missing the required parameter 'variant' when calling updateVariant";
      }


      var pathParams = {
        'productID': productID,
        'variantID': variantID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}/variants/{variantID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariantInventory operation.
     * @callback module:api/ProductApi~updateVariantInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productID ID of the product.
     * @param {String} variantID ID of the variant.
     * @param {Integer} inventory Inventory of the product.
     * @param {module:api/ProductApi~updateVariantInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateVariantInventory = function(productID, variantID, inventory, callback) {
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID == undefined || productID == null) {
        throw "Missing the required parameter 'productID' when calling updateVariantInventory";
      }

      // verify the required parameter 'variantID' is set
      if (variantID == undefined || variantID == null) {
        throw "Missing the required parameter 'variantID' when calling updateVariantInventory";
      }

      // verify the required parameter 'inventory' is set
      if (inventory == undefined || inventory == null) {
        throw "Missing the required parameter 'inventory' when calling updateVariantInventory";
      }


      var pathParams = {
        'productID': productID,
        'variantID': variantID,
        'inventory': inventory
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/products/{productID}/variants/inventory/{variantID}/{inventory}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
