/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Payment', 'model/PaymentTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Payment'), require('../model/PaymentTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.PaymentApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.Payment, root.OrderCloud.PaymentTransaction);
  }
}(this, function(ApiClient, Payment, PaymentTransaction) {
  'use strict';

  /**
   * Payment service.
   * @module api/PaymentApi
   * @version 0.1
   */

  /**
   * Constructs a new PaymentApi. 
   * @alias module:api/PaymentApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/PaymentApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} orderID ID of the order.
     * @param {String} paymentID ID of the payment.
     * @param {module:api/PaymentApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.callDelete = function(buyerID, orderID, paymentID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling callDelete";
      }

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw "Missing the required parameter 'orderID' when calling callDelete";
      }

      // verify the required parameter 'paymentID' is set
      if (paymentID == undefined || paymentID == null) {
        throw "Missing the required parameter 'paymentID' when calling callDelete";
      }


      var pathParams = {
        'buyerID': buyerID,
        'orderID': orderID,
        'paymentID': paymentID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/PaymentApi~createCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} orderID ID of the order.
     * @param {module:model/Payment} payment 
     * @param {module:api/PaymentApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.create = function(buyerID, orderID, payment, callback) {
      var postBody = payment;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling create";
      }

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw "Missing the required parameter 'orderID' when calling create";
      }

      // verify the required parameter 'payment' is set
      if (payment == undefined || payment == null) {
        throw "Missing the required parameter 'payment' when calling create";
      }


      var pathParams = {
        'buyerID': buyerID,
        'orderID': orderID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/orders/{orderID}/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTransaction operation.
     * @callback module:api/PaymentApi~createTransactionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} orderID ID of the order.
     * @param {String} paymentID ID of the payment.
     * @param {module:model/PaymentTransaction} transaction 
     * @param {module:api/PaymentApi~createTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createTransaction = function(buyerID, orderID, paymentID, transaction, callback) {
      var postBody = transaction;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling createTransaction";
      }

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw "Missing the required parameter 'orderID' when calling createTransaction";
      }

      // verify the required parameter 'paymentID' is set
      if (paymentID == undefined || paymentID == null) {
        throw "Missing the required parameter 'paymentID' when calling createTransaction";
      }

      // verify the required parameter 'transaction' is set
      if (transaction == undefined || transaction == null) {
        throw "Missing the required parameter 'transaction' when calling createTransaction";
      }


      var pathParams = {
        'buyerID': buyerID,
        'orderID': orderID,
        'paymentID': paymentID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransaction operation.
     * @callback module:api/PaymentApi~deleteTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} orderID ID of the order.
     * @param {String} paymentID ID of the payment.
     * @param {String} transactionID ID of the transaction.
     * @param {module:api/PaymentApi~deleteTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTransaction = function(buyerID, orderID, paymentID, transactionID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling deleteTransaction";
      }

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw "Missing the required parameter 'orderID' when calling deleteTransaction";
      }

      // verify the required parameter 'paymentID' is set
      if (paymentID == undefined || paymentID == null) {
        throw "Missing the required parameter 'paymentID' when calling deleteTransaction";
      }

      // verify the required parameter 'transactionID' is set
      if (transactionID == undefined || transactionID == null) {
        throw "Missing the required parameter 'transactionID' when calling deleteTransaction";
      }


      var pathParams = {
        'buyerID': buyerID,
        'orderID': orderID,
        'paymentID': paymentID,
        'transactionID': transactionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/PaymentApi~getCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} orderID ID of the order.
     * @param {String} paymentID ID of the payment.
     * @param {module:api/PaymentApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.get = function(buyerID, orderID, paymentID, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling get";
      }

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw "Missing the required parameter 'orderID' when calling get";
      }

      // verify the required parameter 'paymentID' is set
      if (paymentID == undefined || paymentID == null) {
        throw "Missing the required parameter 'paymentID' when calling get";
      }


      var pathParams = {
        'buyerID': buyerID,
        'orderID': orderID,
        'paymentID': paymentID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/PaymentApi~listCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} orderID ID of the order.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Word or phrase to search for.
     * @param {String} opts.searchOn Comma-delimited list of fields to search on.
     * @param {String} opts.sortBy Comma-delimited list of fields to sort by.
     * @param {Integer} opts.page Page of results to return. Default: 1
     * @param {Integer} opts.pageSize Number of results to return per page. Default: 20, max: 100.
     * @param {module:api/PaymentApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.list = function(buyerID, orderID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling list";
      }

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw "Missing the required parameter 'orderID' when calling list";
      }


      var pathParams = {
        'buyerID': buyerID,
        'orderID': orderID
      };
      var queryParams = {
        'search': opts['search'],
        'searchOn': opts['searchOn'],
        'sortBy': opts['sortBy'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/orders/{orderID}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patch operation.
     * @callback module:api/PaymentApi~patchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} orderID ID of the order.
     * @param {String} paymentID ID of the payment.
     * @param {module:model/Payment} partialPayment 
     * @param {module:api/PaymentApi~patchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.patch = function(buyerID, orderID, paymentID, partialPayment, callback) {
      var postBody = partialPayment;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling patch";
      }

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw "Missing the required parameter 'orderID' when calling patch";
      }

      // verify the required parameter 'paymentID' is set
      if (paymentID == undefined || paymentID == null) {
        throw "Missing the required parameter 'paymentID' when calling patch";
      }

      // verify the required parameter 'partialPayment' is set
      if (partialPayment == undefined || partialPayment == null) {
        throw "Missing the required parameter 'partialPayment' when calling patch";
      }


      var pathParams = {
        'buyerID': buyerID,
        'orderID': orderID,
        'paymentID': paymentID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchTransaction operation.
     * @callback module:api/PaymentApi~patchTransactionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} orderID ID of the order.
     * @param {String} paymentID ID of the payment.
     * @param {String} transactionID ID of the transaction.
     * @param {module:model/PaymentTransaction} partialTransaction 
     * @param {module:api/PaymentApi~patchTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.patchTransaction = function(buyerID, orderID, paymentID, transactionID, partialTransaction, callback) {
      var postBody = partialTransaction;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling patchTransaction";
      }

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw "Missing the required parameter 'orderID' when calling patchTransaction";
      }

      // verify the required parameter 'paymentID' is set
      if (paymentID == undefined || paymentID == null) {
        throw "Missing the required parameter 'paymentID' when calling patchTransaction";
      }

      // verify the required parameter 'transactionID' is set
      if (transactionID == undefined || transactionID == null) {
        throw "Missing the required parameter 'transactionID' when calling patchTransaction";
      }

      // verify the required parameter 'partialTransaction' is set
      if (partialTransaction == undefined || partialTransaction == null) {
        throw "Missing the required parameter 'partialTransaction' when calling patchTransaction";
      }


      var pathParams = {
        'buyerID': buyerID,
        'orderID': orderID,
        'paymentID': paymentID,
        'transactionID': transactionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/PaymentApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} orderID ID of the order.
     * @param {String} paymentID ID of the payment.
     * @param {module:model/Payment} payment 
     * @param {module:api/PaymentApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.update = function(buyerID, orderID, paymentID, payment, callback) {
      var postBody = payment;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling update";
      }

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw "Missing the required parameter 'orderID' when calling update";
      }

      // verify the required parameter 'paymentID' is set
      if (paymentID == undefined || paymentID == null) {
        throw "Missing the required parameter 'paymentID' when calling update";
      }

      // verify the required parameter 'payment' is set
      if (payment == undefined || payment == null) {
        throw "Missing the required parameter 'payment' when calling update";
      }


      var pathParams = {
        'buyerID': buyerID,
        'orderID': orderID,
        'paymentID': paymentID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransaction operation.
     * @callback module:api/PaymentApi~updateTransactionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} orderID ID of the order.
     * @param {String} paymentID ID of the payment.
     * @param {String} transactionID ID of the transaction.
     * @param {module:model/PaymentTransaction} transaction 
     * @param {module:api/PaymentApi~updateTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateTransaction = function(buyerID, orderID, paymentID, transactionID, transaction, callback) {
      var postBody = transaction;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling updateTransaction";
      }

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw "Missing the required parameter 'orderID' when calling updateTransaction";
      }

      // verify the required parameter 'paymentID' is set
      if (paymentID == undefined || paymentID == null) {
        throw "Missing the required parameter 'paymentID' when calling updateTransaction";
      }

      // verify the required parameter 'transactionID' is set
      if (transactionID == undefined || transactionID == null) {
        throw "Missing the required parameter 'transactionID' when calling updateTransaction";
      }

      // verify the required parameter 'transaction' is set
      if (transaction == undefined || transaction == null) {
        throw "Missing the required parameter 'transaction' when calling updateTransaction";
      }


      var pathParams = {
        'buyerID': buyerID,
        'orderID': orderID,
        'paymentID': paymentID,
        'transactionID': transactionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
