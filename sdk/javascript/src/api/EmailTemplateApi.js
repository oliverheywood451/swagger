/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EmailTemplate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EmailTemplate'));
  } else {
    // Browser globals (root is window)
    if (!root.OrderCloud) {
      root.OrderCloud = {};
    }
    root.OrderCloud.EmailTemplateApi = factory(root.OrderCloud.ApiClient, root.OrderCloud.EmailTemplate);
  }
}(this, function(ApiClient, EmailTemplate) {
  'use strict';

  /**
   * EmailTemplate service.
   * @module api/EmailTemplateApi
   * @version 0.1
   */

  /**
   * Constructs a new EmailTemplateApi. 
   * @alias module:api/EmailTemplateApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/EmailTemplateApi~getCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} emailTemplateType Email template type of the email template. Possible values: OrderSubmittedForApproval, CustomerOrderSubmitted, OrderToApprove, OrderDeclined, OrderApproved, PriceRequestSubmitted, CustomerOrderShipped, ProductRequiresAttachment, InventoryPointReached, LineItemExceedsInventory, PriceRequestResponse, CustomerOrderUpdated, OrderCanceled, PriceRequestCanceled, NewOrderReceived, ApprovalNotification, EmailLoginVerificationCode.
     * @param {module:api/EmailTemplateApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.get = function(buyerID, emailTemplateType, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling get";
      }

      // verify the required parameter 'emailTemplateType' is set
      if (emailTemplateType == undefined || emailTemplateType == null) {
        throw "Missing the required parameter 'emailTemplateType' when calling get";
      }


      var pathParams = {
        'buyerID': buyerID,
        'emailTemplateType': emailTemplateType
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/emailtemplates/{emailTemplateType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patch operation.
     * @callback module:api/EmailTemplateApi~patchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} emailTemplateType Email template type of the email template. Possible values: OrderSubmittedForApproval, CustomerOrderSubmitted, OrderToApprove, OrderDeclined, OrderApproved, PriceRequestSubmitted, CustomerOrderShipped, ProductRequiresAttachment, InventoryPointReached, LineItemExceedsInventory, PriceRequestResponse, CustomerOrderUpdated, OrderCanceled, PriceRequestCanceled, NewOrderReceived, ApprovalNotification, EmailLoginVerificationCode.
     * @param {module:model/EmailTemplate} emailTemplate 
     * @param {module:api/EmailTemplateApi~patchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.patch = function(buyerID, emailTemplateType, emailTemplate, callback) {
      var postBody = emailTemplate;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling patch";
      }

      // verify the required parameter 'emailTemplateType' is set
      if (emailTemplateType == undefined || emailTemplateType == null) {
        throw "Missing the required parameter 'emailTemplateType' when calling patch";
      }

      // verify the required parameter 'emailTemplate' is set
      if (emailTemplate == undefined || emailTemplate == null) {
        throw "Missing the required parameter 'emailTemplate' when calling patch";
      }


      var pathParams = {
        'buyerID': buyerID,
        'emailTemplateType': emailTemplateType
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/emailtemplates/{emailTemplateType}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetToDefault operation.
     * @callback module:api/EmailTemplateApi~resetToDefaultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} emailTemplateType Email template type of the email template. Possible values: OrderSubmittedForApproval, CustomerOrderSubmitted, OrderToApprove, OrderDeclined, OrderApproved, PriceRequestSubmitted, CustomerOrderShipped, ProductRequiresAttachment, InventoryPointReached, LineItemExceedsInventory, PriceRequestResponse, CustomerOrderUpdated, OrderCanceled, PriceRequestCanceled, NewOrderReceived, ApprovalNotification, EmailLoginVerificationCode.
     * @param {module:api/EmailTemplateApi~resetToDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetToDefault = function(buyerID, emailTemplateType, callback) {
      var postBody = null;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling resetToDefault";
      }

      // verify the required parameter 'emailTemplateType' is set
      if (emailTemplateType == undefined || emailTemplateType == null) {
        throw "Missing the required parameter 'emailTemplateType' when calling resetToDefault";
      }


      var pathParams = {
        'buyerID': buyerID,
        'emailTemplateType': emailTemplateType
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/emailtemplates/{emailTemplateType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/EmailTemplateApi~updateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buyerID ID of the buyer.
     * @param {String} emailTemplateType Email template type of the email template. Possible values: OrderSubmittedForApproval, CustomerOrderSubmitted, OrderToApprove, OrderDeclined, OrderApproved, PriceRequestSubmitted, CustomerOrderShipped, ProductRequiresAttachment, InventoryPointReached, LineItemExceedsInventory, PriceRequestResponse, CustomerOrderUpdated, OrderCanceled, PriceRequestCanceled, NewOrderReceived, ApprovalNotification, EmailLoginVerificationCode.
     * @param {module:model/EmailTemplate} emailTemplate 
     * @param {module:api/EmailTemplateApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.update = function(buyerID, emailTemplateType, emailTemplate, callback) {
      var postBody = emailTemplate;

      // verify the required parameter 'buyerID' is set
      if (buyerID == undefined || buyerID == null) {
        throw "Missing the required parameter 'buyerID' when calling update";
      }

      // verify the required parameter 'emailTemplateType' is set
      if (emailTemplateType == undefined || emailTemplateType == null) {
        throw "Missing the required parameter 'emailTemplateType' when calling update";
      }

      // verify the required parameter 'emailTemplate' is set
      if (emailTemplate == undefined || emailTemplate == null) {
        throw "Missing the required parameter 'emailTemplate' when calling update";
      }


      var pathParams = {
        'buyerID': buyerID,
        'emailTemplateType': emailTemplateType
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buyers/{buyerID}/emailtemplates/{emailTemplateType}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
