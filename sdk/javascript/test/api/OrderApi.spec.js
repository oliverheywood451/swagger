/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrderCloud);
  }
}(this, function(expect, OrderCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OrderCloud.OrderApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrderApi', function() {
    describe('addPromotion', function() {
      it('should call addPromotion successfully', function(done) {
        //uncomment below and update the code to test addPromotion
        //instance.addPromotion(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('approve', function() {
      it('should call approve successfully', function(done) {
        //uncomment below and update the code to test approve
        //instance.approve(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('callDelete', function() {
      it('should call callDelete successfully', function(done) {
        //uncomment below and update the code to test callDelete
        //instance.callDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancel', function() {
      it('should call cancel successfully', function(done) {
        //uncomment below and update the code to test cancel
        //instance.cancel(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('create', function() {
      it('should call create successfully', function(done) {
        //uncomment below and update the code to test create
        //instance.create(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decline', function() {
      it('should call decline successfully', function(done) {
        //uncomment below and update the code to test decline
        //instance.decline(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('get', function() {
      it('should call get successfully', function(done) {
        //uncomment below and update the code to test get
        //instance.get(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApprovals', function() {
      it('should call listApprovals successfully', function(done) {
        //uncomment below and update the code to test listApprovals
        //instance.listApprovals(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEligibleApprovers', function() {
      it('should call listEligibleApprovers successfully', function(done) {
        //uncomment below and update the code to test listEligibleApprovers
        //instance.listEligibleApprovers(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIncoming', function() {
      it('should call listIncoming successfully', function(done) {
        //uncomment below and update the code to test listIncoming
        //instance.listIncoming(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOutgoing', function() {
      it('should call listOutgoing successfully', function(done) {
        //uncomment below and update the code to test listOutgoing
        //instance.listOutgoing(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPromotions', function() {
      it('should call listPromotions successfully', function(done) {
        //uncomment below and update the code to test listPromotions
        //instance.listPromotions(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patch', function() {
      it('should call patch successfully', function(done) {
        //uncomment below and update the code to test patch
        //instance.patch(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchBillingAddress', function() {
      it('should call patchBillingAddress successfully', function(done) {
        //uncomment below and update the code to test patchBillingAddress
        //instance.patchBillingAddress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchShippingAddress', function() {
      it('should call patchShippingAddress successfully', function(done) {
        //uncomment below and update the code to test patchShippingAddress
        //instance.patchShippingAddress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removePromotion', function() {
      it('should call removePromotion successfully', function(done) {
        //uncomment below and update the code to test removePromotion
        //instance.removePromotion(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setBillingAddress', function() {
      it('should call setBillingAddress successfully', function(done) {
        //uncomment below and update the code to test setBillingAddress
        //instance.setBillingAddress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setShippingAddress', function() {
      it('should call setShippingAddress successfully', function(done) {
        //uncomment below and update the code to test setShippingAddress
        //instance.setShippingAddress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ship', function() {
      it('should call ship successfully', function(done) {
        //uncomment below and update the code to test ship
        //instance.ship(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submit', function() {
      it('should call submit successfully', function(done) {
        //uncomment below and update the code to test submit
        //instance.submit(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transferTempUserOrder', function() {
      it('should call transferTempUserOrder successfully', function(done) {
        //uncomment below and update the code to test transferTempUserOrder
        //instance.transferTempUserOrder(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update', function() {
      it('should call update successfully', function(done) {
        //uncomment below and update the code to test update
        //instance.update(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
