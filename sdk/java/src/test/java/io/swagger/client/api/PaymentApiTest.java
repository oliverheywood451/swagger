/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Payment;
import io.swagger.client.model.PaymentTransaction;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentApi
 */
public class PaymentApiTest {

    private final PaymentApi api = new PaymentApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String buyerID = null;
        String orderID = null;
        Payment payment = null;
        // Object response = api.create(buyerID, orderID, payment);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTransactionTest() throws ApiException {
        String buyerID = null;
        String orderID = null;
        String paymentID = null;
        PaymentTransaction transaction = null;
        // Object response = api.createTransaction(buyerID, orderID, paymentID, transaction);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String buyerID = null;
        String orderID = null;
        String paymentID = null;
        // api.delete(buyerID, orderID, paymentID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTransactionTest() throws ApiException {
        String buyerID = null;
        String orderID = null;
        String paymentID = null;
        String transactionID = null;
        // api.deleteTransaction(buyerID, orderID, paymentID, transactionID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        String buyerID = null;
        String orderID = null;
        String paymentID = null;
        // Object response = api.get(buyerID, orderID, paymentID);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String buyerID = null;
        String orderID = null;
        String search = null;
        String searchOn = null;
        String sortBy = null;
        Integer page = null;
        Integer pageSize = null;
        // Object response = api.list(buyerID, orderID, search, searchOn, sortBy, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchTest() throws ApiException {
        String buyerID = null;
        String orderID = null;
        String paymentID = null;
        Payment partialPayment = null;
        // Object response = api.patch(buyerID, orderID, paymentID, partialPayment);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchTransactionTest() throws ApiException {
        String buyerID = null;
        String orderID = null;
        String paymentID = null;
        String transactionID = null;
        PaymentTransaction partialTransaction = null;
        // Object response = api.patchTransaction(buyerID, orderID, paymentID, transactionID, partialTransaction);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String buyerID = null;
        String orderID = null;
        String paymentID = null;
        Payment payment = null;
        // Object response = api.update(buyerID, orderID, paymentID, payment);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTransactionTest() throws ApiException {
        String buyerID = null;
        String orderID = null;
        String paymentID = null;
        String transactionID = null;
        PaymentTransaction transaction = null;
        // Object response = api.updateTransaction(buyerID, orderID, paymentID, transactionID, transaction);

        // TODO: test validations
    }
    
}
