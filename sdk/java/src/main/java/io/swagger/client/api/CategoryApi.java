/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Category;
import io.swagger.client.model.CategoryAssignment;
import io.swagger.client.model.CategoryProductAssignment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoryApi {
    private ApiClient apiClient;

    public CategoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for create */
    private com.squareup.okhttp.Call createCall(String buyerID, Category category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = category;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling create(Async)");
        }
        
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling create(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param category  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object create(String buyerID, Category category) throws ApiException {
        ApiResponse<Object> resp = createWithHttpInfo(buyerID, category);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param category  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createWithHttpInfo(String buyerID, Category category) throws ApiException {
        com.squareup.okhttp.Call call = createCall(buyerID, category, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param category  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAsync(String buyerID, Category category, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCall(buyerID, category, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for delete */
    private com.squareup.okhttp.Call deleteCall(String buyerID, String categoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling delete(Async)");
        }
        
        // verify the required parameter 'categoryID' is set
        if (categoryID == null) {
            throw new ApiException("Missing the required parameter 'categoryID' when calling delete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories/{categoryID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "categoryID" + "\\}", apiClient.escapeString(categoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void delete(String buyerID, String categoryID) throws ApiException {
        deleteWithHttpInfo(buyerID, categoryID);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWithHttpInfo(String buyerID, String categoryID) throws ApiException {
        com.squareup.okhttp.Call call = deleteCall(buyerID, categoryID, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAsync(String buyerID, String categoryID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCall(buyerID, categoryID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteAssignment */
    private com.squareup.okhttp.Call deleteAssignmentCall(String buyerID, String categoryID, String userID, String userGroupID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling deleteAssignment(Async)");
        }
        
        // verify the required parameter 'categoryID' is set
        if (categoryID == null) {
            throw new ApiException("Missing the required parameter 'categoryID' when calling deleteAssignment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories/{categoryID}/assignments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "categoryID" + "\\}", apiClient.escapeString(categoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userID", userID));
        if (userGroupID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userGroupID", userGroupID));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param userID ID of the user. (optional)
     * @param userGroupID ID of the user group. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAssignment(String buyerID, String categoryID, String userID, String userGroupID) throws ApiException {
        deleteAssignmentWithHttpInfo(buyerID, categoryID, userID, userGroupID);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param userID ID of the user. (optional)
     * @param userGroupID ID of the user group. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAssignmentWithHttpInfo(String buyerID, String categoryID, String userID, String userGroupID) throws ApiException {
        com.squareup.okhttp.Call call = deleteAssignmentCall(buyerID, categoryID, userID, userGroupID, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param userID ID of the user. (optional)
     * @param userGroupID ID of the user group. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAssignmentAsync(String buyerID, String categoryID, String userID, String userGroupID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAssignmentCall(buyerID, categoryID, userID, userGroupID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteProductAssignment */
    private com.squareup.okhttp.Call deleteProductAssignmentCall(String buyerID, String categoryID, String productID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling deleteProductAssignment(Async)");
        }
        
        // verify the required parameter 'categoryID' is set
        if (categoryID == null) {
            throw new ApiException("Missing the required parameter 'categoryID' when calling deleteProductAssignment(Async)");
        }
        
        // verify the required parameter 'productID' is set
        if (productID == null) {
            throw new ApiException("Missing the required parameter 'productID' when calling deleteProductAssignment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories/{categoryID}/productassignments/{productID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "categoryID" + "\\}", apiClient.escapeString(categoryID.toString()))
        .replaceAll("\\{" + "productID" + "\\}", apiClient.escapeString(productID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param productID ID of the product. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProductAssignment(String buyerID, String categoryID, String productID) throws ApiException {
        deleteProductAssignmentWithHttpInfo(buyerID, categoryID, productID);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param productID ID of the product. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProductAssignmentWithHttpInfo(String buyerID, String categoryID, String productID) throws ApiException {
        com.squareup.okhttp.Call call = deleteProductAssignmentCall(buyerID, categoryID, productID, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param productID ID of the product. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProductAssignmentAsync(String buyerID, String categoryID, String productID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProductAssignmentCall(buyerID, categoryID, productID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for get */
    private com.squareup.okhttp.Call getCall(String buyerID, String categoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling get(Async)");
        }
        
        // verify the required parameter 'categoryID' is set
        if (categoryID == null) {
            throw new ApiException("Missing the required parameter 'categoryID' when calling get(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories/{categoryID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "categoryID" + "\\}", apiClient.escapeString(categoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object get(String buyerID, String categoryID) throws ApiException {
        ApiResponse<Object> resp = getWithHttpInfo(buyerID, categoryID);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getWithHttpInfo(String buyerID, String categoryID) throws ApiException {
        com.squareup.okhttp.Call call = getCall(buyerID, categoryID, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAsync(String buyerID, String categoryID, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCall(buyerID, categoryID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for list */
    private com.squareup.okhttp.Call listCall(String buyerID, String parentID, String depth, String search, String searchOn, String sortBy, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling list(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parentID", parentID));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "search", search));
        if (searchOn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchOn", searchOn));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortBy", sortBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param parentID ID of the parent. (optional)
     * @param depth Depth of the category. (optional)
     * @param search Word or phrase to search for. (optional)
     * @param searchOn Comma-delimited list of fields to search on. (optional)
     * @param sortBy Comma-delimited list of fields to sort by. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object list(String buyerID, String parentID, String depth, String search, String searchOn, String sortBy, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<Object> resp = listWithHttpInfo(buyerID, parentID, depth, search, searchOn, sortBy, page, pageSize);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param parentID ID of the parent. (optional)
     * @param depth Depth of the category. (optional)
     * @param search Word or phrase to search for. (optional)
     * @param searchOn Comma-delimited list of fields to search on. (optional)
     * @param sortBy Comma-delimited list of fields to sort by. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> listWithHttpInfo(String buyerID, String parentID, String depth, String search, String searchOn, String sortBy, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = listCall(buyerID, parentID, depth, search, searchOn, sortBy, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param parentID ID of the parent. (optional)
     * @param depth Depth of the category. (optional)
     * @param search Word or phrase to search for. (optional)
     * @param searchOn Comma-delimited list of fields to search on. (optional)
     * @param sortBy Comma-delimited list of fields to sort by. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAsync(String buyerID, String parentID, String depth, String search, String searchOn, String sortBy, Integer page, Integer pageSize, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCall(buyerID, parentID, depth, search, searchOn, sortBy, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listAssignments */
    private com.squareup.okhttp.Call listAssignmentsCall(String buyerID, String categoryID, String userID, String userGroupID, String level, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling listAssignments(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories/assignments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (categoryID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryID", categoryID));
        if (userID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userID", userID));
        if (userGroupID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userGroupID", userGroupID));
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "level", level));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (optional)
     * @param userID ID of the user. (optional)
     * @param userGroupID ID of the user group. (optional)
     * @param level Level of the category. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object listAssignments(String buyerID, String categoryID, String userID, String userGroupID, String level, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<Object> resp = listAssignmentsWithHttpInfo(buyerID, categoryID, userID, userGroupID, level, page, pageSize);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (optional)
     * @param userID ID of the user. (optional)
     * @param userGroupID ID of the user group. (optional)
     * @param level Level of the category. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> listAssignmentsWithHttpInfo(String buyerID, String categoryID, String userID, String userGroupID, String level, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = listAssignmentsCall(buyerID, categoryID, userID, userGroupID, level, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (optional)
     * @param userID ID of the user. (optional)
     * @param userGroupID ID of the user group. (optional)
     * @param level Level of the category. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAssignmentsAsync(String buyerID, String categoryID, String userID, String userGroupID, String level, Integer page, Integer pageSize, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAssignmentsCall(buyerID, categoryID, userID, userGroupID, level, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listChildren */
    private com.squareup.okhttp.Call listChildrenCall(String buyerID, String parentID, String search, String depth, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling listChildren(Async)");
        }
        
        // verify the required parameter 'parentID' is set
        if (parentID == null) {
            throw new ApiException("Missing the required parameter 'parentID' when calling listChildren(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories/{parentID}/categories".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "parentID" + "\\}", apiClient.escapeString(parentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "search", search));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param parentID ID of the parent. (required)
     * @param search Word or phrase to search for. (optional)
     * @param depth Depth of the category. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object listChildren(String buyerID, String parentID, String search, String depth, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<Object> resp = listChildrenWithHttpInfo(buyerID, parentID, search, depth, page, pageSize);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param parentID ID of the parent. (required)
     * @param search Word or phrase to search for. (optional)
     * @param depth Depth of the category. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> listChildrenWithHttpInfo(String buyerID, String parentID, String search, String depth, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = listChildrenCall(buyerID, parentID, search, depth, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param parentID ID of the parent. (required)
     * @param search Word or phrase to search for. (optional)
     * @param depth Depth of the category. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listChildrenAsync(String buyerID, String parentID, String search, String depth, Integer page, Integer pageSize, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listChildrenCall(buyerID, parentID, search, depth, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listProductAssignments */
    private com.squareup.okhttp.Call listProductAssignmentsCall(String buyerID, String categoryID, String productID, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling listProductAssignments(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories/productassignments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (categoryID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryID", categoryID));
        if (productID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "productID", productID));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (optional)
     * @param productID ID of the product. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object listProductAssignments(String buyerID, String categoryID, String productID, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<Object> resp = listProductAssignmentsWithHttpInfo(buyerID, categoryID, productID, page, pageSize);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (optional)
     * @param productID ID of the product. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> listProductAssignmentsWithHttpInfo(String buyerID, String categoryID, String productID, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = listProductAssignmentsCall(buyerID, categoryID, productID, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (optional)
     * @param productID ID of the product. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listProductAssignmentsAsync(String buyerID, String categoryID, String productID, Integer page, Integer pageSize, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProductAssignmentsCall(buyerID, categoryID, productID, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for patch */
    private com.squareup.okhttp.Call patchCall(String buyerID, String categoryID, Category category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = category;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling patch(Async)");
        }
        
        // verify the required parameter 'categoryID' is set
        if (categoryID == null) {
            throw new ApiException("Missing the required parameter 'categoryID' when calling patch(Async)");
        }
        
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling patch(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories/{categoryID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "categoryID" + "\\}", apiClient.escapeString(categoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param category  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void patch(String buyerID, String categoryID, Category category) throws ApiException {
        patchWithHttpInfo(buyerID, categoryID, category);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param category  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> patchWithHttpInfo(String buyerID, String categoryID, Category category) throws ApiException {
        com.squareup.okhttp.Call call = patchCall(buyerID, categoryID, category, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param category  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchAsync(String buyerID, String categoryID, Category category, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchCall(buyerID, categoryID, category, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for saveAssignment */
    private com.squareup.okhttp.Call saveAssignmentCall(String buyerID, CategoryAssignment categoryAssignment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = categoryAssignment;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling saveAssignment(Async)");
        }
        
        // verify the required parameter 'categoryAssignment' is set
        if (categoryAssignment == null) {
            throw new ApiException("Missing the required parameter 'categoryAssignment' when calling saveAssignment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories/assignments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryAssignment  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveAssignment(String buyerID, CategoryAssignment categoryAssignment) throws ApiException {
        saveAssignmentWithHttpInfo(buyerID, categoryAssignment);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryAssignment  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveAssignmentWithHttpInfo(String buyerID, CategoryAssignment categoryAssignment) throws ApiException {
        com.squareup.okhttp.Call call = saveAssignmentCall(buyerID, categoryAssignment, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryAssignment  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveAssignmentAsync(String buyerID, CategoryAssignment categoryAssignment, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveAssignmentCall(buyerID, categoryAssignment, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for saveProductAssignment */
    private com.squareup.okhttp.Call saveProductAssignmentCall(String buyerID, CategoryProductAssignment productAssignment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = productAssignment;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling saveProductAssignment(Async)");
        }
        
        // verify the required parameter 'productAssignment' is set
        if (productAssignment == null) {
            throw new ApiException("Missing the required parameter 'productAssignment' when calling saveProductAssignment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories/productassignments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param productAssignment  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveProductAssignment(String buyerID, CategoryProductAssignment productAssignment) throws ApiException {
        saveProductAssignmentWithHttpInfo(buyerID, productAssignment);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param productAssignment  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveProductAssignmentWithHttpInfo(String buyerID, CategoryProductAssignment productAssignment) throws ApiException {
        com.squareup.okhttp.Call call = saveProductAssignmentCall(buyerID, productAssignment, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param productAssignment  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveProductAssignmentAsync(String buyerID, CategoryProductAssignment productAssignment, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveProductAssignmentCall(buyerID, productAssignment, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for update */
    private com.squareup.okhttp.Call updateCall(String buyerID, String categoryID, Category category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = category;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling update(Async)");
        }
        
        // verify the required parameter 'categoryID' is set
        if (categoryID == null) {
            throw new ApiException("Missing the required parameter 'categoryID' when calling update(Async)");
        }
        
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling update(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/categories/{categoryID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "categoryID" + "\\}", apiClient.escapeString(categoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param category  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object update(String buyerID, String categoryID, Category category) throws ApiException {
        ApiResponse<Object> resp = updateWithHttpInfo(buyerID, categoryID, category);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param category  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateWithHttpInfo(String buyerID, String categoryID, Category category) throws ApiException {
        com.squareup.okhttp.Call call = updateCall(buyerID, categoryID, category, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param categoryID ID of the category. (required)
     * @param category  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAsync(String buyerID, String categoryID, Category category, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCall(buyerID, categoryID, category, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
