/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Payment;
import io.swagger.client.model.PaymentTransaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentApi {
    private ApiClient apiClient;

    public PaymentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for create */
    private com.squareup.okhttp.Call createCall(String buyerID, String orderID, Payment payment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payment;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling create(Async)");
        }
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling create(Async)");
        }
        
        // verify the required parameter 'payment' is set
        if (payment == null) {
            throw new ApiException("Missing the required parameter 'payment' when calling create(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/orders/{orderID}/payments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param payment  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object create(String buyerID, String orderID, Payment payment) throws ApiException {
        ApiResponse<Object> resp = createWithHttpInfo(buyerID, orderID, payment);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param payment  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createWithHttpInfo(String buyerID, String orderID, Payment payment) throws ApiException {
        com.squareup.okhttp.Call call = createCall(buyerID, orderID, payment, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param payment  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAsync(String buyerID, String orderID, Payment payment, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCall(buyerID, orderID, payment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createTransaction */
    private com.squareup.okhttp.Call createTransactionCall(String buyerID, String orderID, String paymentID, PaymentTransaction transaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transaction;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling createTransaction(Async)");
        }
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling createTransaction(Async)");
        }
        
        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling createTransaction(Async)");
        }
        
        // verify the required parameter 'transaction' is set
        if (transaction == null) {
            throw new ApiException("Missing the required parameter 'transaction' when calling createTransaction(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()))
        .replaceAll("\\{" + "paymentID" + "\\}", apiClient.escapeString(paymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transaction  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object createTransaction(String buyerID, String orderID, String paymentID, PaymentTransaction transaction) throws ApiException {
        ApiResponse<Object> resp = createTransactionWithHttpInfo(buyerID, orderID, paymentID, transaction);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transaction  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createTransactionWithHttpInfo(String buyerID, String orderID, String paymentID, PaymentTransaction transaction) throws ApiException {
        com.squareup.okhttp.Call call = createTransactionCall(buyerID, orderID, paymentID, transaction, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transaction  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTransactionAsync(String buyerID, String orderID, String paymentID, PaymentTransaction transaction, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTransactionCall(buyerID, orderID, paymentID, transaction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for delete */
    private com.squareup.okhttp.Call deleteCall(String buyerID, String orderID, String paymentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling delete(Async)");
        }
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling delete(Async)");
        }
        
        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling delete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()))
        .replaceAll("\\{" + "paymentID" + "\\}", apiClient.escapeString(paymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void delete(String buyerID, String orderID, String paymentID) throws ApiException {
        deleteWithHttpInfo(buyerID, orderID, paymentID);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWithHttpInfo(String buyerID, String orderID, String paymentID) throws ApiException {
        com.squareup.okhttp.Call call = deleteCall(buyerID, orderID, paymentID, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAsync(String buyerID, String orderID, String paymentID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCall(buyerID, orderID, paymentID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteTransaction */
    private com.squareup.okhttp.Call deleteTransactionCall(String buyerID, String orderID, String paymentID, String transactionID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling deleteTransaction(Async)");
        }
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling deleteTransaction(Async)");
        }
        
        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling deleteTransaction(Async)");
        }
        
        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling deleteTransaction(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()))
        .replaceAll("\\{" + "paymentID" + "\\}", apiClient.escapeString(paymentID.toString()))
        .replaceAll("\\{" + "transactionID" + "\\}", apiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transactionID ID of the transaction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTransaction(String buyerID, String orderID, String paymentID, String transactionID) throws ApiException {
        deleteTransactionWithHttpInfo(buyerID, orderID, paymentID, transactionID);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transactionID ID of the transaction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTransactionWithHttpInfo(String buyerID, String orderID, String paymentID, String transactionID) throws ApiException {
        com.squareup.okhttp.Call call = deleteTransactionCall(buyerID, orderID, paymentID, transactionID, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transactionID ID of the transaction. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTransactionAsync(String buyerID, String orderID, String paymentID, String transactionID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTransactionCall(buyerID, orderID, paymentID, transactionID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for get */
    private com.squareup.okhttp.Call getCall(String buyerID, String orderID, String paymentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling get(Async)");
        }
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling get(Async)");
        }
        
        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling get(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()))
        .replaceAll("\\{" + "paymentID" + "\\}", apiClient.escapeString(paymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object get(String buyerID, String orderID, String paymentID) throws ApiException {
        ApiResponse<Object> resp = getWithHttpInfo(buyerID, orderID, paymentID);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getWithHttpInfo(String buyerID, String orderID, String paymentID) throws ApiException {
        com.squareup.okhttp.Call call = getCall(buyerID, orderID, paymentID, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAsync(String buyerID, String orderID, String paymentID, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCall(buyerID, orderID, paymentID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for list */
    private com.squareup.okhttp.Call listCall(String buyerID, String orderID, String search, String searchOn, String sortBy, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling list(Async)");
        }
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling list(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/orders/{orderID}/payments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "search", search));
        if (searchOn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchOn", searchOn));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortBy", sortBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param search Word or phrase to search for. (optional)
     * @param searchOn Comma-delimited list of fields to search on. (optional)
     * @param sortBy Comma-delimited list of fields to sort by. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object list(String buyerID, String orderID, String search, String searchOn, String sortBy, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<Object> resp = listWithHttpInfo(buyerID, orderID, search, searchOn, sortBy, page, pageSize);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param search Word or phrase to search for. (optional)
     * @param searchOn Comma-delimited list of fields to search on. (optional)
     * @param sortBy Comma-delimited list of fields to sort by. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> listWithHttpInfo(String buyerID, String orderID, String search, String searchOn, String sortBy, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = listCall(buyerID, orderID, search, searchOn, sortBy, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param search Word or phrase to search for. (optional)
     * @param searchOn Comma-delimited list of fields to search on. (optional)
     * @param sortBy Comma-delimited list of fields to sort by. (optional)
     * @param page Page of results to return. Default: 1 (optional)
     * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAsync(String buyerID, String orderID, String search, String searchOn, String sortBy, Integer page, Integer pageSize, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCall(buyerID, orderID, search, searchOn, sortBy, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for patch */
    private com.squareup.okhttp.Call patchCall(String buyerID, String orderID, String paymentID, Payment partialPayment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = partialPayment;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling patch(Async)");
        }
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling patch(Async)");
        }
        
        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling patch(Async)");
        }
        
        // verify the required parameter 'partialPayment' is set
        if (partialPayment == null) {
            throw new ApiException("Missing the required parameter 'partialPayment' when calling patch(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()))
        .replaceAll("\\{" + "paymentID" + "\\}", apiClient.escapeString(paymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param partialPayment  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object patch(String buyerID, String orderID, String paymentID, Payment partialPayment) throws ApiException {
        ApiResponse<Object> resp = patchWithHttpInfo(buyerID, orderID, paymentID, partialPayment);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param partialPayment  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> patchWithHttpInfo(String buyerID, String orderID, String paymentID, Payment partialPayment) throws ApiException {
        com.squareup.okhttp.Call call = patchCall(buyerID, orderID, paymentID, partialPayment, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param partialPayment  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchAsync(String buyerID, String orderID, String paymentID, Payment partialPayment, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchCall(buyerID, orderID, paymentID, partialPayment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for patchTransaction */
    private com.squareup.okhttp.Call patchTransactionCall(String buyerID, String orderID, String paymentID, String transactionID, PaymentTransaction partialTransaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = partialTransaction;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling patchTransaction(Async)");
        }
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling patchTransaction(Async)");
        }
        
        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling patchTransaction(Async)");
        }
        
        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling patchTransaction(Async)");
        }
        
        // verify the required parameter 'partialTransaction' is set
        if (partialTransaction == null) {
            throw new ApiException("Missing the required parameter 'partialTransaction' when calling patchTransaction(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()))
        .replaceAll("\\{" + "paymentID" + "\\}", apiClient.escapeString(paymentID.toString()))
        .replaceAll("\\{" + "transactionID" + "\\}", apiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transactionID ID of the transaction. (required)
     * @param partialTransaction  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object patchTransaction(String buyerID, String orderID, String paymentID, String transactionID, PaymentTransaction partialTransaction) throws ApiException {
        ApiResponse<Object> resp = patchTransactionWithHttpInfo(buyerID, orderID, paymentID, transactionID, partialTransaction);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transactionID ID of the transaction. (required)
     * @param partialTransaction  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> patchTransactionWithHttpInfo(String buyerID, String orderID, String paymentID, String transactionID, PaymentTransaction partialTransaction) throws ApiException {
        com.squareup.okhttp.Call call = patchTransactionCall(buyerID, orderID, paymentID, transactionID, partialTransaction, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transactionID ID of the transaction. (required)
     * @param partialTransaction  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchTransactionAsync(String buyerID, String orderID, String paymentID, String transactionID, PaymentTransaction partialTransaction, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchTransactionCall(buyerID, orderID, paymentID, transactionID, partialTransaction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for update */
    private com.squareup.okhttp.Call updateCall(String buyerID, String orderID, String paymentID, Payment payment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payment;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling update(Async)");
        }
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling update(Async)");
        }
        
        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling update(Async)");
        }
        
        // verify the required parameter 'payment' is set
        if (payment == null) {
            throw new ApiException("Missing the required parameter 'payment' when calling update(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()))
        .replaceAll("\\{" + "paymentID" + "\\}", apiClient.escapeString(paymentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param payment  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object update(String buyerID, String orderID, String paymentID, Payment payment) throws ApiException {
        ApiResponse<Object> resp = updateWithHttpInfo(buyerID, orderID, paymentID, payment);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param payment  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateWithHttpInfo(String buyerID, String orderID, String paymentID, Payment payment) throws ApiException {
        com.squareup.okhttp.Call call = updateCall(buyerID, orderID, paymentID, payment, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param payment  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAsync(String buyerID, String orderID, String paymentID, Payment payment, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCall(buyerID, orderID, paymentID, payment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTransaction */
    private com.squareup.okhttp.Call updateTransactionCall(String buyerID, String orderID, String paymentID, String transactionID, PaymentTransaction transaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transaction;
        
        // verify the required parameter 'buyerID' is set
        if (buyerID == null) {
            throw new ApiException("Missing the required parameter 'buyerID' when calling updateTransaction(Async)");
        }
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling updateTransaction(Async)");
        }
        
        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling updateTransaction(Async)");
        }
        
        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling updateTransaction(Async)");
        }
        
        // verify the required parameter 'transaction' is set
        if (transaction == null) {
            throw new ApiException("Missing the required parameter 'transaction' when calling updateTransaction(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/buyers/{buyerID}/orders/{orderID}/payments/{paymentID}/transactions/{transactionID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "buyerID" + "\\}", apiClient.escapeString(buyerID.toString()))
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()))
        .replaceAll("\\{" + "paymentID" + "\\}", apiClient.escapeString(paymentID.toString()))
        .replaceAll("\\{" + "transactionID" + "\\}", apiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transactionID ID of the transaction. (required)
     * @param transaction  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateTransaction(String buyerID, String orderID, String paymentID, String transactionID, PaymentTransaction transaction) throws ApiException {
        ApiResponse<Object> resp = updateTransactionWithHttpInfo(buyerID, orderID, paymentID, transactionID, transaction);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transactionID ID of the transaction. (required)
     * @param transaction  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateTransactionWithHttpInfo(String buyerID, String orderID, String paymentID, String transactionID, PaymentTransaction transaction) throws ApiException {
        com.squareup.okhttp.Call call = updateTransactionCall(buyerID, orderID, paymentID, transactionID, transaction, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param buyerID ID of the buyer. (required)
     * @param orderID ID of the order. (required)
     * @param paymentID ID of the payment. (required)
     * @param transactionID ID of the transaction. (required)
     * @param transaction  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTransactionAsync(String buyerID, String orderID, String paymentID, String transactionID, PaymentTransaction transaction, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTransactionCall(buyerID, orderID, paymentID, transactionID, transaction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
