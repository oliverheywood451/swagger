/**
 * OrderCloud
 * A full ecommerce backend as a service.
 *
 * OpenAPI spec version: 0.1
 * Contact: ordercloud@four51.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api

import io.swagger.client.model.Order
import io.swagger.client.model.Address
import io.swagger.client.model.Shipment
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class OrderApi(val defBasePath: String = "https://api.ordercloud.io/v1",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param promoCode Promo code of the order. 
   * @return Any
   */
  def addPromotion (buyerID: String, orderID: String, promoCode: String) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))

.replaceAll("\\{" + "promoCode" + "\\}",apiInvoker.escape(promoCode))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param comments Comments to be saved with the order approval. (optional)
   * @return Any
   */
  def approve (buyerID: String, orderID: String, comments: String) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/approve".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if(String.valueOf(comments) != "null") queryParams += "comments" -> comments.toString
    
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @return Any
   */
  def cancel (buyerID: String, orderID: String) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/cancel".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param order  
   * @return Any
   */
  def create (buyerID: String, order: Order) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (order == null) throw new Exception("Missing required parameter 'order' when calling OrderApi->create")

        
    
    var postBody: AnyRef = order

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param comments Comments to be saved with the order denial. (optional)
   * @return Any
   */
  def decline (buyerID: String, orderID: String, comments: String) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/decline".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if(String.valueOf(comments) != "null") queryParams += "comments" -> comments.toString
    
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @return void
   */
  def delete (buyerID: String, orderID: String)  = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @return Any
   */
  def get (buyerID: String, orderID: String) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param search Word or phrase to search for. (optional)
   * @param searchOn Comma-delimited list of fields to search on. (optional)
   * @param sortBy Comma-delimited list of fields to sort by. (optional)
   * @param page Page of results to return. Default: 1 (optional)
   * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
   * @return Any
   */
  def listApprovals (buyerID: String, orderID: String, search: String, searchOn: String, sortBy: String, page: Integer, pageSize: Integer) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/approvals".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if(String.valueOf(search) != "null") queryParams += "search" -> search.toString
if(String.valueOf(searchOn) != "null") queryParams += "searchOn" -> searchOn.toString
if(String.valueOf(sortBy) != "null") queryParams += "sortBy" -> sortBy.toString
if(String.valueOf(page) != "null") queryParams += "page" -> page.toString
if(String.valueOf(pageSize) != "null") queryParams += "pageSize" -> pageSize.toString
    
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param search Word or phrase to search for. (optional)
   * @param searchOn Comma-delimited list of fields to search on. (optional)
   * @param sortBy Comma-delimited list of fields to sort by. (optional)
   * @param page Page of results to return. Default: 1 (optional)
   * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
   * @return Any
   */
  def listEligibleApprovers (buyerID: String, orderID: String, search: String, searchOn: String, sortBy: String, page: Integer, pageSize: Integer) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/eligibleapprovers".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if(String.valueOf(search) != "null") queryParams += "search" -> search.toString
if(String.valueOf(searchOn) != "null") queryParams += "searchOn" -> searchOn.toString
if(String.valueOf(sortBy) != "null") queryParams += "sortBy" -> sortBy.toString
if(String.valueOf(page) != "null") queryParams += "page" -> page.toString
if(String.valueOf(pageSize) != "null") queryParams += "pageSize" -> pageSize.toString
    
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. (optional)
   * @param from Lower bound of date range that the order was submitted. (optional)
   * @param to Upper bound of date range that the order was submitted. (optional)
   * @param search Word or phrase to search for. (optional)
   * @param searchOn Comma-delimited list of fields to search on. (optional)
   * @param sortBy Comma-delimited list of fields to sort by. (optional)
   * @param page Page of results to return. Default: 1 (optional)
   * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
   * @return Any
   */
  def listIncoming (buyerID: String, from: String, to: String, search: String, searchOn: String, sortBy: String, page: Integer, pageSize: Integer) : Option[Any] = {
    // create path and map variables
    val path = "/orders/incoming".replaceAll("\\{format\\}","json")
    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if(String.valueOf(buyerID) != "null") queryParams += "buyerID" -> buyerID.toString
if(String.valueOf(from) != "null") queryParams += "from" -> from.toString
if(String.valueOf(to) != "null") queryParams += "to" -> to.toString
if(String.valueOf(search) != "null") queryParams += "search" -> search.toString
if(String.valueOf(searchOn) != "null") queryParams += "searchOn" -> searchOn.toString
if(String.valueOf(sortBy) != "null") queryParams += "sortBy" -> sortBy.toString
if(String.valueOf(page) != "null") queryParams += "page" -> page.toString
if(String.valueOf(pageSize) != "null") queryParams += "pageSize" -> pageSize.toString
    
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. (optional)
   * @param from Lower bound of date range that the order was created. (optional)
   * @param to Upper bound of date range that the order was created. (optional)
   * @param search Word or phrase to search for. (optional)
   * @param searchOn Comma-delimited list of fields to search on. (optional)
   * @param sortBy Comma-delimited list of fields to sort by. (optional)
   * @param page Page of results to return. Default: 1 (optional)
   * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
   * @return Any
   */
  def listOutgoing (buyerID: String, from: String, to: String, search: String, searchOn: String, sortBy: String, page: Integer, pageSize: Integer) : Option[Any] = {
    // create path and map variables
    val path = "/orders/outgoing".replaceAll("\\{format\\}","json")
    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if(String.valueOf(buyerID) != "null") queryParams += "buyerID" -> buyerID.toString
if(String.valueOf(from) != "null") queryParams += "from" -> from.toString
if(String.valueOf(to) != "null") queryParams += "to" -> to.toString
if(String.valueOf(search) != "null") queryParams += "search" -> search.toString
if(String.valueOf(searchOn) != "null") queryParams += "searchOn" -> searchOn.toString
if(String.valueOf(sortBy) != "null") queryParams += "sortBy" -> sortBy.toString
if(String.valueOf(page) != "null") queryParams += "page" -> page.toString
if(String.valueOf(pageSize) != "null") queryParams += "pageSize" -> pageSize.toString
    
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param search Word or phrase to search for. (optional)
   * @param searchOn Comma-delimited list of fields to search on. (optional)
   * @param sortBy Comma-delimited list of fields to sort by. (optional)
   * @param page Page of results to return. Default: 1 (optional)
   * @param pageSize Number of results to return per page. Default: 20, max: 100. (optional)
   * @return Any
   */
  def listPromotions (buyerID: String, orderID: String, search: String, searchOn: String, sortBy: String, page: Integer, pageSize: Integer) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/promotions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if(String.valueOf(search) != "null") queryParams += "search" -> search.toString
if(String.valueOf(searchOn) != "null") queryParams += "searchOn" -> searchOn.toString
if(String.valueOf(sortBy) != "null") queryParams += "sortBy" -> sortBy.toString
if(String.valueOf(page) != "null") queryParams += "page" -> page.toString
if(String.valueOf(pageSize) != "null") queryParams += "pageSize" -> pageSize.toString
    
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param partialOrder  
   * @return Any
   */
  def patch (buyerID: String, orderID: String, partialOrder: Order) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (partialOrder == null) throw new Exception("Missing required parameter 'partialOrder' when calling OrderApi->patch")

        
    
    var postBody: AnyRef = partialOrder

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PATCH", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param address  
   * @return Any
   */
  def patchBillingAddress (buyerID: String, orderID: String, address: Address) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/billto".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (address == null) throw new Exception("Missing required parameter 'address' when calling OrderApi->patchBillingAddress")

        
    
    var postBody: AnyRef = address

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PATCH", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param address  
   * @return Any
   */
  def patchShippingAddress (buyerID: String, orderID: String, address: Address) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/shipto".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (address == null) throw new Exception("Missing required parameter 'address' when calling OrderApi->patchShippingAddress")

        
    
    var postBody: AnyRef = address

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PATCH", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param promoCode Promo code of the order. 
   * @return Any
   */
  def removePromotion (buyerID: String, orderID: String, promoCode: String) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/promotions/{promoCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))

.replaceAll("\\{" + "promoCode" + "\\}",apiInvoker.escape(promoCode))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param address  
   * @return Any
   */
  def setBillingAddress (buyerID: String, orderID: String, address: Address) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/billto".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (address == null) throw new Exception("Missing required parameter 'address' when calling OrderApi->setBillingAddress")

        
    
    var postBody: AnyRef = address

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param address  
   * @return Any
   */
  def setShippingAddress (buyerID: String, orderID: String, address: Address) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/shipto".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (address == null) throw new Exception("Missing required parameter 'address' when calling OrderApi->setShippingAddress")

        
    
    var postBody: AnyRef = address

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param shipment  
   * @return Any
   */
  def ship (buyerID: String, orderID: String, shipment: Shipment) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/ship".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (shipment == null) throw new Exception("Missing required parameter 'shipment' when calling OrderApi->ship")

        
    
    var postBody: AnyRef = shipment

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @return Any
   */
  def submit (buyerID: String, orderID: String) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}/submit".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param tempUserToken Temp user token of the order. 
   * @return void
   */
  def transferTempUserOrder (buyerID: String, tempUserToken: String)  = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if(String.valueOf(tempUserToken) != "null") queryParams += "tempUserToken" -> tempUserToken.toString
    
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param buyerID ID of the buyer. 
   * @param orderID ID of the order. 
   * @param order  
   * @return Any
   */
  def update (buyerID: String, orderID: String, order: Order) : Option[Any] = {
    // create path and map variables
    val path = "/buyers/{buyerID}/orders/{orderID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "buyerID" + "\\}",apiInvoker.escape(buyerID))

.replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (order == null) throw new Exception("Missing required parameter 'order' when calling OrderApi->update")

        
    
    var postBody: AnyRef = order

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
